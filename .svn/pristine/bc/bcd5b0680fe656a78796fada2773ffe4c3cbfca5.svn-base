      -------------------- Définition des variables --------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
addonName, GH_Globals=...
addonName = "GearHelper"
local version = GetAddOnMetadata(addonName, "Version")
local versionCible = nil
--print("Version actuelle : "..version)
local prefix = "GeARHeLPeRPReFIX"--..version -- rajouter version si on veut que notre addon ne comunique QUE avec les GH de la même version
-- ^ Pour le préfix, choisir un nom qu'on est sûr que personne d'autre ne réutilisera

local allEvents = {}
local allPrefix = {["askVersion"..prefix] = sendAnswerVersion, ["answerVersion"..prefix] = receiveAnswer,}
local nbSlotsBag = {[0] = 0, [1] = 0, [2] = 0, [3] = 0, [4] = 0}
local eventHandler, waitAnswerFrame, loadFrame = CreateFrame("Frame"), CreateFrame("Frame"), CreateFrame("Frame")
local askTime, maxWaitTime = nil, 15
local bagInventory = {}
local GearHelper.charInventory = {}
local itemaTestNom = {}
local levelMax = 100
--local id, name, description, icon, background, role, primaryStat = GetSpecializationInfo(GetSpecialization(), false, false, UnitName("player"), UnitSex("player"))
GearHelper.db.global.templates[currentSpec][weightTemplate] = ...

local function getSubTypeStuff( idItem )
	local _, _, _, _, _, _, itemSubType = GetItemInfo(idItem)
	return itemSubType
end

local nomsStuff = {

["Maille"] = getSubTypeStuff( 87456 ),
["Plaque"] = getSubTypeStuff( 87506 ),
["Cuir"] = getSubTypeStuff( 87522 ),
["Tissu"] = getSubTypeStuff( 87447 ),
["Boucliers"] = getSubTypeStuff( 50616 ),
["Dagues"] = getSubTypeStuff( 87467 ),
["Armes de pugilat"] = getSubTypeStuff( 50710 ),
["Haches à une main"] = getSubTypeStuff( 50737 ),
["Masses à une main"] = getSubTypeStuff( 50734 ),
["Haches à deux mains"] = getSubTypeStuff( 50709 ),
["Masses à deux mains"] = getSubTypeStuff( 50603 ),
["Épées à une main"] = getSubTypeStuff( 50732 ),
["Épées à deux mains"] = getSubTypeStuff( 50730 ),
["Armes d’hast"] = getSubTypeStuff( 50735 ),
["Bâtons"] = getSubTypeStuff( 50648 ),
["Arcs"] = getSubTypeStuff( 50638 ),
["Arbalètes"] = getSubTypeStuff( 50732 ),
["Armes à feu"] = getSubTypeStuff( 51834 ),
["Baguettes"] = getSubTypeStuff( 50631 ),
["Glaives de guerre"] = getSubTypeStuff( 128956 ),
["Camelote"] = getSubTypeStuff(52027),
["Divers"] = getSubTypeStuff(34361),
["Ornemental"] = getSubTypeStuff(117407),

}

local WARRIOR = {
[1] = nomsStuff["Maille"],
[2] = nomsStuff["Plaque"],
[3] = nomsStuff["Boucliers"],
[4] = nomsStuff["Dagues"],
[5] = nomsStuff["Armes de pugilat"],
[6] = nomsStuff["Haches à une main"],
[7] = nomsStuff["Masses à une main"],
[8] = nomsStuff["Épées à une main"],
[9] = nomsStuff["Armes d’hast"],
[10] = nomsStuff["Bâtons"],
[11] = nomsStuff["Haches à deux mains"],
[12] = nomsStuff["Masses à deux mains"],
[13] = nomsStuff["Épées à deux mains"],
[14] = nomsStuff["Camelote"],
}

local PALADIN = {
[1] = nomsStuff["Plaque"],
[2] = nomsStuff["Boucliers"],
[3] = nomsStuff["Haches à une main"],
[4] = nomsStuff["Masses à une main"],
[5] = nomsStuff["Épées à une main"],
[6] = nomsStuff["Armes d’hast"],
[7] = nomsStuff["Haches à deux mains"],
[8] = nomsStuff["Masses à deux mains"],
[9] = nomsStuff["Épées à deux mains"],
[10] = nomsStuff["Divers"],
[11] = nomsStuff["Ornemental"],
[12] = nomsStuff["Tissu"],
}

local HUNTER = {
[1] = nomsStuff["Cuir"],
[2] = nomsStuff["Maille"],
[3] = nomsStuff["Arcs"],
[4] = nomsStuff["Arbalètes"],
[5] = nomsStuff["Armes à feu"],
[6] = nomsStuff["Armes d’hast"],
[7] = nomsStuff["Camelote"],
[8] = nomsStuff["Divers"],
[9] = nomsStuff["Ornemental"],
[10] = nomsStuff["Tissu"],
}

local ROGUE = {
[1] = nomsStuff["Cuir"],
[2] = nomsStuff["Dagues"],
[3] = nomsStuff["Armes de pugilat"],
[4] = nomsStuff["Haches à une main"],
[5] = nomsStuff["Masses à une main"],
[6] = nomsStuff["Épées à une main"],
[7] = nomsStuff["Camelote"],
[8] = nomsStuff["Divers"],
[9] = nomsStuff["Ornemental"],
[10] = nomsStuff["Tissu"],
}

local PRIEST = {
[1] = nomsStuff["Tissu"],
[2] = nomsStuff["Dagues"],
[3] = nomsStuff["Masses à une main"],
[4] = nomsStuff["Bâtons"],
[5] = nomsStuff["Baguettes"],
[6] = nomsStuff["Camelote"],
[7] = nomsStuff["Divers"],
[8] = nomsStuff["Ornemental"],
}

local DEATH_KNIGHT = {
[1] = nomsStuff["Plaque"],
[2] = nomsStuff["Haches à une main"],
[3] = nomsStuff["Haches à deux mains"],
[4] = nomsStuff["Masses à une main"],
[5] = nomsStuff["Masses à deux mains"],
[6] = nomsStuff["Armes d’hast"],
[7] = nomsStuff["Épées à deux mains"],
[8] = nomsStuff["Épées à une main"],
[9] = nomsStuff["Camelote"],
[10] = nomsStuff["Divers"],
[11] = nomsStuff["Ornemental"],
[12] = nomsStuff["Tissu"],
}

local SHAMAN = {
[1] = nomsStuff["Maille"],
[2] = nomsStuff["Cuir"],
[3] = nomsStuff["Boucliers"],
[4] = nomsStuff["Dagues"],
[5] = nomsStuff["Armes de pugilat"],
[6] = nomsStuff["Haches à une main"],
[7] = nomsStuff["Masses à une main"],
[8] = nomsStuff["Masses à deux mains"],
[9] = nomsStuff["Haches à deux mains"],
[10] = nomsStuff["Bâtons"],
[11] = nomsStuff["Camelote"],
[12] = nomsStuff["Divers"],
[13] = nomsStuff["Ornemental"],
[14] = nomsStuff["Tissu"],
}

local MAGE = {
[1] = nomsStuff["Tissu"],
[2] = nomsStuff["Dagues"],
[3] = nomsStuff["Épées à une main"],
[4] = nomsStuff["Bâtons"],
[5] = nomsStuff["Baguettes"],
[6] = nomsStuff["Camelote"],
[7] = nomsStuff["Divers"],
[8] = nomsStuff["Ornemental"],
}

local WARLOCK = {
[1] = nomsStuff["Tissu"],
[2] = nomsStuff["Dagues"],
[3] = nomsStuff["Épées à une main"],
[4] = nomsStuff["Bâtons"],
[5] = nomsStuff["Baguettes"],
[6] = nomsStuff["Camelote"],
[7] = nomsStuff["Divers"],
[8] = nomsStuff["Ornemental"],
}

local MONK = {
[1] = nomsStuff["Cuir"],
[2] = nomsStuff["Bâtons"],
[3] = nomsStuff["Haches à une main"],
[4] = nomsStuff["Masses à une main"],
[5] = nomsStuff["Épées à une main"],
[6] = nomsStuff["Armes d’hast"],
[7] = nomsStuff["Armes de pugilat"],
[8] = nomsStuff["Camelote"],
[9] = nomsStuff["Divers"],
[10] = nomsStuff["Ornemental"],
[11] = nomsStuff["Tissu"],
}

local DRUID = {
[1] = nomsStuff["Cuir"],
[2] = nomsStuff["Dagues"],
[3] = nomsStuff["Armes de pugilat"],
[4] = nomsStuff["Masses à une main"],
[5] = nomsStuff["Armes d’hast"],
[6] = nomsStuff["Masses à deux mains"],
[7] = nomsStuff["Bâtons"],
[8] = nomsStuff["Camelote"],
[9] = nomsStuff["Divers"],
[10] = nomsStuff["Ornemental"],
[11] = nomsStuff["Tissu"],
}

local DEMON_HUNTER = {
[1] = nomsStuff["Cuir"],
[2] = nomsStuff["Glaives de guerre"],
[3] = nomsStuff["Dagues"],
[4] = nomsStuff["Épées à une main"],
[5] = nomsStuff["Haches à une main"],
[6] = nomsStuff["Armes de pugilat"],
[7] = nomsStuff["Camelote"],
[8] = nomsStuff["Divers"],
[9] = nomsStuff["Ornemental"],
[10] = nomsStuff["Tissu"],
}

-- NE PAS OUBLIER DE RAJOUTER LA VERSION PRÉCÉDENTE ICI APRÈS CHAQUE MISE A JOUR !!!!
--local GHoldVersions = {"0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6"}
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
      ----------------- Fin de définition des variables -----------------

      waitAnswerFrame:Hide()

-- Initialise la variable sur true la première fois qu'on utilise l'addon
-- Variable par perso, permet d'avoir différents profils
local function setDefault()
	if GHActivated == nil then
		GHActivated = true
		print("GHActivated = true")
	end
	if GHSGActivated == nil then
		GHSGActivated = true
		print("GHSGActivated = true")
	end
	if GHAGActivated == nil then
		GHAGActivated = true
		print("GHAGActivated = true")
	end
	if GHAAQRActivated == nil then
		GHAAQRActivated = true
		print("GHAAQRActivated = true")
	end
end

-- desc : Permet de changer l'état (on / off) de l'addon
-- entrée : booleen (true / false)
-- sortie : string (message indiquant si l'addon est sur on ou off)
-- commentaire :
local function setActivated( valeur )
	if valeur == true then
		GHActivated = true
		print(L["Addon_True"])
		elseif valeur == false then
			GHActivated = false
			print(L["Addon_False"])
		else
			print(L["Addon_Error"])
		end
	end

-- permet d'activer/désactiver la vente d'objets gris
local function setGHSGActivated( valeur )
	if valeur == true then
		GHSGActivated = true
		print(L["SellGrey_True"])
		elseif valeur == false then
			GHSGActivated = false
			print(L["SellGrey_False"])
		else
			print(L[L["SellGrey_Error"]])
		end
	end

-- permet d'activer / désactiver la cupidité automatique
local function setGHAGActivated( valeur )
	if valeur == true and GHAGActivated == false then
		GHAGActivated = true
		print("Cupi automatique activée")
		elseif valeur == false and GHAGActivated == true then
			GHAGActivated = false
			print("Cupi automatique désactivée")
		end
	end

-- permet d'activé la récupération automatique de récomense de quete
-- (GHAAQRActivated = GearHelper Auto Accept Quest Reward)
local function setGHAAQRActivated( valeur )
	if valeur == true and GHAAQRActivated == false then
		GHAAQRActivated = true
		print("Accéptation automatique des récompenses de quêtes activée")
		elseif valeur == false and GHAAQRActivated == true then
			GHAAQRActivated = false
			print("Accéptation automatique des récompenses de quêtes désactivée")
		end
	end

-- desc : Envoie dans la guilde / raid / groupe une demande aux autres GH pour savoir s'ils sont à jour
-- entrée : ø
-- sortie : ø
-- commentaire :
local function sendAskVersion()
if UnitInRaid("player") ~= nil then
	SendAddonMessage(prefix, "askVersion;"..version, "RAID")
end
if IsInGuild() == true then
	SendAddonMessage(prefix, "askVersion;"..version, "GUILD")
end
if UnitInParty("player") then
	SendAddonMessage(prefix, "askVersion;"..version, "PARTY")
end
askTime = time()
waitAnswerFrame:Show()
end

-- desc : Quand on reçoit une demande de version, l'addon utilise cette fonction qui envoit la réponse
-- entrée : ø
-- sortie : ø
-- commentaire :
local function sendAnswerVersion()
if UnitInRaid("player") ~= nil then
	SendAddonMessage(prefix, "answerVersion;"..version, "RAID")
end
if IsInGuild() then
	SendAddonMessage(prefix, "answerVersion;"..version, "GUILD")
end
if UnitInParty("player") then
	SendAddonMessage(prefix, "answerVersion;"..version, "PARTY")
end
end

-- desc : Vérifie si l'addon est à jour quand il recoit une réponse
-- entrée : string (version de la cible), string (nom de la cible)
-- sortie : string (message si l'addon n'est pas à jour, sinon rien)
-- commentaire :
local function receiveAnswer( msgV, msgC )
	if askTime then
		local answerCible = msgC:sub(msgC:find("-") - 1, #msgC)
		if tonumber(versionCible) > tonumber(GetAddOnMetadata(addonName, "Version")) then
			if L["local"] == "FR" then
				print("Vous utilisez la version |cFFFF0000"..version.."|r de GearHelper. La version |cFF00FF00"..msgV.."|r a été trouvée chez "..msgC)
				elseif L["local"] == "US" or L["local"] == "DE" then
					print("You are using version |cFFFF0000"..version.."|r of GearHelper. Version |cFF00FF00"..msgV.."|r was find from "..msgC)
				end
				askTime = nil
				waitAnswerFrame:Hide()
			end
		end
	end
	waitAnswerFrame:SetScript("OnUpdate", function ( self, elapsed )
		if askTime and (time() - askTime) > maxWaitTime then
			askTime = nil
			waitAnswerFrame:Hide()
		end
		end)


-------------------------------------------------------------------------------
								-- FONCTIONS --
-------------------------------------------------------------------------------

-- desc :
-- entrée :
-- sortie :
-- commentaire : itemName, itemLink, itemRarity, itemLevel, itemMinLevel, itemType, itemSubType, itemStackCount, itemEquipLoc, itemTexture, itemSellPrice = GetItemInfo(itemID)
local function testSiObjetGris( itemID ) -- itemID ou itemLink ou itemName ou itemString
	local _, _, itemRarity = GetItemInfo(itemID)
	if itemRarity == 0 then
		return true
	else
		return false
	end
	if itemRarity == nil then
		return false
	end
end

-- desc :
-- entrée :
-- sortie :
-- commentaire : creatureName, spellID, icon, active, isUsable, sourceType, isFavorite, isFactionSpecific, faction, hideOnChar, isCollected, mountID  = C_MountJournal.GetDisplayedMountInfo(i)
local function testSiMonture( nameMount )
	local i = 1
	local creatureName, spellID  = C_MountJournal.GetDisplayedMountInfo(i)
	while creatureName ~= nil do
		if creatureName == nameMount then
			return true
		end
		i = i + 1
		creatureName, spellID  = C_MountJournal.GetDisplayedMountInfo(i)
	end
	return false
end

local  function testSiUtilisable( idObjet )
	local _, _, _, _, _, itemType, _, _, itemEquipLoc, _, itemSellPrice = GetItemInfo(idObjet)
	if itemType == L["armor"] or itemType == L["weapon"] then
		if not IsDressableItem(idObjet) then
			if (itemSellPrice / 100 / 100) >= 1 then
				return false
			end
		end
	end
end

-- desc : Cette fonction permet de récupérer le nombre de slots dans l'inventaire du joueur
-- entrée : ø
-- sortie : ø
-- commentaire :
local function nbSlotsTotal()
	local nbSlots = 0
	local i = 0
	while i <= 4 do
		if GetContainerNumSlots(i)  then
			nbSlots = nbSlots + GetContainerNumSlots(i)
		end
		i = i + 1
	end
	return nbSlots
end



-- desc :
-- entrée :
-- sortie :
-- commentaire :
local function scanCharacter()
	local count = 0

	if GetInventoryItemLink("player",GetInventorySlotInfo("HeadSlot")) ~= nil then
		repeat
			GearHelper.charInventory["Head"] = GetInventoryItemLink("player",GetInventorySlotInfo("HeadSlot"))
		until GearHelper.charInventory["Head"] = []
	else
		GearHelper.charInventory["Head"] = 0
	end
	if GetInventoryItemLink("player",GetInventorySlotInfo("NeckSlot")) ~= nil then
		repeat
			GearHelper.charInventory["Neck"] = GetInventoryItemLink("player",GetInventorySlotInfo("NeckSlot"))
		until GearHelper.charInventory["Neck"] = []
		--GearHelper.charInventory["Neck"] = GetInventoryItemLink("player",GetInventorySlotInfo("NeckSlot"))
	else
		GearHelper.charInventory["Neck"] = 0
	end
	if GetInventoryItemLink("player",GetInventorySlotInfo("ShoulderSlot")) ~= nil then
		repeat
			GearHelper.charInventory["Shoulder"] = GetInventoryItemLink("player",GetInventorySlotInfo("ShoulderSlot"))
		until GearHelper.charInventory["Shoulder"] = []
	--	GearHelper.charInventory["Shoulder"] = GetInventoryItemLink("player",GetInventorySlotInfo("ShoulderSlot"))
	else
		GearHelper.charInventory["Shoulder"] = 0
	end
	if GetInventoryItemLink("player",GetInventorySlotInfo("BackSlot")) ~= nil then
		repeat
			GearHelper.charInventory["Back"] = GetInventoryItemLink("player",GetInventorySlotInfo("BackSlot"))
		until GearHelper.charInventory["Back"] = []
		-- GearHelper.charInventory["Back"] = GetInventoryItemLink("player",GetInventorySlotInfo("BackSlot"))
	else
		GearHelper.charInventory["Back"] = 0
	end
	if GetInventoryItemLink("player",GetInventorySlotInfo("ChestSlot")) ~= nil then
		repeat
			GearHelper.charInventory["Chest"] = GetInventoryItemLink("player",GetInventorySlotInfo("ChestSlot"))
		until GearHelper.charInventory["Chest"] = []
		-- GearHelper.charInventory["Chest"] = GetInventoryItemLink("player",GetInventorySlotInfo("ChestSlot"))
	else
		GearHelper.charInventory["Chest"] = 0
	end
	if GetInventoryItemLink("player",GetInventorySlotInfo("WristSlot")) ~= nil then
		repeat
			GearHelper.charInventory["Wrist"] = GetInventoryItemLink("player",GetInventorySlotInfo("WristSlot"))
		until GearHelper.charInventory["Wrist"] = []
		-- GearHelper.charInventory["Wrist"] = GetInventoryItemLink("player",GetInventorySlotInfo("WristSlot"))
	else
		GearHelper.charInventory["Wrist"] = 0
	end
	if GetInventoryItemLink("player",GetInventorySlotInfo("HandsSlot")) ~= nil then
		repeat
			GearHelper.charInventory["Hands"] = GetInventoryItemLink("player",GetInventorySlotInfo("HandsSlot"))
		until GearHelper.charInventory["Hands"] = []
		-- GearHelper.charInventory["Hands"] = GetInventoryItemLink("player",GetInventorySlotInfo("HandsSlot"))
	else
		GearHelper.charInventory["Hands"] =  0
	end
	if GetInventoryItemLink("player",GetInventorySlotInfo("WaistSlot")) ~= nil then
		repeat
			GearHelper.charInventory["Waist"] = GetInventoryItemLink("player",GetInventorySlotInfo("WaistSlot"))
		until GearHelper.charInventory["Waist"] = []
		-- GearHelper.charInventory["Waist"] = GetInventoryItemLink("player",GetInventorySlotInfo("WaistSlot"))
	else
		GearHelper.charInventory["Waist"] = 0
	end
	if GetInventoryItemLink("player",GetInventorySlotInfo("LegsSlot")) ~= nil then
		repeat
			GearHelper.charInventory["Legs"] = GetInventoryItemLink("player",GetInventorySlotInfo("LegsSlot"))
		until GearHelper.charInventory["Legs"] = []
	--	GearHelper.charInventory["Legs"] = GetInventoryItemLink("player",GetInventorySlotInfo("LegsSlot"))
	else
		GearHelper.charInventory["Legs"] = 0
	end
	if GetInventoryItemLink("player",GetInventorySlotInfo("FeetSlot")) ~= nil then
		repeat
			GearHelper.charInventory["Feet"] = GetInventoryItemLink("player",GetInventorySlotInfo("FeetSlot"))
		until GearHelper.charInventory["Feet"] = []
		-- GearHelper.charInventory["Feet"] = GetInventoryItemLink("player",GetInventorySlotInfo("FeetSlot"))
	else
		GearHelper.charInventory["Feet"] =  0
	end
	if GetInventoryItemLink("player",GetInventorySlotInfo("Finger0Slot")) ~= nil then
		repeat
			GearHelper.charInventory["Finger0"] = GetInventoryItemLink("player",GetInventorySlotInfo("Finger0Slot"))
		until GearHelper.charInventory["Finger0"] = []
		-- GearHelper.charInventory["Finger0"] = GetInventoryItemLink("player",GetInventorySlotInfo("Finger0Slot"))
	else
		GearHelper.charInventory["Finger0"] = 0
	end
	if GetInventoryItemLink("player",GetInventorySlotInfo("Finger1Slot")) ~= nil then
		repeat
			GearHelper.charInventory["Finger1"] = GetInventoryItemLink("player",GetInventorySlotInfo("Finger1Slot"))
		until GearHelper.charInventory["Finger1"] = []
		-- GearHelper.charInventory["Finger1"] = GetInventoryItemLink("player",GetInventorySlotInfo("Finger1Slot"))
	else
		GearHelper.charInventory["Finger1"] = 0
	end
	if GetInventoryItemLink("player",GetInventorySlotInfo("Trinket0Slot")) ~= nil then
		repeat
			GearHelper.charInventory["Trinket0"] = GetInventoryItemLink("player",GetInventorySlotInfo("Trinket0Slot"))
		until GearHelper.charInventory["Trinket0"] = []
		-- GearHelper.charInventory["Trinket0"] = GetInventoryItemLink("player",GetInventorySlotInfo("Trinket0Slot"))
	else
		GearHelper.charInventory["Trinket0"] = 0
	end
	if GetInventoryItemLink("player",GetInventorySlotInfo("Trinket1Slot")) ~= nil then
		repeat
			GearHelper.charInventory["Trinket1"] = GetInventoryItemLink("player",GetInventorySlotInfo("Trinket1Slot"))
		until GearHelper.charInventory["Trinket1"] = []
		-- GearHelper.charInventory["Trinket1"] = GetInventoryItemLink("player",GetInventorySlotInfo("Trinket1Slot"))
	else
		GearHelper.charInventory["Trinket1"] = 0
	end
	if GetInventoryItemLink("player",GetInventorySlotInfo("MainHandSlot")) ~= nil then
		repeat
			GearHelper.charInventory["MainHand"] = GetInventoryItemLink("player",GetInventorySlotInfo("MainHandSlot"))
		until GearHelper.charInventory["MainHand"] = []
		-- GearHelper.charInventory["MainHand"] = GetInventoryItemLink("player",GetInventorySlotInfo("MainHandSlot"))
	else
		GearHelper.charInventory["MainHand"] = 0
	end
	if GetInventoryItemLink("player",GetInventorySlotInfo("SecondaryHandSlot")) ~= nil then
		repeat
			GearHelper.charInventory["SecondaryHand"] = GetInventoryItemLink("player",GetInventorySlotInfo("SecondaryHandSlot"))
		until GearHelper.charInventory["SecondaryHand"] = []
		-- GearHelper.charInventory["SecondaryHand"] = GetInventoryItemLink("player",GetInventorySlotInfo("SecondaryHandSlot"))
	else
		GearHelper.charInventory["SecondaryHand"] = 0
	end
end

-- desc : Fonction qui parse un link en ID
-- entrée : itemLink ( EX : |Hitem:124586:0:0:0:0:12254684455852 )
-- sortie : ID ( EX : 124586 )
-- commentaire :
local function parseID(link)
	local a = string.match(link, "item[%-?%d::]+")
	local b = string.sub(a, 5, 12)
	local c = string.gsub(b, ":", "")
	return c
end

local function diffItemValueTemplate(delta)
	local valueItem = 0
	local localizedClass, englishClass, classIndex = UnitClass("player")
	for stat, value in pairs(delta) do
		if (stat == "ITEM_MOD_INTELLECT_SHORT" and GearHelper.db.global.templates[currentSpec][weightTemplate]["Intellect"] ~= nil) then
			valueItem = valueItem + GearHelper.db.global.templates[currentSpec][weightTemplate]["Intellect"] * value
		end
		if (stat == "ITEM_MOD_HASTE_RATING_SHORT"  and GearHelper.db.global.templates[currentSpec][weightTemplate]["Haste"] ~= nil) then
			valueItem = valueItem + GearHelper.db.global.templates[currentSpec][weightTemplate]["Haste"]*value
		end
		if (stat == "ITEM_MOD_CRIT_RATING_SHORT" and GearHelper.db.global.templates[currentSpec][weightTemplate]["CriticalStrike"] ~= nil) then
			valueItem = valueItem + GearHelper.db.global.templates[currentSpec][weightTemplate]["CriticalStrike"]*value
		end
		if (stat == "ITEM_MOD_STAMINA_SHORT" and GearHelper.db.global.templates[currentSpec][weightTemplate]["Stamina"] ~= nil) then
			valueItem = valueItem + GearHelper.db.global.templates[currentSpec][weightTemplate]["Stamina"]*value
		end
		if (stat == "ITEM_MOD_MASTERY_RATING_SHORT" and GearHelper.db.global.templates[currentSpec][weightTemplate]["Mastery"] ~= nil) then
			valueItem = valueItem + GearHelper.db.global.templates[currentSpec][weightTemplate]["Mastery"]*value
		end
		if (stat == "ITEM_MOD_VERSATILITY_SHORT" and GearHelper.db.global.templates[currentSpec][weightTemplate]["Versatility"] ~= nil) then
			valueItem = valueItem + GearHelper.db.global.templates[currentSpec][weightTemplate]["Versatility"]*value
		end
		if (stat == "RESISTANCE0_NAME" and GearHelper.db.global.templates[currentSpec][weightTemplate]["Armor"] ~= nil) then
			valueItem = valueItem + GearHelper.db.global.templates[currentSpec][weightTemplate]["Armor"]*value
			--print(valueItem.." + "..GearHelper.db.global.templates[currentSpec][weightTemplate]["Armor"].." * "..value.." = "..valueItem)
		end
		if (stat == "ITEM_MOD_HIT_RATING_SHORT" and GearHelper.db.global.templates[currentSpec][weightTemplate]["Hit"] ~= nil) then
			valueItem = valueItem + GearHelper.db.global.templates[currentSpec][weightTemplate]["Hit"]*value
		end
		if (stat == "ITEM_MOD_STRENGTH_SHORT" and GearHelper.db.global.templates[currentSpec][weightTemplate]["Strength"] ~= nil) then
			valueItem = valueItem + GearHelper.db.global.templates[currentSpec][weightTemplate]["Strength"] * value
		end
		if stat == "ITEM_MOD_AGILITY_SHORT" and GearHelper.db.global.templates[currentSpec][weightTemplate]["Agility"] ~= nil then
			valueItem = valueItem + GearHelper.db.global.templates[currentSpec][weightTemplate]["Agility"] * value
		end
		if (stat == "ITEM_MOD_CR_MULTISTRIKE_SHORT" and GearHelper.db.global.templates[currentSpec][weightTemplate]["Multistrike"] ~= nil) then
			valueItem = valueItem + GearHelper.db.global.templates[currentSpec][weightTemplate]["Multistrike"]*value
		end
		--print(_G[stat].." : "..value)
	end
	--print("valueItem : "..valueItem)
	--print(valueItem)
	return valueItem
end

local function weightCalculation(itemLink)
	if GHActivated == true then
  	local playerSpec = string.gsub(string.sub(GetSpecializationInfo(GetSpecialization()), 0, 3),'%W','')--renvoi la spe du joueur
  	playerSpec = tonumber(playerSpec)
  	if itemLink ~= nil then
		local tabSpec = GetItemSpecInfo(itemLink)--renvoi les spe viable pour un equipement
		local valueItem = -100
		if tabSpec ~= nil then
			--if equipedItem ~= 0 then
				for b = 1, #tabSpec do
					if(tonumber(tabSpec[b]) == playerSpec) then
						local _, lootItem, _, _, _, _, _, _, itemLootEquipLoc = GetItemInfo(itemLink)

						if GearHelper.charInventory[GearHelper.itemSlot[itemLootEquipLoc]] == nil then
							--rprint("Je suis nil au "..tostring(itemLootEquipLoc))
						else
							local _, equipedItem = GetItemInfo(GearHelper.charInventory[GearHelper.itemSlot[itemLootEquipLoc]])
							local id, name, description, icon, background, role, primaryStat = GetSpecializationInfo(GetSpecialization(), false, false, UnitName("player"), UnitSex("player"))
							GearHelper.db.global.templates[currentSpec][weightTemplate] = GH_Globals[id]
							valueItem = diffItemValueTemplate(GetItemStatDelta(lootItem, equipedItem))
						end
					end
			--	end
			else
				valueItem = 100
			end
		end
		if valueItem <= 0 then
			return false, valueItem
		else
			return true, valueItem
		end
	end
end
end

local function testSiEquipable( classe, number )

	local _, _, _, _, _, _, itemSubType, _, _, _, _ = GetItemInfo(number)
	--print("Classe : "..classe)
	--print("itemSubType : "..itemSubType)

	if classe == "WARRIOR" then
		for k,v in pairs(WARRIOR) do
			if v == itemSubType then
				return true
			end
		end
		return false
	end
	if classe == "PALADIN" then
		for k,v in pairs(PALADIN) do
			if v == itemSubType then
				return true
			end
		end
		return false
	end
	if classe == "HUNTER" then
		for k,v in pairs(HUNTER) do
			if v == itemSubType then
				return true
			end
		end
		return false
	end
	if classe == "ROGUE" then
		for k,v in pairs(ROGUE) do
			if v == itemSubType then
				return true
			end
		end
		return false
	end
	if classe == "PRIEST" then
		for k,v in pairs(PRIEST) do
			if v == itemSubType then
				return true
			end
		end
		return false
	end
	if classe == "DEATH KNIGHT" then
		for k,v in pairs(DEATH_KNIGHT) do
			if v == itemSubType then
				return true
			end
		end
		return false
	end
	if classe == "SHAMAN" then
		for k,v in pairs(SHAMAN) do
			if v == itemSubType then
				return true
			end
		end
		return false
	end
	if classe == "MAGE" then
		for k,v in pairs(MAGE) do
			if v == itemSubType then
				return true
			end
		end
		return false
	end
	if classe == "WARLOCK" then
		for k,v in pairs(WARLOCK) do
			if v == itemSubType then
				return true
			end
		end
		return false
	end
	if classe == "MONK" then
		for k,v in pairs(MONK) do
			if v == itemSubType then
				return true
			end
		end
		return false
	end
	if classe == "DRUID" then
		for k,v in pairs(DRUID) do
			if v == itemSubType then
				return true
			end
		end
		--print("Ce n'est pas équipable, on cherchait "..itemSubType)
		return false
	end
	if classe == "DEMON HUNTER" then
		for k,v in pairs(DEMON_HUNTER) do
			if v == itemSubType then
				return true
			end
		end
		return false
	end
end

-- desc : Inventoriage des sacs
-- entrée :
-- sortie :
-- commentaire :
local function scanBag()
	local count = 0
	for bag = 0,4 do
		for slot = 1,GetContainerNumSlots(bag) do
			local itemLink = GetContainerItemLink(bag, slot)
    		--Faire un getinventoryitemid pour tester si y'a bien un item et ensuite getinventoryitemlink pour recup le lien et non pas l'id de transmog
    		if itemLink ~= nil then
    			local _, _, _, _, _, itemType, _, _, itemEquipLoc, _, itemSellPrice = GetItemInfo(itemLink)
    			if itemType == L["armor"] or itemType == L["weapon"] then
    				table.insert(bagInventory, itemLink)
    				count  = count + 1  --------------------------------------------- à virer ?!
    				weightCalculation(itemLink)
    			end
    		end
    	end
    end
end

GameTooltip:HookScript('OnTooltipSetItem', function(self)
	if GHActivated == true then
		local _, item = self:GetItem()
		if (item) then
			local _, _, _, _, _, itemType = GetItemInfo(item)
			if itemType == L["armor"] or itemType == L["weapon"] then
				local ret, value = weightCalculation(item)
				if ret then
					self:AddLine("|cFF7FFFD4Cet item est mieux avec une valeur de +"..math.floor(value))
				else
					self:AddLine("|cFFFF0066Cet item est moins bien")-- avec une valeur de "..math.floor(value))
					self:Show()
				end
			end
		end
	end
	end)
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------

----------------------
-- Helper functions --				Pour ceux qui se demandent, oui, je dessine mieux en ASCII que je ne code
----------------------
--local function getCommand( command, instruction)
--	return "|cFFFF7D0A"..command.." : |r"..instruction
--end

--------------------
-- Slash commands --
--------------------
local allCommands = {
	--void = "|cFFFFFF00Tapez |cFF00FF00/gh|r|cFFFFFF00 ou |cFF00FF00/gh help|r|cFFFFFF00 pour voir l'aide|r",
	on = L["onHelpInfo"],
	off = L["offHelpInfo"],
	state = L["stateHelpInfo"],
	sgon = L["sgonHelpInfo"],
	sgoff = L["sgoffHelpInfo"],
	gaon = "|cFFFFFF00/gh gaon / gaoff --> Active / désactive la fonction de cupidité automatique en instance",
	gaoff = "|cFFFFFF00/gh gaoff --> Désactive la fonction de cupidité automatique en instance",
	aaron = "|cFFFFFF00/gh aaron / aaroff --> Active / désactive la récupération automatique des récompenses de quête",
	aaroff = "|cFFFFFF00/gh aaroff --> Désactive la récupération automatique des récompenses de quête",
}

local slashCmdFunc = {
voidcommand = function ( msg )
print("|cFFFFFF00Tapez |cFF00FF00/gh|r|cFFFFFF00 ou |cFF00FF00/gh help|r|cFFFFFF00 pour voir l'aide|r")
end,
on = function ( msg )
if GHActivated == false then
	setActivated(true)
end
end,
enable = function ( msg )
if GHActivated == false then
	setActivated(true)
end
end,
activated = function ( msg )
if GHActivated == false then
	setActivated(true)
end
end,
off = function ( msg )
if GHActivated == true then
	setActivated(false)
end
end,
disable = function ( msg )
if GHActivated == true then
	setActivated(false)
end
end,
deactivated = function ( msg )
if GHActivated == true then
	setActivated(false)
end
end,
help = function ( msg )
print(allCommands.on)
print(allCommands.state)
print(allCommands.sgon)
print(allCommands.gaon)
print(allCommands.aaron)
end,
state = function ( msg )
local etatAddon = nil
local etatSG = nil
local etatAG = nil

if GHSGActivated == true then
	etatSG = L["ActivatedGreen"]
else
	etatSG = L["DeactivatedRed"]
end

if GHAGActivated == true then
	etatAG = L["ActivatedGreen"]
else
	etatAG = L["DeactivatedRed"]
end

if GHActivated == true then
	etatAddon = "|cFF00FF00activé|r"
else
	etatAddon = "|cFFFF0000désactivé|r"
	etatSG = L["DeactivatedRed"]
	etatAG = L["DeactivatedRed"]
end

if etatAG ~= nil and etatAddon ~= nil and etatSG ~= nil then
	print("|cFFFFFF00GearHelper est |r"..etatAddon.."|cFFFFFF00, la vente d'objets gris est |r"..etatSG.."|cFFFFFF00, et l'option de cupi automatique est |r"..etatAG.."|cFFFFFF00.|r")
else
	print("Error please contact marsgamess@gmail.com")
end
end,
list = function ( msg )
scanBag()
scanCharacter()
	 	--weightCalculation()
	 	end,
	 	sgon = function ( msg )
	 	if GHSGActivated == false then
	 		setGHSGActivated(true)
	 	end
	 	end,
	 	sgoff = function ( msg )
	 	if GHSGActivated == true then
	 		setGHSGActivated(false)
	 	end
	 	end,
	 	gaon = function ( msg )
	 	setGHAGActivated(true)
	 	end,
	 	gaoff = function ( msg )
	 	setGHAGActivated(false)
	 	end,
	 	aaron = function ( msg )
	 	setGHAAQRActivated(true)
	 	end,
	 	aaroff = function ( msg )
	 	setGHAAQRActivated(false)
	 	end,
	 }

-- Activation de /cmd
local cmd1 = "/gh"
local cmd2 = "/gearhelper"
SLASH_GEARHELPER1 = cmd1:lower()
SLASH_GEARHELPER2 = cmd2:lower()
-- Fin d'activation des /cmd
-- Déclaration des /cmd
SlashCmdList["GEARHELPER"] = function ( msg )
local instruction = msg:match("%a+")
if instruction then
	instruction = instruction:lower()
end
if msg == "" then
	slashCmdFunc["help"](msg)
	elseif slashCmdFunc[instruction] then
		slashCmdFunc[instruction](msg)
	else
		slashCmdFunc["voidcommand"](msg)
	end
--end
end
-- Fin déclaration des /cmd

-------------------
-- Event handler --
-------------------

-- Se déclenche quand les addons se chargent
function allEvents:ADDON_LOADED( name )
	if name == addonName then
		-- charge le préfix de l'addon (ou un truc du genre)
		RegisterAddonMessagePrefix(prefix)

		-- Active l'addon par défaut lors de la première connexion après l'installation
		if GHActivated == nil or GHSGActivated == nil or GHAGActivated == nil or GHAAQRActivated == nil then
			setDefault()
		end

		-- Affiche à chaque connection l'état de l'addon
		if GHActivated == true then
			print(L["Addon_True"])
			--sendAskVersion()
		else
			print(L["Addon_False"])
		end
	end
end

-- Se déclenche quand un message d'addon arrive
function allEvents:CHAT_MSG_ADDON( prefixMessage, message, channel, sender )
	if prefixMessage == prefix then
		local emeteur = sender:sub(0, (sender:find("-") - 1))
		if GHActivated == true then
			if emeteur ~= GetUnitName("player") then
				local prefVersion = message:sub(0, (message:find(";") - 1))
				if prefVersion == "answerVersion" then
					local vVersion = message:sub(message:find(";")+1, #message)
					versionCible = vVersion
					receiveAnswer(vVersion, sender)
				end
				if prefVersion == "askVersion" then
					sendAnswerVersion()
				end
			end
		end
	end
end

-- Quand un objet attérie dans l'inventaire --bag : 0, 1, 2, 3 ou 4
function allEvents:ITEM_PUSH( bag, icone )
	--print("icone : "..icone)
	for slot = 1,GetContainerNumSlots(bag) do
		local itemLink = GetContainerItemLink(bag, slot)
    	if itemLink ~= nil then
    		local name, link, _, _, _, itemType, _, _, itemEquipLoc, texture, itemSellPrice = GetItemInfo(itemLink)
    		--print("icone 2 : "..GetItemIcon(name) )
    		if itemType == L["armor"] or itemType == L["weapon"] then
    			table.insert(bagInventory, itemLink)
    			for index, value in ipairs(itemaTestNom) do
    				--print("Value = "..value)
    				if value == itemaTestNom[index] then
    					do return end
    				end
    			end
				if weightCalculation(itemLink) then
				   	table.insert(itemaTestNom, itemLink)
				   	if UnitLevel("player") < levelMax then
				   		EquipItemByName(itemLink)
				   		print("|cFF00FF00J'ai équipé "..itemLink)
				   	else
				   		UIErrorsFrame:AddMessage("Equipe "..itemLink, 0.0, 1.0, 0.0, 80)
				   	end
				else
    				UIErrorsFrame:AddMessage("N'équipe pas "..itemLink, 1.0, 0.0, 0.0, 30)
    			end
			end
		end
	end
end

-- Evenement se déclenche quanduand un arrive sur la page de la quête terminée (la ou il faut choisir la récompense)
function allEvents:QUEST_COMPLETE()
	local nbRecompenses = GetNumQuestChoices()

	if GHAAQRActivated == true then
		if GetNumQuestChoices() < 1 then
			GetQuestReward()
		end
	end

	--/script print(GetNumQuestChoices())   -- return le nombre de récompenses de quete
end

-- Evenement se déclenche à chaque écran de chargement
function allEvents:PLAYER_ENTERING_WORLD()
	if GHActivated == true then
		sendAskVersion()
		scanCharacter()
		scanBag()
	end
end

-- Evenement se déclanche quand la fenêtre besoin/cupi pop en donjon
function allEvents:START_LOOT_ROLL(number, timer)
	-- classeEN est la même, quelle que soit la langue du client
	local classeFR, classeEN, classeNumber = UnitClass("player")
	local link, name, _, _, bindOnPickUp, canNeed, canGreed  = GetLootRollItemInfo(number)
	local _, _, _, _, _, _, itemSubType = GetItemInfo(link)

	-- number = ID de l'objet à roll
	-- rollType = 0 pass, 1 need, 2 cupi
	-- ConfirmLootRoll(number, rollType)

	if GHAGActivated == true then

		if testSiMonture(name) then
			ConfirmLootRoll(number, 1)
			UIErrorsFrame:AddMessage("J'ai fait besoin sur "..link, 0.0, 1.0, 0.0, 5)
		end

		if canNeed == false then
			ConfirmLootRoll(number, 2)
		end

		if canNeed and weightCalculation(link) then
			ConfirmLootRoll(number, 1)
			itemaTestTime[indexItemaTest] = time() + timer
			itemaTestNom[indexItemaTest] = link
			UIErrorsFrame:AddMessage("J'ai need sur "..link..", équipe le si tu l'obtiens", 0.0, 1.0, 0.0, 5)
			indexItemaTest = indexItemaTest + 1
		else
			ConfirmLootRoll(number, 2)
		end
	end
end

-- Se déclenche quand l
function allEvents:UNIT_INVENTORY_CHANGED( joueur )
	if joueur == "player" and GHActivated == true then
		scanCharacter()
		scanBag()
	end
end

-- Evenement se déclenche quand on ouvre la fenetre d'un vendeur
function allEvents:MERCHANT_SHOW()
	if GHSGActivated then
		for bag = 0,4 do
			for slot = 1,GetContainerNumSlots(bag) do
				if GetContainerItemID(bag, slot) ~= nil then
					id = GetContainerItemID(bag, slot)
					if id then
						if testSiObjetGris(id) then
							UseContainerItem(bag, slot)
						end
					end
				end
			end
		end
	end
end

-- Se déclenche au changement de spé
function allEvents:ACTIVE_TALENT_GROUP_CHANGED()
	-- parcours des sacs
	-- on regarde si c'est un stuff
	-- si c'en est un un regarde s'il est mieux que celui qu'on à pour cete spé
	-- si oui on l'équipe
end
--------------------------------------------
-- xxxxx xxxxxxx --      -- xxxxx xxxxxxx --
--------------------------------------------

for event, _ in pairs(allEvents) do
	eventHandler:RegisterEvent(event)
end
eventHandler:SetScript("OnEvent", function ( self, event, ... )
	if GHActivated == true or GHActivated == nil then
		allEvents[event](self, ...)
	end
	end)

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------


--------------



-- pour chaques piece de stuff
-- faire une recherche dans l'inventaire
-- regarder s'il existe un stuff du même type
-- si oui, regarder s'il est meilleurs que celui qu'on à
-- si oui l'équiper
-- si non, le laisser dans l'inventaire


-- desc :
-- entrée :
-- sortie :
-- commentaire :
