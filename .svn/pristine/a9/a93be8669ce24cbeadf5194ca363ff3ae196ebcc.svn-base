--------------------------- Définition des variables ---------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--ligne 609 le bloc a l'air foireux, le reprendre
local defaultsOptions = {
    profile = {
        addonEnabled = true,
        sellGreyItems = false,
        autoGreed = true,
        autoAcceptQuestReward = true,
        autoNeed = true,
        autoEquipLooted = {
            actual = true,
            previous = true,
        },
        autoEquipWhenSwitchSpe = true,
        weightTemplate = "AMR",
        minimapButton = true,
        autoRepair = 0,
        autoInvite = true,
        autoTell = true,
        inviteMessage = "+GH123-",
        askLootRaid = true,
        printWhenEquip = true,
        debug = false,
    }
}
--[[

--Supprimer les traduction doublon activé/désactivé et concatener phrase+activé/désactivé

]]--
-- NE PAS OUBLIER DE RAJOUTER LA VERSION PRÉCÉDENTE ICI APRÈS CHAQUE MISE A JOUR !!!!
local GHoldVersions = {"0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.51", "0.6", "0.61", "0.7", "0.8", "0.9", "0.9.1", "1.0", "1.0.1", "1.0.2", "1.0.3", "1.1", "1.2",
"1.3", "1.3.1", "1.3.2", "1.3.3", "1.4", "1.4.1", "1.4.2", "1.5", "1.5.1", "1.5.2", "1.5.3", "1.5.4", "1.5.5", "1.5.6", "1.5.7", "1.5.8", "1.5.9", "1.5.9.1",
"1.6", "1.6.1", "1.6.2", "1.6.2.1", "1.6.3", "1.6.4", "1.6.5", "1.6.5.1", "1.6.5.2", "1.6.5.3", "1.6.5.4", "1.6.5.5", "1.6.5.6", "1.6.5.7", "1.6.5.8", "1.6.6", "1.6.6.1",
"1.6.6.2"   }

addonName = ...   --, GH_Globals = ...
addonName = "GearHelper"
--L.stats = {}
--frameInterface = nil

version = GetAddOnMetadata(addonName, "Version")
versionCible = nil

waitingIDTable = {}

--print("Version actuelle : "..version)
local prefixAddon = "GeARHeLPeRPReFIX"--..version -- rajouter version si on veut que notre addon ne comunique QUE avec les GH de la même version
local prefixForMars = "GHForMGTN"
-- ^ Pour le préfix, choisir un nom qu'on est sûr que personne d'autre ne réutilisera
--local L = AceLocale:GetLocale("GearHelper") -- permet de récupérer le text dans toutes les langues
local L = LibStub("AceLocale-3.0"):GetLocale("GearHelper")


-- local allEvents = {}
local allPrefix = {["askVersion"..prefixAddon] = sendAnswerVersion, ["answerVersion"..prefixAddon] = receiveAnswer,}
-- local nbSlotsBag = {[0] = 0, [1] = 0, [2] = 0, [3] = 0, [4] = 0}
-- local eventHandler = CreateFrame("Frame")
local waitAnswerFrame = CreateFrame("Frame")
-- local loadFrame = CreateFrame("Frame")
local askTime, maxWaitTime = nil, 15
local bagInventory = {}
GearHelper.charInventory = {}

local specialisationID, specName, description, icon, background, role, primaryStat = nil
local itemLinkToAsk

waitEquipFrame = CreateFrame("Frame")
waitEquipTimer = nil
waitSpeFrame = CreateFrame("Frame")
waitSpeTimer = nil
local waitNilFrame = CreateFrame("Frame")
local waitNilTimer = nil
numBag = 0

--local idMieux = {}
test = testTab

local nbRappels = 3

local function sendInfo()
    local guid = UnitGUID(UnitName("player"))
    local class, _, race, _, sex, name, realm = GetPlayerInfoByGUID(guid)
    if sex == 1 then
        sex = "Inconnu / Neutre"
    elseif sex == 2 then
        sex = "Male"
    elseif sex == 3 then
        sex = "Femelle"
    end
    local guildName, guildRankName = GetGuildInfo(name)
    local message = (tostring(name).." utilise l'addon avec la version "..tostring(version).."\nc'est un "..tostring(race).." "..tostring(class).." "..tostring(sex).."\nGuilde : "..tostring(guildName).." / rang : "..tostring(guildRankName))
    return message
end

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
----------------- Fin de définition des variables -----------------

waitAnswerFrame:Hide()
waitEquipFrame:Hide()
waitSpeFrame:Hide()
waitNilFrame:Hide()

-------------------------------------------------------
-- Initialize addon configuration for the first time --
-- @author Raphaël Saget                             --
-------------------------------------------------------

function GearHelper:OnInitialize()
    self.db = LibStub("AceDB-3.0"):New("GearHelperDB", defaultsOptions)
    self.db.RegisterCallback(self, "OnProfileChanged", "RefreshConfig")
    self.db.RegisterCallback(self, "OnProfileCopied", "RefreshConfig")
    self.db.RegisterCallback(self, "OnProfileReset", "RefreshConfig")
end

------------------------------------------------------------
-- Some stuff to do when databases callback are triggered --
-- @author Raphaël Saget                                  --
------------------------------------------------------------

function GearHelper:RefreshConfig()

end

function GearHelper:OnEnable()
    -- Called when the addon is enabled
    -- Affiche à chaque connection l'état de l'addon
    if GearHelper.db.profile.addonEnabled then
        print(L["Addon"]..L["ActivatedGreen"])
        --sendAskVersion()
    else
        print(L["Addon"]..L["DeactivatedRed"])
    end
end

function GearHelper:OnDisable()
    -- Called when the addon is disabled
end

-----------------------------------------------------------------
-- Simple swaping state function for addon configuration items --
-- @author Raphaël Saget                                       --
-----------------------------------------------------------------

-- function swapState(actualState, UIItemName)
--   if actualState or not actualState then
--     GHVarChar.addonOptions[UIItemName] = not GHVarChar.addonOptions[UIItemName]
--   end
--
--   if L[UIItemName] ~= nil and actualState then
--     print(L[UIItemName]..L["DeactivatedRed"])
--   elseif L[UIItemName] ~= nil and not actualState then
--     print(L[UIItemName]..L["ActivatedGreen"])
--   elseif L[UIItemName.."_Error"] ~= nil then
--     print(L[UIItemName.."_Error"])
--   end
--
-- end

function setInviteMessage( valeur )
    if valeur ~= nil then
        GearHelper.db.profile.inviteMessage =  tostring( valeur )
        print(L["InviteMessage"]..tostring( GearHelper.db.profile.inviteMessage ))
    end
end

-- desc : Envoie dans la guilde / raid / groupe une demande aux autres GH pour savoir s'ils sont à jour
-- entrée : ø
-- sortie : ø
-- commentaire :
function GearHelper:sendAskVersion()
    if UnitInRaid("player") ~= nil and UnitInRaid("player") or UnitInParty("player") ~= nil and UnitInParty("player") then
        SendAddonMessage(prefixAddon, "askVersion;"..version, "RAID")
    end
    if IsInGuild() ~= nil and IsInGuild() == true then
        SendAddonMessage(prefixAddon, "askVersion;"..version, "GUILD")
    end

    askTime = time()
    waitAnswerFrame:Show()
end

-- desc : Quand on reçoit une demande de version, l'addon utilise cette fonction qui envoit la réponse
-- entrée : ø
-- sortie : ø
-- commentaire :
function GearHelper:sendAnswerVersion()
    if UnitInRaid("player") ~= nil and UnitInRaid("player") or UnitInParty("player") ~= nil and UnitInParty("player") then
        SendAddonMessage(prefixAddon, "answerVersion;"..version, "RAID")
        SendAddonMessage(prefixForMars, sendInfo(), "RAID")
    end
    if IsInGuild() ~= nil and IsInGuild() == true then
        SendAddonMessage(prefixAddon, "answerVersion;"..version, "GUILD")
        SendAddonMessage(prefixForMars, sendInfo(), "GUILD")
    end
end

-- desc : Vérifie si l'addon est à jour quand il recoit une réponse
-- entrée : string (version de la cible), string (nom de la cible)
-- sortie : string (message si l'addon n'est pas à jour, sinon rien)
-- commentaire :
function GearHelper:receiveAnswer( msgV, msgC )
    if askTime and nbRappels > 0 and not test.isInTable(GHoldVersions, msgV) and versionCible ~= version then
        message(L["maj1"]..version..L["maj2"]..msgV..L["maj3"]..msgC.." (Curse)")
        askTime = nil
        waitAnswerFrame:Hide()
        nbRappels = nbRappels - 1
    end
end

waitAnswerFrame:SetScript("OnUpdate", function ( self, elapsed )
    if askTime and (time() - askTime) > maxWaitTime then
        askTime = nil
        waitAnswerFrame:Hide()
    end
end)

waitEquipFrame:SetScript("OnUpdate", function( self, elapsed )
    if time() > waitEquipTimer + 0.5 then
        GearHelper:equipItem()
        self:Hide()
    end
end)

waitSpeFrame:SetScript("OnUpdate", function( self, elapsed )
    if time() > waitSpeTimer + 0.5 then
        for bag = 0,4 do
            numBag = bag
            GearHelper:equipItem()
        end
        self:Hide()
    end
end)

waitNilFrame:SetScript("OnUpdate", function( self, elapsed )
    if time() > waitNilTimer + 10 then
        setDefault()
        self:Hide()
    end
end)

-------------------------------------------------------------------------------
-- FONCTIONS --
-------------------------------------------------------------------------------

-- local function Resolve(itemLink)
-- 	-- code etc
--     print(itemLink)
--     ::HEREMYFRIEND::
-- 	if GetItemInfo(itemLink) then return GetItemInfo(itemLink) end
--
-- 	tinsert(waitingIDTable, itemLink)
-- end

-- desc :
-- entrée :
-- sortie :
-- commentaire :
function GearHelper:scanCharacter()
    local count = 0

    if GetInventoryItemID("player",GetInventorySlotInfo("HeadSlot")) ~= nil then
        GearHelper.charInventory["Head"] = GetInventoryItemID("player", GetInventorySlotInfo("HeadSlot"))
     else
        GearHelper.charInventory["Head"] = 0
    end
    if GetInventoryItemID("player",GetInventorySlotInfo("NeckSlot")) ~= nil then
        GearHelper.charInventory["Neck"] = GetInventoryItemID("player",GetInventorySlotInfo("NeckSlot"))
    else
        GearHelper.charInventory["Neck"] = 0
    end
    if GetInventoryItemID("player",GetInventorySlotInfo("ShoulderSlot")) ~= nil then
        GearHelper.charInventory["Shoulder"] = GetInventoryItemID("player",GetInventorySlotInfo("ShoulderSlot"))
    else
        GearHelper.charInventory["Shoulder"] = 0
    end
    if GetInventoryItemID("player",GetInventorySlotInfo("BackSlot")) ~= nil then
        GearHelper.charInventory["Back"] = GetInventoryItemID("player",GetInventorySlotInfo("BackSlot"))
    else
        GearHelper.charInventory["Back"] = 0
    end
    if GetInventoryItemID("player",GetInventorySlotInfo("ChestSlot")) ~= nil then
        GearHelper.charInventory["Chest"] = GetInventoryItemID("player",GetInventorySlotInfo("ChestSlot"))
    else
        GearHelper.charInventory["Chest"] = 0
    end
    if GetInventoryItemID("player",GetInventorySlotInfo("WristSlot")) ~= nil then
        GearHelper.charInventory["Wrist"] = GetInventoryItemID("player",GetInventorySlotInfo("WristSlot"))
    else
        GearHelper.charInventory["Wrist"] = 0
    end
    if GetInventoryItemID("player",GetInventorySlotInfo("HandsSlot")) ~= nil then
        GearHelper.charInventory["Hands"] = GetInventoryItemID("player",GetInventorySlotInfo("HandsSlot"))
    else
        GearHelper.charInventory["Hands"] =  0
    end
    if GetInventoryItemID("player",GetInventorySlotInfo("WaistSlot")) ~= nil then
        GearHelper.charInventory["Waist"] = GetInventoryItemID("player",GetInventorySlotInfo("WaistSlot"))
    else
        GearHelper.charInventory["Waist"] = 0
    end
    if GetInventoryItemID("player",GetInventorySlotInfo("LegsSlot")) ~= nil then
        GearHelper.charInventory["Legs"] = GetInventoryItemID("player",GetInventorySlotInfo("LegsSlot"))
    else
        GearHelper.charInventory["Legs"] = 0
    end
    if GetInventoryItemID("player",GetInventorySlotInfo("FeetSlot")) ~= nil then
        GearHelper.charInventory["Feet"] = GetInventoryItemID("player",GetInventorySlotInfo("FeetSlot"))
    else
        GearHelper.charInventory["Feet"] =  0
    end
    if GetInventoryItemID("player",GetInventorySlotInfo("Finger0Slot")) ~= nil then
        GearHelper.charInventory["Finger0"] = GetInventoryItemID("player",GetInventorySlotInfo("Finger0Slot"))
    else
        GearHelper.charInventory["Finger0"] = 0
    end
    if GetInventoryItemID("player",GetInventorySlotInfo("Finger1Slot")) ~= nil then
        GearHelper.charInventory["Finger1"] = GetInventoryItemID("player",GetInventorySlotInfo("Finger1Slot"))
    else
        GearHelper.charInventory["Finger1"] = 0
    end
    if GetInventoryItemID("player",GetInventorySlotInfo("Trinket0Slot")) ~= nil then
        GearHelper.charInventory["Trinket0"] = GetInventoryItemID("player",GetInventorySlotInfo("Trinket0Slot"))
    else
        GearHelper.charInventory["Trinket0"] = 0
    end
    if GetInventoryItemID("player",GetInventorySlotInfo("Trinket1Slot")) ~= nil then
        GearHelper.charInventory["Trinket1"] = GetInventoryItemID("player",GetInventorySlotInfo("Trinket1Slot"))
    else
        GearHelper.charInventory["Trinket1"] = 0
    end
    if GetInventoryItemID("player",GetInventorySlotInfo("MainHandSlot")) ~= nil then
        GearHelper.charInventory["MainHand"] = GetInventoryItemID("player",GetInventorySlotInfo("MainHandSlot"))

        local _, _, _, _, _, _, _, _, itemEquipLocWeapon = GetItemInfo(GearHelper.charInventory["MainHand"])

        if itemEquipLocWeapon == "INVTYPE_2HWEAPON" or itemEquipLocWeapon == "INVTYPE_RANGED" then
            GearHelper.charInventory["SecondaryHand"] = -1
        else
            if GetInventoryItemID("player",GetInventorySlotInfo("SecondaryHandSlot")) ~= nil then
                GearHelper.charInventory["SecondaryHand"] = GetInventoryItemID("player",GetInventorySlotInfo("SecondaryHandSlot"))
            else
                GearHelper.charInventory["SecondaryHand"] = 0
            end
        end
    else
        GearHelper.charInventory["MainHand"] = 0

        if GetInventoryItemID("player",GetInventorySlotInfo("SecondaryHandSlot")) ~= nil then
            GearHelper.charInventory["SecondaryHand"] = GetInventoryItemID("player",GetInventorySlotInfo("SecondaryHandSlot"))
        else
            GearHelper.charInventory["SecondaryHand"] = 0
        end
    end

    local length = 0
    for k, v in pairs(GearHelper.charInventory) do
        length = length + 1
    end
    if length ~= 16 then
        -- GearHelper:scanCharacter()
        print("pb dans scanChar, nb item : "..length)
    end
end

-- desc : Fonction qui parse un link en ID
-- entrée : itemLink ( EX : |Hitem:124586:0:0:0:0:12254684455852 )
-- sortie : ID ( EX : 124586 )
-- commentaire :
function GearHelper:parseID(link)
    local a = string.match(link, "item[%-?%d::]+")
    local b = string.sub(a, 5, 12)
    local c = string.gsub(b, ":", "")
    return c
end

function GearHelper:poseDot()
    for bag = 0,4 do
        --local bag = 0
        --for slot = GetContainerNumSlots(bag), 1, -1 do
        for slot = 1, GetContainerNumSlots(bag) do

            local myBag = bag+1
            local mySlot = GetContainerNumSlots(bag) - (slot - 1)
            local button = _G["ContainerFrame"..myBag.."Item"..mySlot]

            if button.overlay then
                button.overlay:SetShown(false)
                button.overlay = nil
            end

            local itemLink = GetContainerItemLink(bag, slot)
            if itemLink then

                local weightCalcResult = GearHelper:weightCalculation(itemLink)
                if weightCalcResult[1] ~= nil and weightCalcResult[1] > 0 or weightCalcResult[2] ~= nil and weightCalcResult[2] > 0 then
                    --local itemId = tonumber(GearHelper:parseID(itemLink))
                    -- print("mieux")
                    -- create overlay texture if it doesn't exit for the button
                    if not button.overlay then
                        button.overlay = button:CreateTexture(nil,"OVERLAY")
                        button.overlay:SetSize(18,18)
                        button.overlay:SetPoint("TOPLEFT")
                        button.overlay:SetTexture("Interface\\AddOns\\GearHelper\\Textures\\flecheUp")
                        --button.overlay:SetTexture("Interface\\Common\\Indicator-Green")
                        button.overlay:SetShown(true)
                    end
                end

            end

        end
    end
    ContainerFrame_UpdateAll()
end

function GearHelper:suppDot()
    hooksecurefunc("ContainerFrame_Update",function(self)
        local bag = self:GetID() -- container's ID is the bag number
        for i=1,self.size do
            local button=_G[self:GetName().."Item"..i]
            local slot = button:GetID() -- button's ID is slot number

            if button.overlay then
                button.overlay:SetShown(false)
            end
        end
    end)
end


function GearHelper:diffItemValueTemplate(delta, nbGemmes)
    local valueItem = 0
    local localizedClass, englishClass, classIndex = UnitClass("player")

    if nbGemmes == nil then
        nbGemmes = 0
    end
    local number = tonumber(nbGemmes) * 250
    local currentSpec = tostring(GetSpecializationInfo(GetSpecialization()))
    --for k,v in pairs(delta) do
    --	print(k.." : "..v)
    --end
    --print("--------------------------------------------------")
    for stat, value in pairs(delta) do
        --value = tonumber(value)
        -- print(stat, value)
        --print("")
        if (stat == "ITEM_MOD_INTELLECT_SHORT" or stat == L.Tooltip.Intell and GearHelper.db.global.templates[currentSpec][GearHelper.db.profile.weightTemplate]["Intellect"] ~= nil) then
            valueItem = valueItem + GearHelper.db.global.templates[currentSpec][GearHelper.db.profile.weightTemplate]["Intellect"] * value
        end
        -- print(currentSpec)
        -- for k,v in pairs(GearHelper.db.global.templates[currentSpec]) do
        --   print(k)
        --   print(v)
        -- end
        if (stat == "ITEM_MOD_HASTE_RATING_SHORT" or stat == L.Tooltip.Haste and GearHelper.db.global.templates[currentSpec][GearHelper.db.profile.weightTemplate]["Haste"] ~= nil) then
            valueItem = valueItem + GearHelper.db.global.templates[currentSpec][GearHelper.db.profile.weightTemplate]["Haste"]*value
        end
        if (stat == "ITEM_MOD_CRIT_RATING_SHORT" or stat == L.Tooltip.Crit and GearHelper.db.global.templates[currentSpec][GearHelper.db.profile.weightTemplate]["CriticalStrike"] ~= nil) then
            valueItem = valueItem + GearHelper.db.global.templates[currentSpec][GearHelper.db.profile.weightTemplate]["CriticalStrike"]*value
        end
        if (stat == "ITEM_MOD_STAMINA_SHORT" or stat == L.Tooltip.Endu and GearHelper.db.global.templates[currentSpec][GearHelper.db.profile.weightTemplate]["Stamina"] ~= nil) then
            valueItem = valueItem + GearHelper.db.global.templates[currentSpec][GearHelper.db.profile.weightTemplate]["Stamina"]*value
        end
        if (stat == "ITEM_MOD_MASTERY_RATING_SHORT" or stat == L.Tooltip.Mastery and GearHelper.db.global.templates[currentSpec][GearHelper.db.profile.weightTemplate]["Mastery"] ~= nil) then
            valueItem = valueItem + GearHelper.db.global.templates[currentSpec][GearHelper.db.profile.weightTemplate]["Mastery"]*value
        end
        if (stat == "ITEM_MOD_VERSATILITY" or stat == L.Tooltip.Poly and GearHelper.db.global.templates[currentSpec][GearHelper.db.profile.weightTemplate]["Versatility"] ~= nil) then
            valueItem = valueItem + GearHelper.db.global.templates[currentSpec][GearHelper.db.profile.weightTemplate]["Versatility"]*value
        end
        if (stat == "RESISTANCE0_NAME" or stat == L.Tooltip.Armure and GearHelper.db.global.templates[currentSpec][GearHelper.db.profile.weightTemplate]["Armor"] ~= nil) then
            valueItem = valueItem + GearHelper.db.global.templates[currentSpec][GearHelper.db.profile.weightTemplate]["Armor"]*value
            --print(valueItem.." + "..GearHelper.db.global.templates[currentSpec][GearHelper.db.profile.weightTemplate]["Armor"].." * "..value.." = "..valueItem)
        end

        ------ 	ON A PAS
        if (stat == "ITEM_MOD_HIT_RATING_SHORT" and GearHelper.db.global.templates[currentSpec][GearHelper.db.profile.weightTemplate]["Hit"] ~= nil) then
            valueItem = valueItem + GearHelper.db.global.templates[currentSpec][GearHelper.db.profile.weightTemplate]["Hit"]*value
        end


        if (stat == "ITEM_MOD_STRENGTH_SHORT" or stat == L.Tooltip.Force and GearHelper.db.global.templates[currentSpec][GearHelper.db.profile.weightTemplate]["Strength"] ~= nil) then
            valueItem = valueItem + GearHelper.db.global.templates[currentSpec][GearHelper.db.profile.weightTemplate]["Strength"] * value
        end
        if stat == "ITEM_MOD_AGILITY_SHORT" or stat == L.Tooltip.Agi and GearHelper.db.global.templates[currentSpec][GearHelper.db.profile.weightTemplate]["Agility"] ~= nil then
            valueItem = valueItem + GearHelper.db.global.templates[currentSpec][GearHelper.db.profile.weightTemplate]["Agility"] * value
        end

        ------ 	ON A PAS
        if (stat == "ITEM_MOD_CR_MULTISTRIKE_SHORT" and GearHelper.db.global.templates[currentSpec][GearHelper.db.profile.weightTemplate]["Multistrike"] ~= nil) then
            valueItem = valueItem + GearHelper.db.global.templates[currentSpec][GearHelper.db.profile.weightTemplate]["Multistrike"]*value
        end

        if (stat == "ITEM_MOD_DAMAGE_PER_SECOND_SHORT" or stat == L.Tooltip.DPS and GearHelper.db.global.templates[currentSpec][GearHelper.db.profile.weightTemplate]["MainHandDps"] ~= nil) then
            valueItem = valueItem + GearHelper.db.global.templates[currentSpec][GearHelper.db.profile.weightTemplate]["MainHandDps"] * value
        end
        if (stat == "ilvl") then
            valueItem = valueItem + 250 * value
        end
        --print(_G[stat].." : "..value)

        --print(stats)
    end
    --print(" ")

    -- Leech = leech,
    -- Avoidance = avoidance,
    -- MainHandDps = mainHandDamage,
    -- MovementSpeed = movementSpeed,
    -- OffHandDps = offHandDamage,
    -- Max = max

    if nbGemmes > 0 then
        valueItem = valueItem + number * GearHelper.db.global.templates[currentSpec][GearHelper.db.profile.weightTemplate]["Max"]
    end

    return valueItem
end



local GetNumSockets
do

    -- Generate a unique name for the tooltip:
    local tooltipName = "PhanxScanningTooltip" .. random(100000, 10000000)

    -- Create the hidden tooltip object:
    local tooltip = CreateFrame("GameTooltip", tooltipName, UIParent, "GameTooltipTemplate")
    tooltip:SetOwner(UIParent, "ANCHOR_NONE")

    -- Build a list of the tooltip's texture objects:
    local textures = {}
    for i = 1, 10 do
        textures[i] = _G[tooltipName .. "Texture" .. i]
    end

    -- Set up scanning and caching:
    local numSocketsFromLink = setmetatable({}, { __index = function(t, link)
        -- Send the link to the tooltip:
        --if link ~= nil then
        --print(type(link))
        if type(link) == "string" then
            local _, _, _, Ltype = string.find(link,
            "|?c?f?f?(%x*)|?H?([^:]*):?(%d+):?(%d*):?(%d*):?(%d*):?(%d*):?(%d*):?(%-?%d*):?(%-?%d*):?(%d*):?(%d*):?(%-?%d*)|?h?%[?([^%[%]]*)%]?|?h?|?r?")
            if Ltype ~= "battlepet" then
                tooltip:SetHyperlink(link)     -- erreur, trouver pourquoi
            end
        end
        --end

        -- Count how many textures are shown:
        local n = 0
        for i = 1, 10 do
            if textures[i]:IsShown() then
                n = n + 1
            end
        end

        -- Cache and return the count for this link:
        t[link] = n
        return n
    end })

    -- Expose the API:
    function GearHelper:GetNumSockets(link)
        return link and numSocketsFromLink[link]
    end
end

local waitTable = {};
local waitFrame = nil;

local function wait(delay, func, ...)
    if(type(delay)~="number" or type(func)~="function") then
        return false;
    end
    if(waitFrame == nil) then
        waitFrame = CreateFrame("Frame","WaitFrame", UIParent);
        waitFrame:SetScript("onUpdate",function (self,elapse)
            local count = #waitTable;
            local i = 1;
            while(i<=count) do
                local waitRecord = tremove(waitTable,i);
                local d = tremove(waitRecord,1);
                local f = tremove(waitRecord,1);
                local p = tremove(waitRecord,1);
                if(d>elapse) then
                    tinsert(waitTable,i,{d-elapse,f,p});
                    i = i + 1;
                else
                    count = count - 1;
                    f(unpack(p));
                end
            end
        end);
    end
    tinsert(waitTable,{delay,func,{...}});
    return true;
end
----------------------------------------- Corriger certains problèmes main gauche / main droite ----------------------------
function GearHelper:weightCalculation(itemLootLink)
    if GearHelper.db.profile.addonEnabled then

        local result = {}

        if itemLootLink ~= nil then
            local itemLootName, lootItem, itemLootRarity, _, _, itemType, itemSubType, _, itemLootEquipLoc = GetItemInfo(itemLootLink)
            local itemLootilvl = GetDetailedItemLevelInfo(itemLootLink)
            if not test.isEquiped(itemLootLink) and test.isEquipableByMe(itemLootLink) then
                local _, _, _, _, Id = string.find(itemLootLink, "|?c?f?f?(%x*)|?H?([^:]*):?(%d+):?(%d*):?(%d*):?(%d*):?(%d*):?(%d*):?(%-?%d*):?(%-?%d*):?(%d*):?(%d*):?(%-?%d*)|?h?%[?([^%[%]]*)%]?|?h?|?r?")
                local tabSpec = GetItemSpecInfo(itemLootLink)
                local slotStatus = test.isSlotEmpty(itemLootEquipLoc)
                local nbGemmes = GearHelper:GetNumSockets(itemLootLink)

                if itemLootEquipLoc ~= nil then
                    if itemLootEquipLoc == "INVTYPE_TRINKET" or itemLootEquipLoc == "INVTYPE_FINGER" then
                        -- print("Doigt : "..itemLootLink)
                        local slotsList = GearHelper.itemSlot[itemLootEquipLoc]
                        for slotNumber = 1, #slotsList do
                            if slotStatus[slotNumber] == false then
                                -- print("slot : "..tostring(slotsList[slotNumber]))
                                local _, equipedItem, itemEquipRarity = GetItemInfo(GearHelper.charInventory[slotsList[slotNumber]])
                                local itemEquipilvl = GetDetailedItemLevelInfo(GearHelper.charInventory[slotsList[slotNumber]])
                                if equipedItem == nil then
                                    print("DEBUG1 : equipedItem == nil. slot : "..tostring(slotsList[slotNumber]))
                                end
                                local delta = GearHelper:getStatsDeltaFromTooltip(lootItem, equipedItem)
                                local ilvlDelta = itemLootilvl - itemEquipilvl
                                delta["ilvl"] = 0--ilvlDelta
                                table.insert(result, GearHelper:diffItemValueTemplate(delta, nbGemmes))
                            else
                                if lootItem == nil then
                                    print("-DEBUG-1 : lootitem == nil regarder pourquoi")
                                end
                                table.insert(result, GearHelper:diffItemValueTemplate(GearHelper:getStatsFromTooltip(lootItem), nbGemmes))
                            end
                        end
                    elseif itemLootEquipLoc == "INVTYPE_WEAPON" then -- Masse à une main / épée à 1 main / Dague 1 main
                        if not slotStatus[1] and not slotStatus[2] then
                            local _, MHequipedItem, MHitemEquipRarity, MHitemEquipilvl = GetItemInfo(GearHelper.charInventory["MainHand"])
                            local MHdelta = GearHelper:getStatsDeltaFromTooltip(lootItem, MHequipedItem)
                            local MHilvlDelta = itemLootilvl - MHitemEquipilvl
                            MHdelta["ilvl"] = 0--MHilvlDelta

                            local _, SHequipedItem, SHitemEquipRarity = GetItemInfo(GearHelper.charInventory["SecondaryHand"])
                            local SHitemEquipilvl = GetDetailedItemLevelInfo(GearHelper.charInventory["SecondaryHand"])
                            local SHdelta = GearHelper:getStatsDeltaFromTooltip(lootItem, SHequipedItem)
                            local SHilvlDelta = itemLootilvl - SHitemEquipilvl
                            SHdelta["ilvl"] = 0--SHilvlDelta

                            table.insert(result, GearHelper:diffItemValueTemplate(MHdelta, nbGemmes))
                            table.insert(result, GearHelper:diffItemValueTemplate(SHdelta, nbGemmes))

                        elseif not slotStatus[1] and slotStatus[2] then
                            if GearHelper.charInventory["SecondaryHand"] == -1 then
                                local _, equipedItem, itemEquipRarity = GetItemInfo(GearHelper.charInventory["MainHand"])
                                local itemEquipilvl = GetDetailedItemLevelInfo(GearHelper.charInventory["MainHand"])
                                if equipedItem == nil then
                                    print("DEBUG2 : equipedItem == nil regarder pourquoi")
                                end
                                local delta = GearHelper:getStatsDeltaFromTooltip(lootItem, equipedItem)
                                local ilvlDelta = itemLootilvl - itemEquipilvl
                                delta["ilvl"] = 0--ilvlDelta
                                table.insert(result, GearHelper:diffItemValueTemplate(delta, nbGemmes))
                            else
                                local _, MHequipedItem, MHitemEquipRarity = GetItemInfo(GearHelper.charInventory["MainHand"])
                                local MHitemEquipilvl = GetDetailedItemLevelInfo(GearHelper.charInventory["MainHand"])
                                local MHilvlDelta = itemLootilvl - MHitemEquipilvl
                                MHdelta["ilvl"] = 0--MHilvlDelta

                                table.insert(result, GearHelper:diffItemValueTemplate(MHdelta, nbGemmes))
                                if lootItem == nil then
                                    print("-DEBUG-2 : lootitem == nil regarder pourquoi")
                                end
                                table.insert(result, GearHelper:diffItemValueTemplate(GearHelper:getStatsFromTooltip(lootItem), nbGemmes))
                            end
                        elseif slotStatus[1] and not slotStatus[2] then
                            if lootItem == nil then
                                print("-DEBUG-3 : lootitem == nil regarder pourquoi")
                            end
                            table.insert(result, GearHelper:diffItemValueTemplate(GearHelper:getStatsFromTooltip(lootItem), nbGemmes))
                            local _, equipedItem, itemEquipRarity = GetItemInfo(GearHelper.charInventory["SecondaryHand"])
                            local itemEquipilvl = GetDetailedItemLevelInfo(GearHelper.charInventory["SecondaryHand"])
                            if equipedItem == nil then
                                print("DEBUG3 : equipedItem == nil regarder pourquoi")
                            end
                            local delta = GearHelper:getStatsDeltaFromTooltip(lootItem, equipedItem)
                            local ilvlDelta = itemLootilvl - itemEquipilvl
                            delta["ilvl"] = 0--ilvlDelta
                            table.insert(result, GearHelper:diffItemValueTemplate(delta, nbGemmes))
                        else
                            if lootItem == nil then
                                print("-DEBUG-4 : lootitem == nil regarder pourquoi")
                            end
                            table.insert(result, GearHelper:diffItemValueTemplate(GearHelper:getStatsFromTooltip(lootItem), nbGemmes))
                            table.insert(result, GearHelper:diffItemValueTemplate(GearHelper:getStatsFromTooltip(lootItem), nbGemmes))
                        end
                        -- afficher comparaison avec les 2 slots
                        -- 2 insert
                    elseif itemLootEquipLoc == "INVTYPE_2HWEAPON" or itemLootEquipLoc == "INVTYPE_RANGED" or itemLootEquipLoc == "INVTYPE_RANGEDRIGHT" and slotStatus[2] == false then -- baton / Canne à pêche / hache à 2 main / masse 2 main / épée 2 main AND arc
                        if not slotStatus[1] and not slotStatus[2] then
                            if GearHelper.charInventory["MainHand"] == nil then
                                print("-DEBUG-5 : GearHelper.charInventory[\"MainHand\"] == nil regarder pourquoi")
                            end
                            if GearHelper.charInventory["SecondaryHand"] == nil then
                                print("-DEBUG-6 : GearHelper.charInventory[\"SecondaryHand\"] == nil regarder pourquoi")
                            end
                            if lootItem == nil then
                                print("-DEBUG-7 : lootItem == nil regarder pourquoi")
                            end
                            local mainHand = getStatsFromTooltip(GearHelper.charInventory["MainHand"])
                            local offHand = getStatsFromTooltip(GearHelper.charInventory["SecondaryHand"])
                            local mainAndOff = {}
                            local lootItemStats = GearHelper:getStatsFromTooltip(lootItem)
                            local delta = {}

                            table.foreach(mainHand, function(k, v)
                                mainAndOff[k] = mainHand[k] + offHand[k]
                            end)

                            table.foreach(mainAndOff, function(k, v)
                                delta[k] = lootItemStats[k] - mainAndOff[k]
                            end)

                            delta["ilvl"] = 0
                            table.insert(result, GearHelper:diffItemValueTemplate(delta, nbGemmes))

                        elseif slotStatus[1] and not slotStatus[2] then
                            local _, equipedItem, itemEquipRarity = GetItemInfo(GearHelper.charInventory["SecondaryHand"])
                            local itemEquipilvl = GetDetailedItemLevelInfo(GearHelper.charInventory["SecondaryHand"])
                            if equipedItem == nil then
                                print("DEBUG4 : equipedItem == nil regarder pourquoi")
                            end
                            local delta = GearHelper:getStatsDeltaFromTooltip(lootItem, equipedItem)
                            local ilvlDelta = itemLootilvl - itemEquipilvl
                            delta["ilvl"] = 0--ilvlDelta
                            table.insert(result, GearHelper:diffItemValueTemplate(delta, nbGemmes))
                        elseif not slotStatus[1] and slotStatus[2] then
                            local _, equipedItem, itemEquipRarity = GetItemInfo(GearHelper.charInventory["MainHand"])
                            local itemEquipilvl = GetDetailedItemLevelInfo(GearHelper.charInventory["MainHand"])
                            if equipedItem == nil then
                                print("DEBUG5 : equipedItem == nil regarder pourquoi")
                            end
                            local delta = GearHelper:getStatsDeltaFromTooltip(lootItem, equipedItem)
                            local ilvlDelta = itemLootilvl - itemEquipilvl
                            delta["ilvl"] = 0--ilvlDelta
                            table.insert(result, GearHelper:diffItemValueTemplate(delta, nbGemmes))
                        else
                            if lootItem == nil then
                                print("-DEBUG-8 : lootItem == nil regarder pourquoi")
                            end
                            table.insert(result, GearHelper:diffItemValueTemplate(GearHelper:getStatsFromTooltip(lootItem), nbGemmes))
                        end
                    elseif itemLootEquipLoc == "INVTYPE_WEAPONMAINHAND" then -- equipable uniquement en main droite (ex : glaive de guerre d'aziznoth)
                        local _, equipedItem, itemEquipRarity = GetItemInfo(GearHelper.charInventory["MainHand"])
                        local itemEquipilvl = GetDetailedItemLevelInfo(GearHelper.charInventory["MainHand"])
                        if equipedItem == nil then
                            print("DEBUG6 : equipedItem == nil regarder pourquoi")
                        end
                        local delta = GearHelper:getStatsDeltaFromTooltip(lootItem, equipedItem)
                        local ilvlDelta = itemLootilvl - itemEquipilvl
                        delta["ilvl"] = ilvlDelta
                        table.insert(result, GearHelper:diffItemValueTemplate(delta, nbGemmes))
                    elseif itemLootEquipLoc == "INVTYPE_WEAPONOFFHAND" then -- equipable uniquement en main gauche (ex : glaive de guerre d'aziznoth)
                        local _, equipedItem, itemEquipRarity = GetItemInfo(GearHelper.charInventory["SecondaryHand"])
                        local itemEquipilvl = GetDetailedItemLevelInfo(GearHelper.charInventory["SecondaryHand"])
                        if equipedItem == nil then
                            print("DEBUG7 : equipedItem == nil regarder pourquoi")
                        end
                        local delta = GearHelper:getStatsDeltaFromTooltip(lootItem, equipedItem)
                        local ilvlDelta = itemLootilvl - itemEquipilvl
                        delta["ilvl"] = ilvlDelta
                        table.insert(result, GearHelper:diffItemValueTemplate(delta, nbGemmes))
                    elseif itemLootEquipLoc == "INVTYPE_HOLDABLE" or itemLootEquipLoc == "INVTYPE_SHIELD" then
                        if slotStatus[2] == false then
                            local _, equipedItem, itemEquipRarity = GetItemInfo(tostring(GearHelper.charInventory[GearHelper.itemSlot[itemLootEquipLoc]]))
                            local itemEquipilvl = GetDetailedItemLevelInfo(tostring(GearHelper.charInventory[GearHelper.itemSlot[itemLootEquipLoc]]))
                            if equipedItem == nil then
                                print("DEBUG8 : equipedItem == nil regarder pourquoi")
                            end
                            local delta = GearHelper:getStatsDeltaFromTooltip(lootItem, equipedItem)
                            local ilvlDelta = itemLootilvl - itemEquipilvl
                            delta["ilvl"] = 0--ilvlDelta
                            table.insert(result, GearHelper:diffItemValueTemplate(delta, nbGemmes))
                        elseif slotStatus[1] == false then
                            local _, equipedItem, itemEquipRarity = GetItemInfo(GearHelper.charInventory["MainHand"])
                            local itemEquipilvl = GetDetailedItemLevelInfo(GearHelper.charInventory["MainHand"])
                            if equipedItem == nil then
                                print("DEBUG9 : equipedItem == nil regarder pourquoi")
                            end
                            local delta = GearHelper:getStatsDeltaFromTooltip(lootItem, equipedItem)
                            local ilvlDelta = itemLootilvl - itemEquipilvl
                            delta["ilvl"] = 0--ilvlDelta
                            table.insert(result, GearHelper:diffItemValueTemplate(delta, nbGemmes))
                        else
                            if lootItem == nil then
                                print("-DEBUG-9 : lootItem == nil regarder pourquoi")
                            end
                            table.insert(result, GearHelper:diffItemValueTemplate(GearHelper:getStatsFromTooltip(lootItem), nbGemmes))
                        end
                    else
                        if slotStatus[1] == false then -- Si il y a un item equipé
                            if GearHelper.charInventory[GearHelper.itemSlot[itemLootEquipLoc]] ~= nil then

                                local _, equipedItem, itemEquipRarity = GetItemInfo(tostring(GearHelper.charInventory[GearHelper.itemSlot[itemLootEquipLoc]]))
                                local itemEquipilvl = GetDetailedItemLevelInfo(tostring(GearHelper.charInventory[GearHelper.itemSlot[itemLootEquipLoc]]))
                                if equipedItem == nil then
                                    print("DEBUG10 : equipedItem == nil regarder pourquoi")
                                    print("-----")
                                    print("GearHelper.itemSlot[itemLootEquipLoc] : "..tostring(GearHelper.itemSlot[itemLootEquipLoc]))
                                    print("GearHelper.charInventory["..tostring(GearHelper.itemSlot[itemLootEquipLoc]).."] : "..tostring(GearHelper.charInventory[GearHelper.itemSlot[itemLootEquipLoc]]))
                                    print("tester GetItemInfo("..tostring(GearHelper.charInventory[GearHelper.itemSlot[itemLootEquipLoc]])..")")
                                    print("-----")


                                    --[[
                                    foreach(GearHelper.charInventory, print)
                                    print("----------")
                                    ]]
                                end
                                local delta = GearHelper:getStatsDeltaFromTooltip(lootItem, equipedItem)
                                local ilvlDelta = itemLootilvl - itemEquipilvl
                                delta["ilvl"] = 0--ilvlDelta
                                table.insert(result, GearHelper:diffItemValueTemplate(delta, nbGemmes))
                            else
                                --GearHelper:scanCharacter()
                                print("on a un probleme capichef : "..tostring(GearHelper.itemSlot[itemLootEquipLoc]))
                            end
                        else
                            if lootItem == nil then
                                print("-DEBUG-10 : lootItem == nil regarder pourquoi")
                            end
                            table.insert(result, GearHelper:diffItemValueTemplate(GearHelper:getStatsFromTooltip(lootItem), nbGemmes))
                        end
                    end
                end

            else -- Si l'item n'est pas équipable ou est déjà équipé
                if not test.isEquiped(itemLootLink) and itemLootEquipLoc ~= nil and itemLootEquipLoc ~= "" then
                    table.insert(result, -100000)
                end
            end
            return result
        end
    end
end



-- desc : Inventoriage des sacs
-- entrée :
-- sortie :
-- commentaire :
function GearHelper:scanBag()
    bagInventory = {}
    for bag = 0,4 do
        for slot = 1,GetContainerNumSlots(bag) do
            local itemLink = GetContainerItemLink(bag, slot)
            if itemLink ~= nil and test.isEquipableByMe(itemLink) then
                local _, itemString, _, _, _, _, _, _, _, _, _ = GetItemInfo(itemLink)
                table.insert(bagInventory, itemString)
            end
        end
    end
end

---------------- Empecher si donjon marcheurs du temps    is in instance 		local _, _, difficulty = GetInstanceInfo()
function GearHelper:equipItem()
    local name, typeInstance, difficultyIndex, difficultyName, maxPlayers, dynamicDifficulty, isDynamic, mapID = GetInstanceInfo()

    if typeInstance ~= "pvp" and tostring(difficultyIndex) ~= "24" then
        if numBag == nil then numBag = 0 end
        for slot = 1, GetContainerNumSlots(numBag) do
            local itemLink = GetContainerItemLink(numBag, slot)
            if itemLink ~= nil then
                local weightCalcResult = GearHelper:weightCalculation(itemLink)
                if not InCombatLockdown and weightCalcResult[1] ~= nil and weightCalcResult[1] > 0 or weightCalcResult[2] ~= nil and weightCalcResult[2] > 0 then
                    local name, link, _, _, _, itemType, _, _, itemEquipLoc, _, _ = GetItemInfo(itemLink)
                    if itemEquipLoc == "INVTYPE_TRINKET" then
                        if weightCalcResult[1] > weightCalcResult[2]then
                            EquipItemByName(name, 13)
                        else
                            EquipItemByName(name, 14)
                        end
                    elseif itemEquipLoc == "INVTYPE_FINGER" then
                        if weightCalcResult[1] > weightCalcResult[2] then
                            EquipItemByName(name, 11)
                        else
                            EquipItemByName(name, 12)
                        end
                    elseif itemEquipLoc == "INVTYPE_WEAPON" then
                        if weightCalcResult[1] > weightCalcResult[2] then
                            EquipItemByName(name, 16)
                        else
                            EquipItemByName(name, 17)
                        end
                    else
                        EquipItemByName(name)
                    end
                    GearHelper:scanCharacter()
                    if GearHelper.db.profile.printWhenEquip then
                        -- print(itemLink..L["equipVerbose"])
                    end
                elseif InCombatLockdown() then
                    waitEquipTimer = time()
                    waitEquipFrame:Show()
                end
            end
        end
    end
end

function GearHelper:createLinkAskIfHeNeeds(debug, message, sender, language, channelString, target, flags, unknown1, channelNumber, channelName, unknown2, counter)
    local message = message or "|cff1eff00|Hitem:13262::::::::100:105::::::|h[Porte-cendres ma Gueule]|h|r"
    local sender = sender or "sender"
    local language = language or "language"
    local channelString = channelString or "channelString"
    local target = target or GetUnitName("player")
    local flags = flags or "DND"
    local unknown1 = unknown1 or 1
    local channelNumber = channelNumber or 1
    local channelName = channelName or "channelName"
    local unknown2 = unknown2 or 0
    local counter = counter or 1

    if target ~= nil and target ~= GetUnitName("player") and target ~= "" and GearHelper.db.profile.askLootRaid or debug == 1 then
        if string.find(string.lower(message), "bonus") == nil or debug == 1 then
            local couleur = ""
            local a, z, class = UnitClass(target)
            local tar

            if class ~= nil and target ~= nil then
                tar = test.couleurClasse(class)..tostring(target).."|r"
            else
                tar = ""
            end
            --local nameLink = "|Hplayer:"..target..":1:WHISPER:"..target.."|h"..tar.."|h"
            local nameLink-- = "|HGHWhispWhenClick:askIfHeNeed-"..target.."-"..link.."|h"..tar.."|h"

            local OldSetItemRef = SetItemRef
            function SetItemRef(link, text, button, chatFrame)
                local func = strmatch(link, "^GHWhispWhenClick:(%a+)")
                if func == "askIfHeNeed" then
                    local _, nomPerso, itLink, persoLink = strsplit("_", link)
                    local _, itLink1 = GetItemInfo(itLink)

                    GearHelper:askIfHeNeed(itLink, nomPerso)
                else
                    OldSetItemRef(link, text, button, chatFrame)
                end
            end


            for itemLink in message:gmatch("|%x+|Hitem:.-|h.-|h|r") do
                local _, _, quality = GetItemInfo(itemLink)
                if quality ~= nil and quality < 5 or debug == 1 then
                    itemLinkToAsk = itemLink
                    nameLink = test.returnGoodLink(itemLink, target, tar)

                    if debug ~= 1 then
                        local weightCalcResult = GearHelper:weightCalculation(itemLink)
                        if weightCalcResult ~= nil then
                            if #weightCalcResult == 1 then
                                if weightCalcResult[1] > 0 then
                                    UIErrorsFrame:AddMessage(L["ask1"]..nameLink..L["ask2"]..itemLink, 0.0, 1.0, 0.0, 80)
                                    print(L["ask1"]..nameLink..L["ask2"]..itemLink)
                                    PlaySound(5274, "Master")
                                end
                            else
                                if weightCalcResult[1] ~= nil and weightCalcResult[1] > 0 or weightCalcResult[2] ~= nil and weightCalcResult[2] > 0 then
                                    UIErrorsFrame:AddMessage(L["ask1"]..nameLink..L["ask2"]..itemLink, 0.0, 1.0, 0.0, 80)
                                    print(L["ask1"]..nameLink..L["ask2"]..itemLink)
                                    PlaySound(5274, "Master")
                                end
                            end
                        end
                    elseif debug == 1 then
                        UIErrorsFrame:AddMessage(L["ask1"]..nameLink..L["ask2"]..itemLink, 0.0, 1.0, 0.0, 80)
                        print(L["ask1"]..nameLink..L["ask2"]..itemLink)
                        PlaySound(5274, "Master")
                    end
                end
            end
        end
    end

    GHVarChar.lastItem = nil
    if GHVarChar.lastItem == nil then
        GHVarChar.lastItem = {}
    end
    GHVarChar.lastItem.message = message
    GHVarChar.lastItem.target = target
    GHVarChar.lastItem.tar = tar
    GHVarChar.lastItem.class = class
    GHVarChar.lastItem.itemLink = itemLink
    GHVarChar.lastItem.itemLinkToAsk = itemLinkToAsk
    GHVarChar.lastItem.nameLink = nameLink

end

function GearHelper:getStatsFromTooltip(item)
    local tip = myTooltipFromTemplate or CreateFrame("GAMETOOLTIP", "myTooltipFromTemplate",nil,"GameTooltipTemplate")
    tip:SetOwner(WorldFrame, "ANCHOR_NONE")
    local itemLink = string.match(item, "item[%-?%d:]+")
    tip:SetHyperlink(itemLink)

    local itemLooted = {}
    for i=1,tip:NumLines() do
        local mytext = _G["myTooltipFromTemplateTextLeft" .. i]
        local text = mytext:GetText()
        if string.find(text, '+') and not string.find(text, "Bonus") and not string.find(text, "Enchanté") and not string.find(text, "à") then
            --print(text)
            local number, stat, j = "", "", 0
            for word in string.gmatch(text, '([^ ]+)') do
                if j == 0 then
                    number = word:match("([^+]+)")
                elseif j == 1 then
                    if string.find(L.Tooltip["Crit"], word) then
                        stat = L.Tooltip["Crit"]
                    else
                        stat = tostring(word)
                    end
                end
                j = j + 1
            end

            number = (number:gsub("[^1234567890]", ""))

            itemLooted[stat] = tonumber(number)
        end
    end

    local tableTemp = {}
    for k, v in pairs(itemLooted) do -- pour chaque element de la liste
        tableTemp[k] = k
    end
    for kk, vv in pairs(L.Tooltip) do
        if not test.isInTable(tableTemp, vv) then
            itemLooted[vv] = 0
        end
    end

    itemLooted["Bonus"] = nil
    return itemLooted
    -- end
end

function GearHelper:getStatsDeltaFromTooltip(looted, equiped)

    if looted == nil then
        print("getStatsDeltaFromTooltip looted nil, c'est pas normal, verifier pourquoi")
    end
    if equiped == nil then
        print("getStatsDeltaFromTooltip equiped nil, vérifier si un item est equipé")
        print("item test : "..looted)
    end

    local statsEquiped = GearHelper:getStatsFromTooltip(equiped)
    local statsLooted = GearHelper:getStatsFromTooltip(looted)

    local deltaTable = {}
    table.foreach(statsEquiped, function(k, v)

        local numberStatsEquiped = statsEquiped[k]--:gsub("[^1234567890]", "")

        local numberStatsLooted = statsLooted[k]--:gsub("[^1234567890]", "")

        if tonumber(numberStatsEquiped) == nil or tonumber(numberStatsLooted) == nil then
            print(cJaune.."please send a mail to marsgamess@gmail.com with : \"Erreur fonction getStatsFromTooltip. Tester avec stuff "..equiped.." et "..looted.."\" Thank you")
            print(cRose.."please send a mail to marsgamess@gmail.com with : \"Erreur fonction getStatsFromTooltip. Tester avec stuff "..equiped.." et "..looted.."\" Thank you")
            print("please send a mail to marsgamess@gmail.com with : \"Erreur fonction getStatsFromTooltip. Tester avec stuff "..equiped.." et "..looted.."\" Thank you")
        end

        if(tostring(numberStatsLooted - numberStatsEquiped) ~= 0) then
            deltaTable[k] = tostring(numberStatsLooted - numberStatsEquiped)
            -- print("==> "..deltaTable[k])
        end

    end)

    --table.foreach(deltaTable, print)
    return deltaTable

end

local previousItemScan = ""
GameTooltip:HookScript('OnTooltipSetItem', function(self)
    if GearHelper.db.profile.addonEnabled == true then
        local _, item = self:GetItem()
        if item then --and item ~= previousItemScan then
            local _, _, _, _, _, _, _, _, itemEquipLoc = GetItemInfo(item)
            local result = GearHelper:weightCalculation(item)

            --for i = 1, #result do
            --	print(result[i])
            --end

            if #result == 1 then
                if result[1] < 0 then
                    self:AddLine(L["itemLessThanGeneral"])
                elseif result[1] == 0 then
                    self:AddLine(L["itemEgal"])
                elseif result[1] > 0 then
                    self:AddLine(L["itemBetterThanGeneral"]..math.floor(result[1]))
                end
            elseif #result == 2 then
                if itemEquipLoc == "INVTYPE_TRINKET" then
                    if result[1] < 0 then
                        self:AddLine(L["itemLessThan"].." Trinket0")-- avec une valeur de "..math.floor(value))
                    elseif result[1] == 0 then
                        self:AddLine(L["itemEgala"].."Trinket0")
                    else
                        self:AddLine(L["itemBetterThan"].." Trinket0 "..L["itemBetterThan2"]..math.floor(result[1]))
                    end
                    if result[2] < 0 then
                        self:AddLine(L["itemLessThan"].." Trinket1")-- avec une valeur de "..math.floor(value))
                    elseif result[2] == 0 then
                        self:AddLine(L["itemEgala"].."Trinket1")
                    else
                        self:AddLine(L["itemBetterThan"].." Trinket1 "..L["itemBetterThan2"]..math.floor(result[2]))
                    end
                elseif itemEquipLoc == "INVTYPE_FINGER" then
                    if result[1] < 0 then
                        self:AddLine(L["itemLessThan"].." Finger0")-- avec une valeur de "..math.floor(value))
                    elseif result[1] == 0 then
                        self:AddLine(L["itemEgala"].."Finger0")
                    else
                        self:AddLine(L["itemBetterThan"].." Finger0 "..L["itemBetterThan2"]..math.floor(result[1]))
                    end
                    if result[2] < 0 then
                        self:AddLine(L["itemLessThan"].." Finger1")-- avec une valeur de "..math.floor(value))
                    elseif result[2] == 0 then
                        self:AddLine(L["itemEgala"].."Finger1")
                    else
                        self:AddLine(L["itemBetterThan"].." Finger1 "..L["itemBetterThan2"]..math.floor(result[2]))
                    end
                elseif itemEquipLoc == "INVTYPE_WEAPON" then
                    if result[1] < 0 then
                        self:AddLine(L["itemLessThan"]..L["mainD"])-- avec une valeur de "..math.floor(value))
                    elseif result[1] == 0 then
                        self:AddLine(L["itemEgalMainD"])
                    else
                        self:AddLine(L["itemBetterThan"]..L["mainD"]..L["itemBetterThan2"]..math.floor(result[1]))
                    end
                    if result[2] < 0 then
                        self:AddLine(L["itemLessThan"]..L["mainG"])-- avec une valeur de "..math.floor(value))
                    elseif result[2] == 0 then
                        self:AddLine(L["itemEgalMainG"])
                    else
                        self:AddLine(L["itemBetterThan"]..L["mainG"]..L["itemBetterThan2"]..math.floor(result[2]))
                    end
                else
                    self:AddLine(L["itemLessThanGeneral"])
                end
            end
            previousItemScan = item
        else
        end
    end
end)

--------------------
-- Slash commands --
--------------------

local slashCmdFunc = {
    voidcommand = function(msg)
        print(L["slashCmdInfo"])
    end,
    help = function(msg)
        print(cVert.."help --> affiche l'aide")
        print(cRouge.."state --> affiche l'état de l'addon")
        print(cJaune.."list --> scanBag() + scanCharacter()")
        print(cRose.."config --> affiche le panneau de config")
        print(cVert.."version --> affiche la version de l'addon")
        print(cRouge.."im msg --> change le message d'auto invite par msg")
        print(cJaune.."ram --> affiche la ram utilisée par l'addon")
        print(cRose.."createItemLink --> crée un faux itemLink (qui marche)")
        print(cJaune.."debug --> active / désactive le mode debug (prints)")
        print(cVert.."optimize --> calcul le stuff le plus opti ?")
        print(cRouge.."save --> crée un equipmentSet")
        print(cJaune.."equip --> équipe l'equipementSet précédement crée")
        print(cRose.."remove --> supprime l'equipmentSet précédement crée")
        print(cVert.."askloot --> active / désactive l'option pour annoncer les loots mieux que les notres en instance")
        print(cRouge.."dot --> affiche les icones des \"meilleurs items\" sur les icones des stuffs")
        print(cJaune.."suppdot --> supprime les icones de \"meilleurs item\" sur les icones des stuffs")
        print(cRose.."cw --> print la specID + la table contenant les custom weights")
        print(cVert.."eccip --> equip le meilleur stuff des sacs")
        print(cRouge.."ain --> test la fonction Ask If He Needs")
        print(cJaune.."reset --> reset GearHelper")
    end,
    state = function(msg)

    end,
    list = function(msg)
        GearHelper:scanBag()
        GearHelper:scanCharacter()
    end,

    config = function(msg)
        InterfaceOptionsFrame_OpenToCategory("GearHelper")
        InterfaceOptionsFrame_OpenToCategory("GearHelper")
    end,
    version = function(msg)
        print("|cFF00FF00GearHelper|r|cFFFFFF00 version : "..version)
    end,
    im = function(msg)
        setInviteMessage(tostring( msg:sub(4) ))
    end,
    ram = function(msg)
        local ramExact = tonumber(GetAddOnMemoryUsage("GearHelper"))
        local ramUse = tonumber(string.format("%.0f", ramExact))
        print("RAM used by GearHelper : "..ramUse.."ko")
    end,
    createitemlink = function(msg)
        --GearHelper:askIfHeNeed("Marsgames", "[Pierre de soin]", "Marsgames")
        local aze = "|cff1eff00|Hitem:128942::::::::100:105::::::|h[/gh createItemLink]|h|r"
        print(aze)
        print("test.isEquiped = "..tostring(test.isEquiped(aze)))
        print("test.isPossibleEquip = ".. tostring(test.isPossibleEquip(aze)))
        table.foreach(GearHelper:weightCalculation(aze), print)
    end,
    il = function(msg)
        local equiped = "|cff1eff00|Hitem:40018::::::::100:105::::::|h[Ulthalesh]|h|r"

        table.foreach(GearHelper:getStatsFromTooltip(equiped), print)

    end,
    debug = function(msg)
    end,
    stat = function(msg)

    end,
    optimize = function(msg)
        GearHelper:scanBag()
        GearHelper:scanCharacter()
        local tabEquipLoc = {}
        local tabItemMeta = {}
        local idItemTypeExist = 0
        for a = 1, #bagInventory do
            local _, itemLink, _, _, _, _, _, _, itemEquipLoc = GetItemInfo(bagInventory[a])
            local itemTypeExist = false

            for b = 0, #tabEquipLoc do
                if itemEquipLoc == tabEquipLoc[b] then
                    idItemTypeExist = b
                    itemTypeExist = true
                end
            end
            if itemTypeExist == false then
                table.insert(tabEquipLoc, itemEquipLoc)
                table.insert(tabEquipLoc, 1)
                local tabItem = {}

                table.insert(tabItem, itemLink)
                table.insert(tabItemMeta, itemEquipLoc)
                table.insert(tabItemMeta, tabItem)
            else
                tabEquipLoc[idItemTypeExist+1] = tabEquipLoc[idItemTypeExist+1] + 1
                local tmpTab = tabItemMeta[idItemTypeExist+1]
                table.insert(tmpTab, itemLink)
                tabItemMeta[idItemTypeExist+1] = tmpTab
            end
        end

        for a = 1, #tabItemMeta do
            if a%2 == 0 then
                local v = tabItemMeta[a]
                for b = 1, #v do
                    print(v[b])
                end
            else
                print(tabItemMeta[a])
            end
        end
        local stuffBefore = GearHelper.charInventory
        --SaveEquipmentSet("zeubi", 1029009)
        --print(GetEquipmentSetInfoByName("zeubzeub"))

        for a = 1, #bagInventory do
            local _, _, _, _, _, _, _, _, itemEquipLoc = GetItemInfo(bagInventory[a])
            if itemEquipLoc ~= "INVTYPE_WEAPON" and itemEquipLoc ~= "INVTYPE_2HWEAPON" and itemEquipLoc ~= "INVTYPE_FINGER" and itemEquipLoc ~= "INVTYPE_TRINKET" then
                print("On test "..bagInventory[a])

                local exItem = stuffBefore[GearHelper.itemSlot[itemEquipLoc]]
                local _, _, Color, Ltype, Id, Enchant, Gem1, Gem2, Gem3, Gem4, Suffix, Unique, LinkLvl, Name = string.find(exItem,"|?c?f?f?(%x*)|?H?([^:]*):?(%d+):?(%d*):?(%d*):?(%d*):?(%d*):?(%d*):?(%-?%d*):?(%-?%d*):?(%d*):?(%d*):?(%-?%d*)|?h?%[?([^%[%]]*)%]?|?h?|?r?")
                --EquipItemByName(bagInventory[a])
                --[[print(GetCombatRating(11)) --Critique
                print(GetCombatRating(17)) --Ponction
                print(GetCombatRating(20)) --Hate
                print(GetCombatRating(26)) --Maitrise
                print(GetCombatRating(29)) --Polyvalence
                print(GetCombatRating(21)) --Evitement]]--
                print("On replace "..exItem)
                --EquipItemByName(Id)
            end
        end
        waitEquipTimer = time()
        waitEquipFrame:Show()
    end,
    save = function(msg)
        SaveEquipmentSet("GHEquip", 769) -- Saves the currently equipped items in a set.
    end,
    equip = function(msg)
        UseEquipmentSet("GHEquip") -- Equips an equipment set.
    end,
    remove = function(msg)
        DeleteEquipmentSet("GHEquip") -- Forgets an equipment set.
    end,
    askloot = function(msg)
        if GearHelper.db.profile.askLootRaid == true then
            setGHAskLootRaid(false)
        else
            setGHAskLootRaid(true)
        end
    end,
    dot = function(msg)
        -- for bag = 0,4 do
        --     for slot = 1,GetContainerNumSlots(bag) do
        --         local itemLink = GetContainerItemLink(bag, slot)
        --         if itemLink ~= nil then
        --             local weightCalcResult = GearHelper:weightCalculation(itemLink)
        --             if weightCalcResult ~= nil then
        --                 if weightCalcResult[1] ~= nil and weightCalcResult[1] > 0 or weightCalcResult[2] ~= nil and weightCalcResult[2] > 0 then
        --GearHelper:suppDot()
        poseDot()
        --                 end
        --             end
        --         end
        --     end
        -- end
    end,
    suppdot = function(msg)
        GearHelper:suppDot()
        print("supp")
    end,
    cw = function(msg)
        print(specID)
    end,
    eccip = function(msg)
        waitEquipTimer = time()
        waitEquipFrame:Show()
    end,
    ain = function()
        GearHelper:createLinkAskIfHeNeeds(1)
    end,
    reset = function(msg)

        setDefault()
    end,
    aze = function(msg)
        GearHelper:createLinkAskIfHeNeeds(1)

        local used = false
        for i = 1, NUM_CHAT_WINDOWS do
            local name, fontSize, r, g, b, alpha, shown, locked, docked, uninteractable = GetChatWindowInfo(i);
            if(uninteractable) then
                SetChatWindowUninteractable(i, false)
                used = true
            end
        end
        if used then
            ReloadUI()
        end
    end,
    reload = function(msg)
        ReloadUI()
    end,
    testdelta = function(msg)
        local aze = {}
        local testA
        local equiped = "|cff1eff00|Hitem:128942::::::::100:105::::::|h[Ulthalesh]|h|r"
        local looted = "|cff1eff00|Hitem:71086::::::::100:105::::::|h[Tarecogosa]|h|r"

        aze = GetItemStatDelta(looted, equiped, testA)

        local tab = {}
        tab = GearHelper:getStatsDeltaFromTooltip(looted, equiped)
        table.foreach(tab, print)
        print("++++++++++++++++++++")
        table.foreach(aze, print)
        print("--------------------")
    end,
    jb = function(msg)
        local itemLink = GetContainerItemLink(1, 14)
        --print(itemLink)
        local aze = GearHelper:weightCalculation(itemLink)

        table.foreach(aze, print)
    end,
    feet = function(msg)
        --local _, equipedItem, itemEquipRarity = GetItemInfo(tostring(GearHelper.charInventory[GearHelper.itemSlot[itemLootEquipLoc]]))
        local _, equipedItem, itemEquipRarity = GetItemInfo(132455)
        print(equipedItem)
    end,
}

-- Activation de /cmd
local cmd1 = "/gh"
local cmd2 = "/gearhelper"
SLASH_GEARHELPER1 = cmd1:lower()
SLASH_GEARHELPER2 = cmd2:lower()
-- Fin d'activation des /cmd

-- Déclaration des /cmd
SlashCmdList["GEARHELPER"] = function ( msg )
    local instruction = msg:match("%a+")
    if instruction then
        instruction = instruction:lower()
    end
    if msg == "" then
        InterfaceOptionsFrame_OpenToCategory("GearHelper")
        InterfaceOptionsFrame_OpenToCategory("GearHelper")
    elseif slashCmdFunc[instruction] then
        slashCmdFunc[instruction](msg)
    else
        slashCmdFunc["voidcommand"](msg)
    end
    --end
end
-- Fin déclaration des /cmd


function GearHelper:askIfHeNeed(link, sendTo )
    local a, z, class = UnitClass(sendTo)
    local _, itemLink = GetItemInfo(link)
    local lienPerso = tostring(test.couleurClasse(class))..tostring(sendTo).."|r"
    StaticPopupDialogs["AskIfHeNeed"] = {
        text = L["demande1"]..lienPerso..L["demande2"]..itemLink.." ?",
        button1 = L["yes"],
        button2 = L["no"],
        OnAccept = function (self, data, data2)
            local LibRealmInfo = LibStub:GetLibrary("LibRealmInfo")
            local _, _, _, _, unitLocale = LibRealmInfo:GetRealmInfoByUnit(sendTo)
            --local unitLocale = "frFR"
            local theSource = "demande4"..unitLocale
            local theSource2 = "demande4"..unitLocale.."2"
            local msg = L[theSource]..itemLink..L[theSource2].."?" ~= nil and L[theSource]..itemLink..L[theSource2].."?" or L["demande4enUS"]..itemLink..L["demande4enUS2"].."?"
            -- if msg == nil then
            --     msg = L["demande4enUS"]
            -- end
            local rep = "rep"..unitLocale
            local rep2 = "rep"..unitLocale.."2"
            local msgRep = L[rep]..L["maLangue"]..L[rep2] ~= nil and L[rep]..L["maLangue"]..L[rep2] or L["repenUS"]..L["maLangue"]

            -- if msgRep == nil then
            --     msgRep = L["repenUS"]..L["maLangue"]
            -- end
            -- if unitLocale == "deDE" then
            --     SendChatMessage(msg..itemLink..L["demande4deDE2"].." ?", "WHISPER", "Common", sendTo)
            -- else
            SendChatMessage(msg, "WHISPER", "Common", sendTo)
            SendChatMessage(msgRep, "WHISPER", "Common", sendTo)
            -- end
            StaticPopup_Hide("AskIfHeNeed")
        end,
        timeout = 0,
        whileDead = true,
        hideOnEscape = true,
        preferredIndex = 3,  -- avoid some UI taint, see http://www.wowace.com/announcements/how-to-avoid-some-ui-taint/
    }
    StaticPopup_Show("AskIfHeNeed")
end



--[[
-- Se déclenche quand on rentre en combat
function allEvents:PLAYER_REGEN_DISABLED( ... )
GearHelper.db.profile.addonEnabled= false
end

-- Se déclenche quand on sort du combat
function allEvents:PLAYER_REGEN_ENABLED( ... )
if startState == nil then
startState = true
end
print("startState = "..tostring( startState ))
GearHelper.db.profile.addonEnabled= startState
end
]]--

------------------------------------------------          ----------------------------------------------          ------------------------------------------------
-- xxxxxxx xxxxxxx --      -- xxxxxxx xxxxxxx --          -- xxxxxxx xxxxxxx --      -- xxxxx xxxxxxx --          -- xxxxxxx xxxxxxx --      -- xxxxxxx xxxxxxx --
------------------------------------------------          ----------------------------------------------          ------------------------------------------------

-- for event, _ in pairs(allEvents) do
--   eventHandler:RegisterEvent(event)
-- end
-- eventHandler:SetScript("OnEvent", function ( self, event, ... )
--   --if GearHelper.db.profile.addonEnabledor GearHelper.db.profile.addonEnabled== nil then
--   allEvents[event](self, ...)
--   --end
-- end)

--------------


-- pour chaques piece de stuff
-- faire une recherche dans l'inventaire
-- regarder s'il existe un stuff du même type
-- si oui, regarder s'il est meilleurs que celui qu'on à
-- si oui l'équiper
-- si non, le laisser dans l'inventaire
-- fonction GearHelper:weightCalculation si finger ou trinket abs ca doit planter
--recup le retour de la tabcaracter et pour chaque faire un GearHelper:weightCalculation ca economise des lignes pour trinket et bague

-- desc :
-- entrée :
-- sortie :
-- commentaire :


--/script print(GetSpecializationInfo(GetSpecialization(), false, false, GetUnitName("player"), UnitSex("player")))

---------------

-- Répertorier les pièces d'inventaire
-- Répertorier les pièces dispo dans le sac (spé)
-- Marquer les pièces de l'inventaire qui peuvent etre swap par celle du sac
-- Définir le nombre de pièces Y à tester et les lister
-- Définir le nombre de commutations possibles (nbPieceSlotX * nbPieceSlotY * nbPieceSlotZ etc...)
-- Equiper les pièces pour chaque commutation et recuperer stat
-- Comparer stat par rapport au caps








-- -- Need :
-- _, _, _, _, _, _, L["monture"] = GetItemInfo(77067) --monture
-- _, _, _, _, _, _, L["mascotte"] = GetItemInfo(8494) -- mascotte
--
-- -- Ne pas need :
-- _, _, _, _, _, L["sac"], L["conteneur"] = GetItemInfo(114821) -- sac + conteneur
-- _, _, _, _, _, L["consommable"], L["autre"] = GetItemInfo(124640) -- consommable + autre
-- _, _, _, _, _, L["glyphe"] = GetItemInfo(44922) -- glyphe , classe
-- _, _, _, _, _, L["artisanat"], L["element"] = GetItemInfo(111366) -- element = compo metier    | artisanat + element
-- _, _, _, _, _, L["recette"] = GetItemInfo(67538) -- artisanat, metier      | Recette
-- _, _, _, _, _, L["gemme"], L["relique"] = GetItemInfo(147108) -- Gemme, carac         | gemme + relique
-- _, _, _, _, _, L["divers"], L["camelote"] = GetItemInfo(45190) -- divers + camelotte
-- _, _, _, _, _, L["quete"] = GetItemInfo(122190)
-- _, _, _, _, _, L["cle"] = GetItemInfo(94222)
