local L = LibStub("AceLocale-3.0"):GetLocale("GearHelper")

local prefixAddon = "GeARHeLPeRPReFIX"
local gagne = 0

waitingIDTable = waitingIDTable

--[[
Function : AddonLoaded
Scope : local
Description :
Input :
Output :
Author : Raphaël Daumas
]]
local function AddonLoaded(name)
	if GearHelper.db.global.templates == nil then
		GearHelper.db.global.templates = {}
	end

	GearHelper:InitTemplates()

	if name == addonName then
		RegisterAddonMessagePrefix(prefixAddon)
		print(L["merci"])
	end
end

--[[
Function : OnMerchantShow
Scope : local
Description :
Input :
Output :
Author : Raphaël Daumas
]]
local function OnMerchantShow()
	gagne = 0
	if GearHelper.db.profile.sellGreyItems then
		for bag = 0, 4 do
			for slot = 1,GetContainerNumSlots(bag) do
				if GetContainerItemID(bag, slot) ~= nil then
					local id = GetContainerItemID(bag, slot)
					if id then
						local result = GearHelper:SiObjetGris(id)
						if result[1] then
							UseContainerItem(bag, slot)
							gagne = gagne + result[2]
						end
					end
				end
			end
		end
	end

	if CanMerchantRepair() and GearHelper.db.profile.autoRepair == 1 or GearHelper.db.profile.autoRepair == 2 then
		local argentPossedee = GetMoney()
		local prix = GetRepairAllCost()
		local droitGuilde = ""
		local argentGuilde = ""

		if IsInGuild() and CanGuildBankRepair() then
			droitGuilde = GetGuildBankWithdrawMoney()
			argentGuilde = GetGuildBankMoney()
		end
		if prix > 0 then
			if  GearHelper.db.profile.autoRepair == 1 then
				if argentPossedee >= prix then
					RepairAllItems(false)
					print(cRose..L["repairCost"]..math.floor(prix/10000)..L["dot"]..math.floor((prix % 10000) / 100)..L["gold"])
				else
					print(L["CantRepair"])
				end
			elseif GearHelper.db.profile.autoRepair == 2 then
				if droitGuilde ~= nil and (droitGuilde == -1 or (droitGuilde > argentGuilde and argentGuilde > prix)) then
					RepairAllItems(true)
					print(cRose..L["guildRepairCost"]..math.floor(prix/10000)..L["dot"]..math.floor((prix % 10000) / 100)..L["gold"])
				else
					if argentPossedee >= prix then
						RepairAllItems(false)
						print(cRose..L["repairCost"]..math.floor(prix/10000)..L["dot"]..math.floor((prix % 10000) / 100)..L["gold"])
					else
						print(L["CantRepair"])
					end
				end
			end
		end
	end

	for bag = 0,4 do
		for slot = 1,GetContainerNumSlots(bag) do
			if GetContainerItemID(bag, slot) ~= nil then
				local _, itemCount = GetContainerItemInfo(bag, slot)
				local id = GetContainerItemID(bag, slot)
				if id then
					local _, _, _, _, _, _, _, _, _, _, vendorPrice = GetItemInfo(id)
					if vendorPrice ~= nil then
						gagne = gagne + (vendorPrice * itemCount)
					end
				end
			end
		end
	end
end

--[[
Function : OnMerchantShow
Scope : local
Description :
Input :
Output :
Author : Raphaël Daumas
]]
local function PlayerEnteringWorld()
	GearHelper:BuildCWTable()
	if GearHelper.db.profile.addonEnabled == true then
		GearHelper:sendAskVersion()
		GearHelper:scanCharacter()
		GearHelper:scanBag()
	end
end

--[[
Function : ChatMsgAddon
Scope : local
Description :
Input :
Output :
Author : Raphaël Daumas
]]
local function ChatMsgAddon(prefixMessage, message, sender)
	if prefixMessage == prefixAddon then
		local emetteur = ""
		if sender:find("-")then
			emetteur = sender:sub(0, (sender:find("-") - 1))
		else
			emetteur = sender
		end
		if GearHelper.db.profile.addonEnabled== true then
			if emetteur ~= GetUnitName("player") then
				local prefVersion = message:sub(0, (message:find(";") - 1))
				if prefVersion == "answerVersion" then
					local vVersion = message:sub(message:find(";")+1, #message)
					versionCible = vVersion
					GearHelper:receiveAnswer(vVersion, sender)
				end
				if prefVersion == "askVersion" then
					GearHelper:sendAnswerVersion()
				end
			end
		end
	end
end

--[[
Function : ItemPush
Scope : local
Description :
Input :
Output :
Author : Raphaël Daumas
]]
local function ItemPush(bag)
	if GearHelper.db.profile.addonEnabled then
		GearHelper:scanCharacter()
		GearHelper:scanBag()
	end

	if GearHelper.db.profile.autoEquipLooted.actual then
		if bag == 23 then
			numBag = 4
		elseif bag == 22 then
			numBag = 3
		elseif bag == 21 then
			numBag = 2
		elseif bag == 20 then
			numBag = 1
		else
			numBag = bag
		end
		waitEquipTimer = time()
		waitEquipFrame:Show()
	end
end

--[[
Function : QuestComplete
Scope : local
Description :
Input :
Output :
Author : Raphaël Daumas
]]
local function QuestComplete()

	GearHelper.GetQuestRewardCoroutine = coroutine.create(function() GearHelper:GetQuestReward() end)
	coroutine.resume(GearHelper.GetQuestRewardCoroutine)

end

--[[
Function : StartLootRoll
Scope : local
Description :
Input :
Output :
Author : Raphaël Daumas
]]
local function StartLootRoll(number)

	-- GearHelper.AutoGreedAndNeedCoroutine = coroutine.create(function() GearHelper:AutoGreedAndNeed(number) end)
	-- coroutine.resume(GearHelper.AutoGreedAndNeedCoroutine)
	GearHelper:AutoGreedAndNeed(number)

end

--[[
Function : MerchantClosed
Scope : local
Description :
Input :
Output :
Author : Raphaël Daumas
]]
local function MerchantClosed()
	if GearHelper.db.profile.sellGreyItems then
		local argentFin = 0
		for bag = 0,4 do
			for slot = 1,GetContainerNumSlots(bag) do
				if GetContainerItemID(bag, slot) ~= nil then
					local _, itemCount = GetContainerItemInfo(bag, slot)
					local id = GetContainerItemID(bag, slot)
					if id then
						local _, _, _, _, _, _, _, _, _, _, vendorPrice = GetItemInfo(id)
						argentFin = argentFin + (vendorPrice * itemCount)
					end
				end
			end
		end
		if(gagne - argentFin > 0) then
			print(cVert..L["moneyEarned"]..math.floor((gagne - argentFin)/10000)..L["dot"]..math.floor(((gagne - argentFin) % 10000) / 100)..L["gold"])
			gagne = 0
		end
	end
end

--[[
Function : MerchantClosed
Scope : local
Description :
Input :
Output :
Author : Raphaël Daumas
]]
local function BagUpdate()
	--Random check to verify that charInventory is initialized because BagUpdate is fired before PlayerEnteringWorld
	if GearHelper.charInventory["MainHand"] ~= "" and GearHelper.charInventory["MainHand"] ~= nil then
		GearHelper:scanBag()
		GearHelper:scanCharacter()
		GearHelper:poseDot()
	end
end

--[[
Function : ActiveTalentGroupChanged
Scope : local
Description :
Input :
Output :
Author : Raphaël Daumas
]]
local function ActiveTalentGroupChanged()
	if GearHelper.db.profile.autoEquipWhenSwitchSpe then
		waitSpeTimer = time()
		waitSpeFrame:Show()
	end
end

--[[
Function : ChatMsgChannel
Scope : local
Description :
Input :
Output :
Author : Raphaël Daumas
]]
local function ChatMsgChannel(msg, sender)
	if GearHelper.db.profile.autoInvite and msg ~= nil then
		local playerIsNotMe = not string.find(sender, GetUnitName("player"))
		if msg:lower() == GearHelper.db.profile.inviteMessage:lower() and playerIsNotMe and GetNumGroupMembers() == 5 then
			ConvertToRaid()
			InviteUnit(sender)
		elseif msg:lower() == GearHelper.db.profile.inviteMessage:lower() and playerIsNotMe then
			InviteUnit(sender)
		end
	end
end

--[[
Function : ChatMsgWhisper
Scope : local
Description :
Input :
Output :
Author : Raphaël Daumas
]]
local function ChatMsgWhisper(msg, sender)
	if GearHelper.db.profile.autoInvite and msg ~= nil then
		local playerIsNotMe = not string.find(sender, GetUnitName("player"))
		if msg:lower() == GearHelper.db.profile.inviteMessage:lower() and playerIsNotMe and GetNumGroupMembers() == 5 then
			ConvertToRaid()
			InviteUnit(sender)
		elseif msg:lower() == GearHelper.db.profile.inviteMessage:lower() and playerIsNotMe then
			InviteUnit(sender)
		end
	end
end

--[[
Function : ChatMsgLoot
Scope : local
Description :
Input :
Output :
Author : Raphaël Daumas
]]
local function ChatMsgLoot(message, sender, language, channelString, target, flags, unknown1, channelNumber, channelName, unknown2, counter)
	GearHelper:createLinkAskIfHeNeeds(0, message, sender, language, channelString, target, flags, unknown1, channelNumber, channelName, unknown2, counter)

	local used = false
	for i = 1, NUM_CHAT_WINDOWS do
		local _, _, _, _, _, _, _, _, _, uninteractable = GetChatWindowInfo(i);
		if(uninteractable) then
			SetChatWindowUninteractable(i, false)
			used = true
		end
	end
	if used then
		ReloadUI()
	end
end

--[[
Function : UnitInventoryChanged
Scope : local
Description :
Input :
Output :
Author : Raphaël Daumas
]]
local function UnitInventoryChanged(joueur)
	if GearHelper.db.profile.addonEnabled and joueur == "player" then
		GearHelper:scanCharacter()
		GearHelper:scanBag()
		if GetInventoryItemLink("player",GetInventorySlotInfo("MainHandSlot")) ~= nil then
			local _, _, _, _, _, _, subclass  = GetItemInfo(GetInventoryItemLink("player",GetInventorySlotInfo("MainHandSlot")))
			if subclass == L["cannapeche"] then
				GearHelper.db.profile.autoEquipLooted.previous = GearHelper.db.profile.autoEquipLooted.actual
				GearHelper.db.profile.autoEquipLooted.actual = false
			else
				GearHelper.db.profile.autoEquipLooted.actual = GearHelper.db.profile.autoEquipLooted.previous
			end
		end
	end
end

--[[
Function : QuestTurnedIn
Scope : local
Description :
Input :
Output :
Author : Raphaël Daumas
]]
local function QuestTurnedIn()
	if GearHelper.db.profile.autoEquipLooted.actual then
		waitSpeTimer = time()
		waitSpeFrame:Show()
	end
end

--[[
Function : GetItemInfoReceived
Scope : local
Description :
Input :
Output :
Author : Raphaël Daumas
]]
local function GetItemInfoReceived(item)
	if item ~= nil then
		if GearHelper.idNilGetQuestReward ~= nil then
			if item == GearHelper.idNilGetQuestReward then
				GearHelper:Print(tostring(item).." était nil")
				coroutine.resume(GearHelper.GetQuestRewardCoroutine)
			end
		end
	end
end


	GearHelper:RegisterEvent("ADDON_LOADED", AddonLoaded, name)
	GearHelper:RegisterEvent("MERCHANT_SHOW", OnMerchantShow)
	GearHelper:RegisterEvent("PLAYER_ENTERING_WORLD", PlayerEnteringWorld)
	GearHelper:RegisterEvent("CHAT_MSG_ADDON", ChatMsgAddon, prefixMessage, message, sender)
	GearHelper:RegisterEvent("ITEM_PUSH", ItemPush, bag)
	GearHelper:RegisterEvent("QUEST_COMPLETE", QuestComplete)
	GearHelper:RegisterEvent("START_LOOT_ROLL", StartLootRoll, number)
	GearHelper:RegisterEvent("MERCHANT_CLOSED", MerchantClosed)
	GearHelper:RegisterEvent("BAG_UPDATE", BagUpdate)
	GearHelper:RegisterEvent("ACTIVE_TALENT_GROUP_CHANGED", ActiveTalentGroupChanged)
	GearHelper:RegisterEvent("CHAT_MSG_CHANNEL", ChatMsgChannel, msg, sender)
	GearHelper:RegisterEvent("CHAT_MSG_WHISPER", ChatMsgWhisper, msg, sender)
	GearHelper:RegisterEvent("CHAT_MSG_LOOT", ChatMsgLoot, message, sender, language, channelString, target, flags, unknown1, channelNumber, channelName, unknown2, counter)
	GearHelper:RegisterEvent("UNIT_INVENTORY_CHANGED", UnitInventoryChanged, joueur)
	GearHelper:RegisterEvent("QUEST_TURNED_IN", QuestTurnedIn)
	GearHelper:RegisterEvent("GET_ITEM_INFO_RECEIVED", GetItemInfoReceived, item)
