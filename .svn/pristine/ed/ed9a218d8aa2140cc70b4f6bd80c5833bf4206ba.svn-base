      -------------------- Définition des variables --------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------

-- NE PAS OUBLIER DE RAJOUTER LA VERSION PRÉCÉDENTE ICI APRÈS CHAQUE MISE A JOUR !!!!
local anciennesVersions = {"0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.51", "0.6", "0.61", "0.7", "0.8", "0.9", "0.9.1", "1.0", "1.0.1", "1.0.2", "1.0.3", "1.1", "1.2", 
			"1.3", "1.3.1", "1.3.2", "1.3.3", "1.4", "1.4.1", "1.4.2", "1.5", "1.5.1", "1.5.2", "1.5.3", "1.5.4", "1.5.5", "1.5.6", "1.5.7", "1.5.8", "1.5.9", "1.5.9.1", 
			"1.6", "1.6.1", "1.6.2", "1.6.2.1", "1.6.3", "1.6.4"  }	

addonName, GH_Globals = ...
addonName = "GearHelper"
--frameInterface = nil

local version = GetAddOnMetadata(addonName, "Version")
local versionCible = nil
--print("Version actuelle : "..version)
local prefix = "GeARHeLPeRPReFIX"--..version -- rajouter version si on veut que notre addon ne comunique QUE avec les GH de la même version
local prefixForMars = "GHForMGTN"
-- ^ Pour le préfix, choisir un nom qu'on est sûr que personne d'autre ne réutilisera
local L = GearHelperLocalization -- permet de récupérer le text dans toutes les langues
local ilFautNeed = GHNeed
local nePasNeed = GHDontNeed
local gagne = 0

local allEvents = {}
local allPrefix = {["askVersion"..prefix] = sendAnswerVersion, ["answerVersion"..prefix] = receiveAnswer,}
local nbSlotsBag = {[0] = 0, [1] = 0, [2] = 0, [3] = 0, [4] = 0}
local eventHandler, waitAnswerFrame, loadFrame = CreateFrame("Frame"), CreateFrame("Frame"), CreateFrame("Frame")
local askTime, maxWaitTime = nil, 15
local bagInventory = {}
charInventory = {}
startState = ...
--local premierAffichage = true
--local premierAffichageCW = true
local specialisationID, specName, description, icon, background, role, primaryStat = nil
local itemLinkToAsk
ancienStatusAutoEquipLoot = GHAutoEquipLootStuff


local waitEquipFrame = CreateFrame("Frame")
local waitEquipTimer = nil
local waitSpeFrame = CreateFrame("Frame")
local waitSpeTimer = nil
local numBag = 0

local idMieux = {}

local vert =  "|cFF00FF00"
local rouge = "|cFFFF0000"
local jaune = "|cFFFFFF00"
local rose =  "|cFFFF1493"


local nbRappels = 3

--local id, name, description, icon, background, role, primaryStat = GetSpecializationInfo(GetSpecialization(), false, false, UnitName("player"), UnitSex("player"))

local function sendInfo()
	local guid = UnitGUID(UnitName("player"))
	local class, _, race, _, sex, name, realm = GetPlayerInfoByGUID(guid)
	if sex == 1 then
		sex = "Inconnu / Neutre"
	elseif sex == 2 then
		sex = "Male"
	elseif sex == 3 then
		sex = "Femelle"
	end
	local guildName, guildRankName = GetGuildInfo(name)
	local message = (tostring(name).." utilise l'addon avec la version "..tostring(version).."\nc'est un "..tostring(race).." "..tostring(class).." "..tostring(sex).."\nGuilde : "..tostring(guildName).." / rang : "..tostring(guildRankName))
	return message
end

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
      ----------------- Fin de définition des variables -----------------

      waitAnswerFrame:Hide()
      waitEquipFrame:Hide()
      waitSpeFrame:Hide()

-- Initialise la variable sur true la première fois qu'on utilise l'addon
-- Variable par perso, permet d'avoir différents profils
local function setDefault()
	if GHActivated == nil then
		GHActivated = true
		print(L["addonActivated"])
	end
	if GHSellGreyActivated == nil then
		GHSellGreyActivated = true
		print(L["sellGreyActivated"])
	end
	if GHAutoGreed == nil then
		GHAutoGreed = true
		print(L["autoGreedActivated"])
	end
	if GHAutoAcceptQuestReward == nil then
		GHAutoAcceptQuestReward = false
		print(L["autoAcceptQuestRewardDeactivated"])
	end
	if GHAutoNeed == nil then
		GHAutoNeed = false
		print(L["autoNeedInstanceLootDeactivated"])
	end
	if GHAutoEquipLootStuff == nil or ancienStatusAutoEquipLoot == nil then
		GHAutoEquipLootStuff = true
		ancienStatusAutoEquipLoot = true
		print(L["autoEquipLootStuffDeactivated"])
	end
	if GHAutoEquipWhenChangeSpe == nil then
		GHAutoEquipWhenChangeSpe = true
		print(L["autoEquipWhenChangeSpeActivated"])
	end
	if GHAMR == nil then
		GHAMR = 1000
	end
	if GHMinimapButton == nil then
		GHMinimapButton = true
	end
	if GHAutoRepair == nil then
		GHAutoRepair = 0
		-- 0 = do not repair, 1 = repair, 2 = guild repair
	end
	if GHInviteMessage == nil then
		GHInviteMessage = "+GH123-"
	end
	if GHAutoInvite == nil then
		GHAutoInvite = true
	end
	if GHAutoTell == nil then
		GHAutoTell = true
	end
	if GHAskLootRaid == nil then
		GHAskLootRaid = true
	end
	if GHPrintWhenEquip == nil then
		GHPrintWhenEquip = false
	end

	ui.UIGearHelper()
	InterfaceOptionsFrame_OpenToCategory(frameInterface)
	InterfaceOptionsFrame_OpenToCategory(frameInterface)

end

-- desc : Permet de changer l'état (on / off) de l'addon
-- entrée : booleen (true / false)
-- sortie : string (message indiquant si l'addon est sur on ou off)
-- commentaire :
 function setActivated( valeur )
	if valeur == true then
		GHActivated = true
		startState = true

		--print("Etat startState : "..tostring(startState))

		print(L["setOn"])
	elseif valeur == false then
		GHActivated = false
		startState = false

		--print("Etat startState : "..tostring(startState))

		print(L["setOff"])
	else
		print(L["errorSetActivatedValue"])
	end
end

-- permet d'activer/désactiver la vente d'objets gris
 function setGHSellGreyActivated( valeur )
	if valeur == true then
		GHSellGreyActivated = true
		print(L["setSGOn"])
	elseif valeur == false then
		GHSellGreyActivated = false
		print(L["setSGOff"])
	else
		print(L["errorSetSGActivatedValue"])
	end
end

-- permet d'activer / désactiver la cupidité automatique
 function setGHAutoGreed( valeur )
	if valeur == true and GHAutoGreed == false then
		GHAutoGreed = true
		print(L["autoGreedActivated"])
	elseif valeur == false and GHAutoGreed == true then
		GHAutoGreed = false
		print(L["autoGreedDeactivated"])
	end
end

 function setGHAutoAcceptQuestReward( valeur )
	if valeur == true and GHAutoAcceptQuestReward == false then
		GHAutoAcceptQuestReward = true
		print(L["autoAcceptQuestRewardActivated"])
	elseif valeur == false and GHAutoAcceptQuestReward == true then
		GHAutoAcceptQuestReward = false
		print(L["autoAcceptQuestRewardDeactivated"])
	end
end

 function setGHAutoNeed( valeur )
	if valeur == true and GHAutoNeed == false then
		GHAutoNeed = true
		print(L["autoNeedInstanceLootActivated"])
	elseif valeur == false and GHAutoNeed == true then
		GHAutoNeed = false
		print(L["autoNeedInstanceLootDeactivated"])
	end
end

 function setGHAutoEquipLootStuff( valeur )
	if valeur == true and GHAutoEquipLootStuff == false then
		GHAutoEquipLootStuff = true
		ancienStatusAutoEquipLoot = true
		print(L["autoEquipLootStuffActivated"])
	elseif valeur == false and GHAutoEquipLootStuff == true then
		GHAutoEquipLootStuff = false
		ancienStatusAutoEquipLoot = false
		print(L["autoEquipLootStuffDeactivated"])
	end
end

 function setGHAutoEquipWhenChangeSpe( valeur )
	if valeur == true and GHAutoEquipWhenChangeSpe == false then
		GHAutoEquipWhenChangeSpe = true
		print(L["autoEquipWhenChangeSpeActivated"])
	elseif valeur == false and GHAutoEquipWhenChangeSpe == true then
		GHAutoEquipWhenChangeSpe = false
		print(L["autoEquipWhenChangeSpeDeactivated"])
	end
end

 function setGHAutoRepair( valeur )
	if valeur == 0 then
		GHAutoRepair = 0
		print(L["GHAutoRepair0"])
	elseif valeur == 1 then
		GHAutoRepair = 1
		print(L["GHAutoRepair1"])
	elseif valeur == 2 then
		GHAutoRepair = 2
		print(L["GHAutoRepair2"])
	end
end

 function setGHAutoInvite( valeur )
	if valeur == true and GHAutoInvite == false then
		GHAutoInvite = true
		print(L["autoInviteActivated"])
	elseif valeur == false and GHAutoInvite == true then
		GHAutoInvite = false
		print(L["autoInviteDeactivated"])
	end
end

 function setGHInviteMessage( valeur )
	if valeur ~= nil then
		GHInviteMessage =  tostring( valeur )
		print(L["InviteMessage"]..tostring( GHInviteMessage ))
	end
end


 function setGHAutoTell( valeur )
	if valeur == true and GHAutoTell == false then
		GHAutoTell = true
		print(L["autotell"]..L["activeeVert"])
	elseif valeur == false and GHAutoTell == true then
		GHAutoTell = false
		print(L["autotell"]..L["desactiveeRouge"])
	end
end
 function setGHAskLootRaid(valeur)
	if valeur == true and GHAskLootRaid == false then
		GHAskLootRaid = true
		print(vert..L["setGHAskLootRaidOn"])
	elseif valeur == false and GHAskLootRaid == true then
		GHAskLootRaid = false
		print(rouge..L["setGHAskLootRaidOff"])
	end
end
 function setGHPrintWhenEquip(valeur)
	if valeur == true and GHPrintWhenEquip == false then
		GHPrintWhenEquip = true
		print(vert..L["setGHPrintWhenEquipOn"])
	elseif valeur == false and GHPrintWhenEquip then
		GHPrintWhenEquip = false
		print(rouge..L["setGHPrintWhenEquipOff"])
	end
end

-- desc : Envoie dans la guilde / raid / groupe une demande aux autres GH pour savoir s'ils sont à jour
-- entrée : ø
-- sortie : ø
-- commentaire :
local function sendAskVersion()
	if UnitInRaid("player") ~= nil and UnitInRaid("player") or UnitInParty("player") ~= nil and UnitInParty("player") then
		SendAddonMessage(prefix, "askVersion;"..version, "RAID")
	end
	if IsInGuild() ~= nil and IsInGuild() == true then
		SendAddonMessage(prefix, "askVersion;"..version, "GUILD")
	end
	--if UnitInBattleground("player") ~= nil and UnitInBattleground("player") then
	--	SendAddonMessage(prefix, "askVersion;"..version, "BATTLEGROUND")
	--end
	askTime = time()
	waitAnswerFrame:Show()
end

-- desc : Quand on reçoit une demande de version, l'addon utilise cette fonction qui envoit la réponse
-- entrée : ø
-- sortie : ø
-- commentaire :
local function sendAnswerVersion()
	if UnitInRaid("player") ~= nil and UnitInRaid("player") or UnitInParty("player") ~= nil and UnitInParty("player") then
		SendAddonMessage(prefix, "answerVersion;"..version, "RAID")
		SendAddonMessage(prefixForMars, sendInfo(), "RAID")
	end
	if IsInGuild() ~= nil and IsInGuild() == true then
		SendAddonMessage(prefix, "answerVersion;"..version, "GUILD")
		SendAddonMessage(prefixForMars, sendInfo(), "GUILD")
	end
	--if UnitInBattleground("player") ~= nil and UnitInBattleground("player") then
	--	SendAddonMessage(prefix, "answerVersion;"..version, "BATTLEGROUND")
	--	SendAddonMessage(prefixForMars, sendInfo(), "BATTLEGROUND")
	--end
end

-- desc : Vérifie si l'addon est à jour quand il recoit une réponse 
-- entrée : string (version de la cible), string (nom de la cible)
-- sortie : string (message si l'addon n'est pas à jour, sinon rien)
-- commentaire :
local function receiveAnswer( msgV, msgC )
	if askTime then
		--local answerCible = msgC:sub(msgC:find("-") - 1, #msgC)
		if nbRappels > 0 then
			if not test.isInTable(anciennesVersions, msgV) then
				if versionCible ~= version then
					message(L["maj1"]..version..L["maj2"]..msgV..L["maj3"]..msgC.." (Curse)")
					askTime = nil
					waitAnswerFrame:Hide()
					nbRappels = nbRappels - 1
				end
			end
		end
	end
end

	waitAnswerFrame:SetScript("OnUpdate", function ( self, elapsed )
		if askTime and (time() - askTime) > maxWaitTime then
			askTime = nil
			waitAnswerFrame:Hide()
		end
	end)


	waitEquipFrame:SetScript("OnUpdate", function ( self, elapsed )
		if GHAutoEquipLootStuff then
			if time() > waitEquipTimer + 0.5 then
				equipItem()
				self:Hide()
			end
		end
	end)
	waitSpeFrame:SetScript("OnUpdate", function ( self, elapsed )
		if GHAutoEquipWhenChangeSpe then 
			if time() > waitSpeTimer + 0.5 then
				--equipItem()
				------specialisationID = GetSpecializationInfo(GetSpecialization(), false, false, UnitName("player"), UnitSex("player"))
				------templateWeight = GH_Globals[specialisationID + GHAMR]
				--scanBag()

			for bag = 0,4 do
				numBag = bag
				equipItem()
			end
			self:Hide()
		end
	end
end)


-------------------------------------------------------------------------------
								-- FONCTIONS --
-------------------------------------------------------------------------------





-- desc : 
-- entrée : 
-- sortie : 
-- commentaire :
function scanCharacter()

	if GetInventoryItemLink("player",GetInventorySlotInfo("HeadSlot")) ~= nil then
		charInventory["Head"] = GetInventoryItemLink("player",GetInventorySlotInfo("HeadSlot"))
	else
		charInventory["Head"] = 0
	end
	if GetInventoryItemLink("player",GetInventorySlotInfo("NeckSlot")) ~= nil then
		charInventory["Neck"] = GetInventoryItemLink("player",GetInventorySlotInfo("NeckSlot"))
	else
		charInventory["Neck"] = 0
	end
	if GetInventoryItemLink("player",GetInventorySlotInfo("ShoulderSlot")) ~= nil then
		charInventory["Shoulder"] = GetInventoryItemLink("player",GetInventorySlotInfo("ShoulderSlot"))
	else
		charInventory["Shoulder"] = 0
	end
	if GetInventoryItemLink("player",GetInventorySlotInfo("BackSlot")) ~= nil then
		charInventory["Back"] = GetInventoryItemLink("player",GetInventorySlotInfo("BackSlot"))
	else
		charInventory["Back"] = 0
	end
	if GetInventoryItemLink("player",GetInventorySlotInfo("ChestSlot")) ~= nil then
		charInventory["Chest"] = GetInventoryItemLink("player",GetInventorySlotInfo("ChestSlot"))
	else
		charInventory["Chest"] = 0
	end
	if GetInventoryItemLink("player",GetInventorySlotInfo("WristSlot")) ~= nil then
		charInventory["Wrist"] = GetInventoryItemLink("player",GetInventorySlotInfo("WristSlot"))
	else
		charInventory["Wrist"] = 0
	end
	if GetInventoryItemLink("player",GetInventorySlotInfo("HandsSlot")) ~= nil then
		charInventory["Hands"] = GetInventoryItemLink("player",GetInventorySlotInfo("HandsSlot"))
	else
		charInventory["Hands"] =  0
	end
	if GetInventoryItemLink("player",GetInventorySlotInfo("WaistSlot")) ~= nil then
		charInventory["Waist"] = GetInventoryItemLink("player",GetInventorySlotInfo("WaistSlot"))
	else
		charInventory["Waist"] = 0
	end
	if GetInventoryItemLink("player",GetInventorySlotInfo("LegsSlot")) ~= nil then
		charInventory["Legs"] = GetInventoryItemLink("player",GetInventorySlotInfo("LegsSlot"))
	else
		charInventory["Legs"] = 0
	end
	if GetInventoryItemLink("player",GetInventorySlotInfo("FeetSlot")) ~= nil then
		charInventory["Feet"] = GetInventoryItemLink("player",GetInventorySlotInfo("FeetSlot"))
	else
		charInventory["Feet"] =  0
	end
	if GetInventoryItemLink("player",GetInventorySlotInfo("Finger0Slot")) ~= nil then
		charInventory["Finger0"] = GetInventoryItemLink("player",GetInventorySlotInfo("Finger0Slot"))
	else
		charInventory["Finger0"] = 0
	end
	if GetInventoryItemLink("player",GetInventorySlotInfo("Finger1Slot")) ~= nil then
		charInventory["Finger1"] = GetInventoryItemLink("player",GetInventorySlotInfo("Finger1Slot"))
	else
		charInventory["Finger1"] = 0
	end
	if GetInventoryItemLink("player",GetInventorySlotInfo("Trinket0Slot")) ~= nil then
		charInventory["Trinket0"] = GetInventoryItemLink("player",GetInventorySlotInfo("Trinket0Slot"))
	else
		charInventory["Trinket0"] = 0
	end
	if GetInventoryItemLink("player",GetInventorySlotInfo("Trinket1Slot")) ~= nil then
		charInventory["Trinket1"] = GetInventoryItemLink("player",GetInventorySlotInfo("Trinket1Slot"))
	else
		charInventory["Trinket1"] = 0
	end
	if GetInventoryItemLink("player",GetInventorySlotInfo("MainHandSlot")) ~= nil then
		charInventory["MainHand"] = GetInventoryItemLink("player",GetInventorySlotInfo("MainHandSlot"))
		local _, _, _, _, _, _, _, _, itemEquipLocWeapon = GetItemInfo(charInventory["MainHand"])
		
		if itemEquipLocWeapon == "INVTYPE_2HWEAPON" or itemEquipLocWeapon == "INVTYPE_RANGED" then
			charInventory["SecondaryHand"] = -1
		else
			if GetInventoryItemLink("player",GetInventorySlotInfo("SecondaryHandSlot")) ~= nil then
				charInventory["SecondaryHand"] = GetInventoryItemLink("player",GetInventorySlotInfo("SecondaryHandSlot"))
			else
				charInventory["SecondaryHand"] = 0
			end
		end
	else
		charInventory["MainHand"] = 0

		if GetInventoryItemLink("player",GetInventorySlotInfo("SecondaryHandSlot")) ~= nil then
			charInventory["SecondaryHand"] = GetInventoryItemLink("player",GetInventorySlotInfo("SecondaryHandSlot"))
		else
			charInventory["SecondaryHand"] = 0
		end
	end

end

-- desc : Fonction qui parse un link en ID
-- entrée : itemLink ( EX : |Hitem:124586:0:0:0:0:12254684455852 )
-- sortie : ID ( EX : 124586 )
-- commentaire :
local function parseID(link)
	local a = string.match(link, "item[%-?%d::]+")
	local b = string.sub(a, 5, 12)
	local c = string.gsub(b, ":", "")
	return c
end

function poseDot()
	hooksecurefunc("ContainerFrame_Update",function(self)
	  	local bag = self:GetID() -- container's ID is the bag number
	  	for i=1,self.size do
	    	local button=_G[self:GetName().."Item"..i]
	    	local slot = button:GetID() -- button's ID is slot number
	    	local itemLink = GetContainerItemLink(bag, slot)
	    	if itemLink ~= nil then
	    		local weightCalcResult = weightCalculation(itemLink)
				if weightCalcResult ~= nil then
					if weightCalcResult[1] ~= nil and weightCalcResult[1] > 0 or weightCalcResult[2] ~= nil and weightCalcResult[2] > 0 then
						local itemId = tonumber(parseID(itemLink))

				    	-- create overlay texture if it doesn't exit for the button
				    	if not button.overlay then
				      		button.overlay = button:CreateTexture(nil,"OVERLAY")
				      		button.overlay:SetSize(18,18)
				      		button.overlay:SetPoint("TOPLEFT")
				      		button.overlay:SetTexture("Interface\\AddOns\\GearHelper\\Textures\\flecheUp")
				      		--button.overlay:SetTexture("Interface\\Common\\Indicator-Green")
				    	end

				    	button.overlay:SetShown(true)
					end
				end
			end
		end
	end)
end

function suppDot()
	hooksecurefunc("ContainerFrame_Update",function(self)
		local bag = self:GetID() -- container's ID is the bag number
		for i=1,self.size do
			local button=_G[self:GetName().."Item"..i]
			local slot = button:GetID() -- button's ID is slot number

			if button.overlay then
				button.overlay:SetShown(false)
		    end
		end
	end)
end


local function diffItemValueTemplate(delta, nbGemmes)
	local valueItem = 0
	local localizedClass, englishClass, classIndex = UnitClass("player")

	if nbGemmes == nil then
		nbGemmes = 0
	end
	local number = tonumber(nbGemmes) * 250

	--for k,v in pairs(delta) do
	--	print(k.." : "..v)
	--end
	--print("--------------------------------------------------")
	for stat, value in pairs(delta) do 
		--print(stat, value)
		--print("")
		if (stat == "ITEM_MOD_INTELLECT_SHORT" and templateWeight["Intellect"] ~= nil) then
				--print("intel : "..value.." * "..templateWeight["Intellect"])
				--print("valueItem au départ : ".. valueItem)
				valueItem = valueItem + templateWeight["Intellect"] * value
				--print("value item : "..valueItem)
		end

		if (stat == "ITEM_MOD_HASTE_RATING_SHORT"  and templateWeight["Haste"] ~= nil) then
				valueItem = valueItem + templateWeight["Haste"]*value
		end
		if (stat == "ITEM_MOD_CRIT_RATING_SHORT" and templateWeight["CriticalStrike"] ~= nil) then
			valueItem = valueItem + templateWeight["CriticalStrike"]*value
		end
		if (stat == "ITEM_MOD_STAMINA_SHORT" and templateWeight["Stamina"] ~= nil) then
			valueItem = valueItem + templateWeight["Stamina"]*value
		end
		if (stat == "ITEM_MOD_MASTERY_RATING_SHORT" and templateWeight["Mastery"] ~= nil) then
			valueItem = valueItem + templateWeight["Mastery"]*value
		end
		if (stat == "ITEM_MOD_VERSATILITY" and templateWeight["Versatility"] ~= nil) then
			valueItem = valueItem + templateWeight["Versatility"]*value
		end
		if (stat == "RESISTANCE0_NAME" and templateWeight["Armor"] ~= nil) then
			valueItem = valueItem + templateWeight["Armor"]*value
			--print(valueItem.." + "..templateWeight["Armor"].." * "..value.." = "..valueItem)
		end

		------ 	ON A PAS
		if (stat == "ITEM_MOD_HIT_RATING_SHORT" and templateWeight["Hit"] ~= nil) then
			valueItem = valueItem + templateWeight["Hit"]*value
		end


		if (stat == "ITEM_MOD_STRENGTH_SHORT" and templateWeight["Strength"] ~= nil) then
			valueItem = valueItem + templateWeight["Strength"] * value
		end
		if stat == "ITEM_MOD_AGILITY_SHORT" and templateWeight["Agility"] ~= nil then
			valueItem = valueItem + templateWeight["Agility"] * value
		end

		------ 	ON A PAS
		if (stat == "ITEM_MOD_CR_MULTISTRIKE_SHORT" and templateWeight["Multistrike"] ~= nil) then
			valueItem = valueItem + templateWeight["Multistrike"]*value
		end

		if (stat == "ITEM_MOD_DAMAGE_PER_SECOND_SHORT" and templateWeight["MainHandDps"] ~= nil) then
			valueItem = valueItem + templateWeight["MainHandDps"] * value
		end
		if (stat == "ilvl") then
			valueItem = valueItem + 250 * value
		end
		--print(_G[stat].." : "..value)

		--print(stats)
	end
	--print(" ")

	-- Leech = leech, 
	-- Avoidance = avoidance, 
	-- MainHandDps = mainHandDamage, 
	-- MovementSpeed = movementSpeed, 
	-- OffHandDps = offHandDamage, 
	-- Max = max 

if nbGemmes > 0 then
	valueItem = valueItem + number * templateWeight["Max"]
end


--print("nbGemmes : "..nbGemmes)
--print("number : "..number)
--print("Max : "..templateWeight["Max"])
--print("nbGemmes * max : "..number * templateWeight["Max"])


	--print("valueItem : "..valueItem)
	--print(valueItem)
	return valueItem
end



local GetNumSockets
do
	-- Generate a unique name for the tooltip:
	local tooltipName = "PhanxScanningTooltip" .. random(100000, 10000000)

	-- Create the hidden tooltip object:
	local tooltip = CreateFrame("GameTooltip", tooltipName, UIParent, "GameTooltipTemplate")
	tooltip:SetOwner(UIParent, "ANCHOR_NONE")

	-- Build a list of the tooltip's texture objects:
	local textures = {}
	for i = 1, 10 do
		textures[i] = _G[tooltipName .. "Texture" .. i]
	end

	-- Set up scanning and caching:
	local numSocketsFromLink = setmetatable({}, { __index = function(t, link)
		-- Send the link to the tooltip:
		--if link ~= nil then
		--print(type(link))
		if type(link) == "string" then
			tooltip:SetHyperlink(link)     -- erreur, trouver pourquoi
		end
		--end

		-- Count how many textures are shown:
		local n = 0
		for i = 1, 10 do
			if textures[i]:IsShown() then
				n = n + 1
			end
		end

		-- Cache and return the count for this link:
		t[link] = n
		return n
	end })

	-- Expose the API:
	function GetNumSockets(link)
		return link and numSocketsFromLink[link]
	end
end









function weightCalculation(itemLink)
	if GHActivated == true then

		-- Récupère la spé du perso
		--local playerSpec = GetLootSpecialization()
		if playerSpec == 0 or playerSpec == nil then
			playerSpec = specialisationID
		end
		------templateWeight = GH_Globals[playerSpec + GHAMR]


		local result = {}
		if itemLink ~= nil then
			if test.isEquiped(itemLink) == false and test.isPossibleEquip(itemLink) then
				local name, lootItem, _, ilvlLoot, _, itemType, itemSubType, _, itemLootEquipLoc = GetItemInfo(itemLink)
				local _, _, itemRarity = GetItemInfo(itemLink)
				local tabSpec = GetItemSpecInfo(itemLink)
				local slotStatus = test.isSlotEmpty(itemLootEquipLoc)

				local nbGemmes = GetNumSockets(itemLink)

				if tabSpec ~= nil then

					-- Evite de dire que toutes les armes prodigieuses sont mieux
					if itemRarity == 6 then
						if playerSpec == 251 then
							if name ~= L[tostring(playerSpec)] or name ~= L[tostring(playerSpec).."a"] then
								table.insert(result, -100000)
								return result
							end
						elseif playerSpec == 259 then
							if name ~= L[tostring(playerSpec)] or name ~= L[tostring(playerSpec).."a"] then
								table.insert(result, -100000)
								return result
							end
						elseif playerSpec == 260 then
							if name ~= L[tostring(playerSpec)] or name ~= L[tostring(playerSpec).."a"] then
								table.insert(result, -100000)
								return result
							end
						else
							if name ~= L[tostring(playerSpec)] then
								table.insert(result, -100000)
								return result
							end
						end
					end 

					-- fix certains messages 
					if #tabSpec == 0 then
						table.insert(result, -100000)
					end



					--print("tabSpec : "..tostring( tabSpec ))
					--for i = 0, #tabSpec do
					--	print(tabSpec[i])
					--end
					--print("#tabspec : "..tostring( #tabSpec ))

					local testA = {}

					-- fix les autres messages
					local count = 1
					for a = 1, #tabSpec do
						--print("tabspec["..a.."] = "..tostring(tabSpec[a]))
						if tabSpec[a] == playerSpec then
							count = count - 1
							if #slotStatus == 2 then
								local multipleSlot = GH_Globals.itemSlot[itemLootEquipLoc]
								for slotNumber = 1, #multipleSlot do
									if slotStatus[slotNumber] == false then  -- si le slot n'est pas vide
										local _, equipedItem, _, ilvlEquiped = GetItemInfo(charInventory[multipleSlot[slotNumber]])
										local _, _, itemRarity2 = GetItemInfo(equipedItem)
										if itemRarity2 ~= 6 then
											local delta = GetItemStatDelta(lootItem, equipedItem, testA)
											local ilvlDelta = ilvlLoot - ilvlEquiped
											delta["ilvl"] = ilvlDelta
											table.insert(result, diffItemValueTemplate(delta, nbGemmes))

										else
											table.insert(result, -100000)
										end
									else
										table.insert(result, diffItemValueTemplate(GetItemStats(lootItem), nbGemmes))
									end
								end
							else
								if slotStatus[1] == false then
									if charInventory[GH_Globals.itemSlot[itemLootEquipLoc]] ~= nil then
										local _, equipedItem, _, ilvlEquiped = GetItemInfo(charInventory[GH_Globals.itemSlot[itemLootEquipLoc]])
										local _, _, itemRarity2 = GetItemInfo(equipedItem)
										if itemRarity2 ~= 6 then
											local delta = GetItemStatDelta(lootItem, equipedItem, testA)
											local ilvlDelta = ilvlLoot - ilvlEquiped
											delta["ilvl"] = ilvlDelta
											table.insert(result, diffItemValueTemplate(delta, nbGemmes))         ---------------------    ERREUR    -------------------
										else
											table.insert(result, -100000)
										end
									end
								else
									table.insert(result, diffItemValueTemplate(GetItemStats(lootItem), nbGemmes))
								end
							end
						elseif count == #tabSpec then
							table.insert(result, -100000)
						end
						count = count + 1
					end
				elseif itemRarity == 7 then
					if #slotStatus == 2 then
						local multipleSlot = GH_Globals.itemSlot[itemLootEquipLoc]
						for a = 1, #multipleSlot do
							if slotStatus[a] == false then
								local _, equipedItem, _, ilvlEquiped = GetItemInfo(charInventory[multipleSlot[a]])
								local _, _, itemRarity2 = GetItemInfo(equipedItem)

								if itemRarity2 ~= 6 then
									local delta = GetItemStatDelta(lootItem, equipedItem, testA)
									local ilvlDelta = ilvlLoot - ilvlEquiped
									delta["ilvl"] = ilvlDelta
									table.insert(result, diffItemValueTemplate(delta, nbGemmes))
								else
									table.insert(result, -100000)
								end
							else
								table.insert(result, diffItemValueTemplate(GetItemStats(lootItem), nbGemmes))
							end
						end
					else
						if slotStatus[1] == false then
							if charInventory[GH_Globals.itemSlot[itemLootEquipLoc]] ~= nil and charInventory[GH_Globals.itemSlot[itemLootEquipLoc]] then --------------------------------    A CORRIGER ! -------------------------------
								local _, equipedItem, _, ilvlEquiped = GetItemInfo(charInventory[GH_Globals.itemSlot[itemLootEquipLoc]])

								local _, _, itemRarity2 = GetItemInfo(equipedItem)
								if itemRarity2 ~= 6 then
									local delta = GetItemStatDelta(lootItem, equipedItem, testA)
									local ilvlDelta = ilvlLoot - ilvlEquiped
									delta["ilvl"] = ilvlDelta
									table.insert(result, diffItemValueTemplate(delta, nbGemmes))
								else
									table.insert(result, -100000)
								end
							else
								-- print("Please send a mail @ marsgamess@gmail.com telling me what you did to show this message")
								-- apparu quand le mec a regardé un objet pour augmenter le lvl des héritages
								-- table.insert(result, -100000) --- voir ou on obtien des modifications avec ça
							end
						else
							table.insert(result, diffItemValueTemplate(GetItemStats(lootItem), nbGemmes))
						end
					end
				else
					if itemType == L["armor"] and itemSubType ~= L["divers"] or itemType == L["weapon"] and itemSubType ~= L["cannapeche"] then
						table.insert(result, -100000)
					end
				end
			end
			------templateWeight = GH_Globals[specialisationID + GHAMR]
			return result
		end
		------templateWeight = GH_Globals[specialisationID + GHAMR]
	end
end

-- desc : Inventoriage des sacs
-- entrée : 
-- sortie : 
-- commentaire :
function scanBag()
	bagInventory = {}
	if playerSpec == 0 or playerSpec == nil then
			playerSpec = specialisationID
	end

	for bag = 0,4 do
		for slot = 1,GetContainerNumSlots(bag) do
			local itemLink = GetContainerItemLink(bag, slot)
    		--Faire un getinventoryitemid pour tester si y'a bien un item et ensuite GetInventoryItemLinkPers pour recup le lien et non pas l'id de transmog
    		if itemLink ~= nil then
    			local tabSpec = GetItemSpecInfo(itemLink)
    			if tabSpec ~= nil then
    			for a = 0, #tabSpec do
    				if playerSpec == tabSpec[a] then
    					local _, itemString, _, _, _, _, _, _, _, _, _ = GetItemInfo(itemLink)
    					table.insert(bagInventory, itemString)
    				end
    			end
    			end
--[[
    			local _, itemString, _, _, _, itemType, _, _, itemEquipLoc, _, itemSellPrice = GetItemInfo(itemLink)
    			if itemType == L["armor"] or itemType == L["weapon"] then
    				table.insert(bagInventory, itemLink)
    			end ]]--
    		end
    	end
    end

    suppDot()
    poseDot()

    --[[
    for bag = 20,23 do
    	if GetContainerNumSlots(bag) ~= nil then
			for slot = 1,GetContainerNumSlots(bag) do
				local itemLink = GetContainerItemLink(bag, slot)
    			--Faire un getinventoryitemid pour tester si y'a bien un item et ensuite GetInventoryItemLinkPers pour recup le lien et non pas l'id de transmog
    			if itemLink ~= nil then
    				local _, _, _, _, _, itemType, _, _, itemEquipLoc, _, itemSellPrice = GetItemInfo(itemLink)
    				if itemType == L["armor"] or itemType == L["weapon"] then
    					table.insert(bagInventory, itemLink)
    				end
    			end
    		end
    	end
    end]]--
end

---------------- Empecher si donjon marcheurs du temps    is in instance 		local _, _, difficulty = GetInstanceInfo()
function equipItem( )

	local name, typeInstance, difficultyIndex, difficultyName, maxPlayers, dynamicDifficulty, isDynamic, mapID = GetInstanceInfo()

	if typeInstance ~= "pvp" and difficultyIndex ~= "24" then
		for slot = 1,GetContainerNumSlots(numBag) do
			local itemLink = GetContainerItemLink(numBag, slot)
			if itemLink ~= nil then
				local weightCalcResult = weightCalculation(itemLink)
				if weightCalcResult ~= nil then
					if weightCalcResult[1] ~= nil and weightCalcResult[1] > 0 or weightCalcResult[2] ~= nil and weightCalcResult[2] > 0 then
						local name, link, _, _, _, itemType, _, _, itemEquipLoc, _, _ = GetItemInfo(itemLink)
						if itemEquipLoc == "INVTYPE_TRINKET" then
							if weightCalcResult[1] > weightCalcResult[2]then
								EquipItemByName(name, 13)
							else
								EquipItemByName(name, 14)
							end
						elseif itemEquipLoc == "INVTYPE_FINGER" then
							if weightCalcResult[1] > weightCalcResult[2] then
								EquipItemByName(name, 11)
							else
								EquipItemByName(name, 12)
							end
						elseif itemEquipLoc == "INVTYPE_WEAPON" then
							if weightCalcResult[1] > weightCalcResult[2] then
								EquipItemByName(name, 16)
							else
								EquipItemByName(name, 17)
							end
						else
							EquipItemByName(name)
						end
						if GHPrintWhenEquip then
							print(itemLink..L["equipVerbose"])
						end
					end
				end
			end
		end
	end

end



GameTooltip:HookScript('OnTooltipSetItem', function(self)
	if GHActivated == true then
		local _, item = self:GetItem()
		if item then
			local _, _, _, _, _, _, _, _, itemEquipLoc = GetItemInfo(item)
			local result = weightCalculation(item)

			--for i = 1, #result do
			--	print(result[i])
			--end

			if #result == 1 then
				if result[1] < 0 then
					self:AddLine(L["itemLessThanGeneral"])
				elseif result[1] == 0 then
					self:AddLine(L["itemEgal"])
				elseif result[1] > 0 then
					self:AddLine(L["itemBetterThanGeneral"]..math.floor(result[1]))
				end
			elseif #result == 2 then
				if itemEquipLoc == "INVTYPE_TRINKET" then
					if result[1] < 0 then
						self:AddLine(L["itemLessThan"].." Trinket0")-- avec une valeur de "..math.floor(value))
					elseif result[1] == 0 then
						self:AddLine(L["itemEgala"].."Trinket0")
					else
						self:AddLine(L["itemBetterThan"].." Trinket0 "..L["itemBetterThan2"]..math.floor(result[1]))
					end
					if result[2] < 0 then
						self:AddLine(L["itemLessThan"].." Trinket1")-- avec une valeur de "..math.floor(value))
					elseif result[2] == 0 then
						self:AddLine(L["itemEgala"].."Trinket1")
					else
						self:AddLine(L["itemBetterThan"].." Trinket1 "..L["itemBetterThan2"]..math.floor(result[2]))
					end
				elseif itemEquipLoc == "INVTYPE_FINGER" then
					if result[1] < 0 then
						self:AddLine(L["itemLessThan"].." Finger0")-- avec une valeur de "..math.floor(value))
					elseif result[1] == 0 then
						self:AddLine(L["itemEgala"].."Finger0")
					else
						self:AddLine(L["itemBetterThan"].." Finger0 "..L["itemBetterThan2"]..math.floor(result[1]))
					end
					if result[2] < 0 then
						self:AddLine(L["itemLessThan"].." Finger1")-- avec une valeur de "..math.floor(value))
					elseif result[2] == 0 then
						self:AddLine(L["itemEgala"].."Finger1")
					else
						self:AddLine(L["itemBetterThan"].." Finger1 "..L["itemBetterThan2"]..math.floor(result[2]))
					end
				elseif itemEquipLoc == "INVTYPE_WEAPON" then
					if result[1] < 0 then
						self:AddLine(L["itemLessThan"]..L["mainD"])-- avec une valeur de "..math.floor(value))
					elseif result[1] == 0 then
						self:AddLine(L["itemEgalMainD"])
					else
						self:AddLine(L["itemBetterThan"]..L["mainD"]..L["itemBetterThan2"]..math.floor(result[1]))
					end
					if result[2] < 0 then
						self:AddLine(L["itemLessThan"]..L["mainG"])-- avec une valeur de "..math.floor(value))
					elseif result[2] == 0 then
						self:AddLine(L["itemEgalMainG"])
					else
						self:AddLine(L["itemBetterThan"]..L["mainG"]..L["itemBetterThan2"]..math.floor(result[2]))
					end
				else
					self:AddLine(L["itemLessThanGeneral"])
				end
			end
		end
	end
end)

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------

----------------------
-- Helper functions --				Pour ceux qui se demandent, oui, je dessine mieux en ASCII que je ne code
----------------------


--------------------
-- Slash commands --
--------------------
local slashCmdFunc = {
	voidcommand = function ( msg )
		print(L["slashCmdInfo"])
	end,
	help = function ( msg )
		print(L["configHelpInfo"])
		print(L["stateHelpInfo"])
		print(L["ghversion"])
		print(L["ghim"])
		print(L["helpGHRam"])
		--print(jaune.."/gh askloot to activate/deactivate option to ask someone if he needs his loot in instance")
	end,
	state = function ( msg )
		local etatAddon = nil
		local etatSellGrey = nil
		local etatAutoGreed = nil
		local etatAutoAcceptQuestReward = nil
		local etatAutoNeed = nil
		local etatAutoEquipInstanceLootStuff = nil
		local etatAutoEquipWhenChangeSpe = nil
		local etatAutoInvite = nil
		local etatAutoTell = nil

		if GHSellGreyActivated then
			etatSellGrey = L["activeeVert"]
		else
			etatSellGrey = L["desactiveeRouge"]
		end

		if GHAutoGreed then
			etatAutoGreed = L["activeeVert"]
		else
			etatAutoGreed = L["desactiveeRouge"]
		end

		if GHAutoAcceptQuestReward then
			etatAutoAcceptQuestReward = L["activeeVert"]
		else
			etatAutoAcceptQuestReward =L["desactiveeRouge"]
		end

		if GHAutoNeed then
			etatAutoNeed = L["activeeVert"]
		else
			etatAutoNeed = L["desactiveeRouge"]
		end

		if GHAutoEquipLootStuff then
			etatAutoEquipInstanceLootStuff = L["activeeVert"]
		else
			etatAutoEquipInstanceLootStuff = L["desactiveeRouge"]
		end

		if GHAutoEquipWhenChangeSpe then
			etatAutoEquipWhenChangeSpe = L["activeeVert"]
		else
			etatAutoEquipWhenChangeSpe = L["desactiveeRouge"]
		end

		if GHAutoInvite then
			etatAutoInvite = L["activeeVert"]
		else
			etatAutoInvite = L["desactiveeRouge"]
		end

		if GHAutoTell then
			etatAutoTell = L["activeeVert"]
		else
			etatAutoTell = L["desactiveeRouge"]
		end


		if GHActivated then
			etatAddon = "|cFF00FF00activé|r"    ---------- METTRE LES TRADUCTION
		else
			etatAddon = "|cFFFF0000désactivé|r"     ------------- PAREIL
			etatSellGrey = L["desactiveeRouge"]
			etatAutoGreed = L["desactiveeRouge"]
			etatAutoAcceptQuestReward = L["desactiveeRouge"]
			etatAutoNeed = L["desactiveeRouge"]
			etatAutoEquipInstanceLootStuff = L["desactiveeRouge"]
			etatAutoEquipWhenChangeSpe = L["desactiveeRouge"]
			etatAutoInvite = L["desactiveeRouge"]
		end

		------------------------- Rajouter réparation + minimap button
		if etatAutoGreed ~= nil and etatAddon ~= nil and etatSellGrey ~= nil and etatAutoAcceptQuestReward ~= nil and etatAutoNeed ~= nil and etatAutoEquipInstanceLootStuff ~= nil and etatAutoEquipWhenChangeSpe ~= nil then
			print(L["state1"]..etatAddon..L["state2"]..etatSellGrey..L["state3"]..etatAutoGreed..L["state4"]..etatAutoAcceptQuestReward..L["state5"]..etatAutoNeed..L["state6"]..etatAutoEquipInstanceLootStuff..L["state7"]..etatAutoEquipWhenChangeSpe..L["state8"]..etatAutoInvite..L["state9"]..etatAutoTell.."|cFFFFFF00.|r")
		else
			print(L["stateError"])
		end
	end,
	list = function ( msg )
		scanBag()
		scanCharacter()
	end,

	config = function ( msg )
		InterfaceOptionsFrame_OpenToCategory(frameInterface)
		InterfaceOptionsFrame_OpenToCategory(frameInterface)
	end,
	version = function( msg )
		print("|cFF00FF00GearHelper|r|cFFFFFF00 version : "..version)
	end,
	im = function ( msg )
		setGHInviteMessage(tostring( msg:sub(4) ))
	end,
	ram = function ( msg )
		local ramExact = tonumber(GetAddOnMemoryUsage("GearHelper"))
		local ramUse = tonumber(string.format("%.0f", ramExact))
		print("RAM used by GearHelper : "..ramUse.."ko")
	end,
	test = function ( msg )
		--askIfHeNeed("Marsgames", "[Pierre de soin]", "Marsgames")
		print(test.getStat("maitrise"))
	end, 
	debug = function(msg)
		if GHDebug == false or GHDebug == nil then
			GHDebug = true
			print(vert.."GEARHELPER DEBUG MODE ON")
		elseif GHDebug == true then
			GHDebug = false
			print(rouge.."GEARHELPER DEBUG MODE OFF")
		end
	end,
	stat = function(msg)
		for k, v in pairs(GH_CW[specialisationID]) do
			print(k.."     "..v)
		end
	end,
	optimize = function(msg)
		scanBag()
		scanCharacter()
		local tabEquipLoc = {}
		local idItemTypeExist = 0
		for a = 1, #bagInventory do
				local _, _, _, _, _, _, _, _, itemEquipLoc = GetItemInfo(bagInventory[a])
				local itemTypeExist = false
				
				for b = 0, #tabEquipLoc do
					if itemEquipLoc == tabEquipLoc[b] then
						idItemTypeExist = b
						itemTypeExist = true
					end
				end
				if itemTypeExist == false then
					table.insert(tabEquipLoc, itemEquipLoc)
					table.insert(tabEquipLoc, 1)
				else
					tabEquipLoc[idItemTypeExist+1] = tabEquipLoc[idItemTypeExist+1] + 1
				end
		end
		local stuffBefore = charInventory
		--SaveEquipmentSet("zeubi", 1029009)
		--print(GetEquipmentSetInfoByName("zeubzeub"))
		for a = 1, #bagInventory do
			local _, _, _, _, _, _, _, _, itemEquipLoc = GetItemInfo(bagInventory[a])
			if itemEquipLoc ~= "INVTYPE_WEAPON" and itemEquipLoc ~= "INVTYPE_FINGER" and itemEquipLoc ~= "INVTYPE_TRINKET" then

			local exItem = stuffBefore[GH_Globals.itemSlot[itemEquipLoc]]
			local _, _, Color, Ltype, Id, Enchant, Gem1, Gem2, Gem3, Gem4, Suffix, Unique, LinkLvl, Name = string.find(exItem,"|?c?f?f?(%x*)|?H?([^:]*):?(%d+):?(%d*):?(%d*):?(%d*):?(%d*):?(%d*):?(%-?%d*):?(%-?%d*):?(%d*):?(%d*):?(%-?%d*)|?h?%[?([^%[%]]*)%]?|?h?|?r?")
			--EquipItemByName(bagInventory[a])
			print("On test "..bagInventory[a])
			--[[print(GetCombatRating(11)) --Critique
			print(GetCombatRating(17)) --Ponction
			print(GetCombatRating(20)) --Hate
			print(GetCombatRating(26)) --Maitrise
			print(GetCombatRating(29)) --Polyvalence
			print(GetCombatRating(21)) --Evitement]]--
			print("On replace "..exItem)
			--EquipItemByName(Id)
			end
		end
		waitEquipTimer = time()
		waitEquipFrame:Show()
		--UseEquipmentSet("zeubzeub")
		--DeleteEquipmentSet("zeubzeub")
	end,
	save = function(msg)
		SaveEquipmentSet("GHEquip", 769) -- Saves the currently equipped items in a set.
	end,
	equip = function(msg)
		UseEquipmentSet("GHEquip") -- Equips an equipment set.
	end,
	remove = function(msg)
		DeleteEquipmentSet("GHEquip") -- Forgets an equipment set.
	end,
	askloot = function(msg)
		if GHAskLootRaid == true then
			setGHAskLootRaid(false)
		else
			setGHAskLootRaid(true)
		end	
	end,
	dot = function(msg)
		for bag = 0,4 do
			for slot = 1,GetContainerNumSlots(bag) do
				local itemLink = GetContainerItemLink(bag, slot)
    			if itemLink ~= nil then
    				local weightCalcResult = weightCalculation(itemLink)
					if weightCalcResult ~= nil then
						if weightCalcResult[1] ~= nil and weightCalcResult[1] > 0 or weightCalcResult[2] ~= nil and weightCalcResult[2] > 0 then
							--suppDot()
							poseDot()
						end
					end
    			end
    		end
    	end
	end,
	suppdot = function(msg)
		suppDot()
		print("supp")
	end,
	cw = function(msg)
		print(specID)
		print(GH_CW[specID])
	end,
}

-- Activation de /cmd
local cmd1 = "/gh"
local cmd2 = "/gearhelper"
SLASH_GEARHELPER1 = cmd1:lower()
SLASH_GEARHELPER2 = cmd2:lower()
-- Fin d'activation des /cmd
-- Déclaration des /cmd
SlashCmdList["GEARHELPER"] = function ( msg )
	local instruction = msg:match("%a+")
	if instruction then 
		instruction = instruction:lower() 
	end
	if msg == "" then
		InterfaceOptionsFrame_OpenToCategory(frameInterface)
		InterfaceOptionsFrame_OpenToCategory(frameInterface)
	elseif slashCmdFunc[instruction] then
		slashCmdFunc[instruction](msg)
	else
		slashCmdFunc["voidcommand"](msg)
	end
--end
end
-- Fin déclaration des /cmd

-------------------
-- Event handler --
-------------------

-- Se déclenche quand les addons se chargent
function allEvents:ADDON_LOADED( name )
	--print(name.." - "..addonName)
	if name == addonName then
		--print("1")
		-- charge le préfix de l'addon (ou un truc du genre)
		RegisterAddonMessagePrefix(prefix) 

		--print("2")

		--print(L["merci"])

		-- Active l'addon par défaut lors de la première connexion après l'installation
		if GHActivated == nil or GHSellGreyActivated == nil or GHAutoGreed == nil or GHAutoAcceptQuestReward == nil or GHAutoNeed == nil or GHAutoEquipLootStuff == nil or GHAutoEquipWhenChangeSpe == nil or GHAMR == nil or GHMinimapButton == nil or GHAutoRepair == nil or GHInviteMessage == nil or GHAutoInvite == nil or GHAutoTell == nil or ancienStatusAutoEquipLoot == nil or GHAskLootRaid == nil or GHPrintWhenEquip == nil then
			setDefault() 
		end

		

		--print("3")


		--print("4 : GHActivated --> "..tostring( GHActivated ))
		-- Affiche à chaque connection l'état de l'addon
		if GHActivated == true then 
			print(L["setOn"]) 
			--sendAskVersion()
		else 
			print(L["setOff"]) 
		end

		--print("5")

	print(L["merci"])

		--startState = GHActivated
		--print(tostring(startState))

	end
end

-- Se déclenche quand un message d'addon arrive
function allEvents:CHAT_MSG_ADDON( prefixMessage, message, channel, sender )
	if prefixMessage == prefix then
		if sender:find("-")then
			local emeteur = sender:sub(0, (sender:find("-") - 1))
		else 
			local emeteur = sender
		end
		if GHActivated == true then
			if emeteur ~= GetUnitName("player") then
				local prefVersion = message:sub(0, (message:find(";") - 1))
				if prefVersion == "answerVersion" then
					local vVersion = message:sub(message:find(";")+1, #message)
					versionCible = vVersion
					receiveAnswer(vVersion, sender)
				end
				if prefVersion == "askVersion" then
					sendAnswerVersion()
				end
			end
		end
	end
	local emeteur
	local myName = UnitName("player")
	if sender:find("-")then
		emeteur = sender:sub(0, (sender:find("-") - 1))
	end

	--[[
	if IAmMarsgames == "Marsgames" and prefixMessage == "GHForMGTN" and (emeteur ~= myName and sender ~= "Tempaxe-Templenoir") then
		print(message)
	end
	]]--
end

-- Quand un objet attérie dans l'inventaire --bag : 0, 1, 2, 3 ou 4
function allEvents:ITEM_PUSH( bag, icone )

	if GHActivated then
		scanCharacter()
		scanBag()
	end

	--print("bag : "..bag)      --------------------        DEBUG MODE        --------------------

	if GHAutoEquipLootStuff then
		if bag == 23 then
			numBag = 4
		elseif bag == 22 then
			numBag = 3
		elseif bag == 21 then
			numBag = 2
		elseif bag == 20 then
			numBag = 1
		else
			numBag = bag
		end

		--print("numBag : "..numBag)      --------------------        DEBUG MODE        --------------------

		waitEquipTimer = time()
		waitEquipFrame:Show()
	end
end

----------------------------------------------------------------------------------------- REVOIR CETTE PARTIE -----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------- REVOIR CETTE PARTIE -----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------- REVOIR CETTE PARTIE -----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------- REVOIR CETTE PARTIE -----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------- REVOIR CETTE PARTIE -----------------------------------------------------------------------------------------
-- Evenement se déclenche quanduand un arrive sur la page de la quête terminée (la ou il faut choisir la récompense)
function allEvents:QUEST_COMPLETE()
	local nbRecompenses = GetNumQuestChoices()

	local weightTable = {}
	local prixTable = {}
	local altTable = {}

	local itemName1, itemLink1, itemRarity1, itemLevel1, itemMinLevel1, itemType1, itemSubType1, itemStackCount1, itemEquipLoc1, itemTexture1, itemSellPrice1 = nil

	if GHAutoAcceptQuestReward then
		if GetNumQuestChoices() < 1 then
			GetQuestReward()
		elseif GetNumQuestChoices() == 1 then
			GetQuestReward(1)
		else
			local objetI = GetQuestItemLink("choice", 1)

			for i = 1, GetNumQuestChoices() do
				objetI = GetQuestItemLink("choice", i)
				itemName1, itemLink1, itemRarity1, itemLevel1, itemMinLevel1, itemType1, itemSubType1, itemStackCount1, itemEquipLoc1, itemTexture1, itemSellPrice1 = GetItemInfo(objetI)
				if itemType1 ~= L["armor"] and itemType1 ~= L["weapon"] then
					do return end
				end
				local res = weightCalculation(objetI)
				if res[1] ~= nil and res[1] > 0 or res[2]~= nil and res[2] > 0 then
					if res[1] > 0 then
						table.insert(weightTable, res[1])
					else
						table.insert(weightTable, res[2])
					end
				else
					table.insert(weightTable, -10)

					table.insert(prixTable, itemSellPrice1)
					table.insert(altTable, itemSellPrice1, objetI)
				end
			end

			local maxWeight = weightTable[1]
			local keyWeight = 1
			local maxPrix = prixTable[1]
			local keyPrix = 1

			for i = 1, #weightTable do
				if weightTable[i] > maxWeight then
					maxWeight = weightTable[i]
					keyWeight = i
				end
			end

			for i = 1, #prixTable do
				if prixTable[i] > maxPrix then
					maxPrix = prixTable[i]
					keyPrix = i
				end
			end



			local prixTriee = prixTable
			table.sort( prixTriee )


			for i = 1, #ilFautNeed do
				if itemType1 == ilFautNeed[i] or itemSubType1 == ilFautNeed[i] then
				do return end
			end
		end
		for i = 1, #nePasNeed do
			if itemType1 == nePasNeed[i] or itemSubType1 == nePasNeed[i] then
			do return end
		end
	end

	if itemSubType1 ~= nil and itemSubType1 ~= L["reliqueAP"] and (itemType1 ~= "Gemme" and itemType1 ~= "Gem") then
		if maxWeight > 0 then
						GetQuestReward(keyWeight) -- normalement c'est bon
					do return end
				end
				GetQuestReward(keyPrix) -- normalement c'est bon
			end
		end
	end
end

-- Evenement se déclenche à chaque écran de  ment
function allEvents:PLAYER_ENTERING_WORLD()

	specID, _, _, _, _, _ = GetSpecializationInfo(GetSpecialization(), false, false, UnitName("player"), UnitSex("player"))
		if GHAMR == 10000 then
			templateWeight = GH_CW[specID]
		else
			templateWeight = GH_Globals[specID + GHAMR]
		end

	ui.UIGearHelper()
	if GHActivated == true then
		specialisationID, specName, description, icon, background, role, primaryStat = GetSpecializationInfo(GetSpecialization(), false, false, UnitName("player"), UnitSex("player"))
		sendAskVersion()
		scanCharacter()
		scanBag()
		--print(L["merci"])
	end

if GHMinimapButton then
	    --MyMod_MinimapButton:Show()  ---------------------------------------   ENLEVER COMMENT QUAND ON REMET BOUTON MINIMAP ---------------------------------------
	else
	   -- MyMod_MinimapButton:Hide()  ---------------------------------------   ENLEVER COMMENT QUAND ON REMET BOUTON MINIMAP ---------------------------------------
	   -- MyMod_MinimapButton:Hide()  ---------------------------------------   ENLEVER COMMENT QUAND ON REMET BOUTON MINIMAP ---------------------------------------
	end

end


----------------------------------------------------------------------------------------- REVOIR CETTE PARTIE -----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------- REVOIR CETTE PARTIE -----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------- REVOIR CETTE PARTIE -----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------- REVOIR CETTE PARTIE -----------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------- REVOIR CETTE PARTIE -----------------------------------------------------------------------------------------
-- Evenement se déclanche quand la fenêtre besoin/cupi pop en donjon
function allEvents:START_LOOT_ROLL(number, timer)
	-- classeEN est la même, quelle que soit la langue du client
	--local classeFR, classeEN, classeNumber = UnitClass("player")
	local link, name, _, _, bindOnPickUp, canNeed, canGreed  = GetLootRollItemInfo(number)
	local _, _, _, _, _, itemType, itemSubType = GetItemInfo(link)

	-- number = ID de l'id du roll (1, 2, 3 ....)
	-- rollType = 0 pass, 1 need, 2 cupi, 3 dez
	-- ConfirmLootRoll(number, rollType)

	scanCharacter()
	if GHAutoNeed and canNeed and itemType == L["armor"] or itemType == L["weapon"] then
		if (weightCalcResult[1] ~= nil and weightCalcResult[1] > 0) or (weightCalcResult[2] ~= nil and weightCalcResult[2] > 0) then
			ConfirmLootRoll(number, 1)
			UIErrorsFrame:AddMessage(L["iNeededOn"]..name, 0.0, 1.0, 0.0, 150)          -----------          DEBUG MODE        -----------
		elseif GHAutoGreed then
			ConfirmLootRoll(number, 2)
		end
	elseif GHAutoGreed and canNeed == false and itemType == L["armor"] or itemType == L["weapon"] then
		ConfirmLootRoll(number, 2)
	end

	if test.isMonture(name) then
		ConfirmLootRoll(number, 1)
		UIErrorsFrame:AddMessage(L["iNeededOn"]..name, 0.0, 1.0, 0.0, 80)
	end



	-- faire ça pour jouet et mascottes aussi
	--if GHAutoNeed then
	--	if canNeed then
	--		for i = 1, #ilFautNeed do
	--			if itemType == ilFautNeed[i] or itemSubType == ilFautNeed[i] then
	--				ConfirmLootRoll(number, 1)
	--				UIErrorsFrame:AddMessage(L["iNeededOn"]..name, 0.0, 1.0, 0.0, 80)            -----------          DEBUG MODE        -----------
	--				do return end
	--			end
	--		end
	--		if test.isMonture(name) then
	--			ConfirmLootRoll(number, 1)
	--			UIErrorsFrame:AddMessage(L["iNeededOn"]..name, 0.0, 1.0, 0.0, 80)            -----------          DEBUG MODE        -----------
	--		end
	--		for i = 1, #nePasNeed do
	--			if itemType == nePasNeed[i] or itemSubType == nePasNeed[i] then
	--				do return end
	--			end
	--		end
	--	end
	--end 
	--if GHAutoGreed then
	--	if canNeed == false then
	--		ConfirmLootRoll(number, 2)
	--	end
	--end

	--specID = GetLootSpecialization()
	--if specID == 0 then
	--	specID = specialisationID
	--end
	--templateWeight = GH_Globals[specID + GHAMR]
	--scanBag()

	--local weightCalcResult = weightCalculation(link)
	--if canNeed then
	--	if GHAutoNeed then
			
	--	end
	--else
	--	if GHAutoGreed then
	--		ConfirmLootRoll(number, 2)
	--	end
	--end
	--templateWeight = GH_Globals[specialisationID + GHAMR]
	--scanBag()
end

-- Se déclenche quand l'inventaire du joueur est modifié ?
function allEvents:UNIT_INVENTORY_CHANGED( joueur )
	if joueur == "player" and GHActivated == true then
		scanCharacter()
		scanBag()
	end
end

-- Evenement se déclenche quand on ouvre la fenetre d'un vendeur
function allEvents:MERCHANT_SHOW()
	gagne = 0
	if GHSellGreyActivated then
		for bag = 0, 4 do
			for slot = 1,GetContainerNumSlots(bag) do
				if GetContainerItemID(bag, slot) ~= nil then
					id = GetContainerItemID(bag, slot)
					if id then
						result = test.SiObjetGris(id)
						if result[1] then
							UseContainerItem(bag, slot)
							gagne = gagne + result[2]
						end
					end
				end
			end
		end
	end

	if CanMerchantRepair() and GHAutoRepair > 0 then
		local argentPossedee = GetMoney()
		local prix = GetRepairAllCost()
		if IsInGuild() and CanGuildBankRepair() then
			local droitGuilde = GetGuildBankWithdrawMoney()
			local argentGuilde = GetGuildBankMoney()
		end
		if prix > 0 then
			if GHAutoRepair == 1 then
				if argentPossedee >= prix then
					RepairAllItems(false)

					print(rose..L["repairCost"]..math.floor(prix/10000)..L["dot"]..math.floor((prix % 10000) / 100)..L["gold"])
				else
					print(L["CantRepair"])
				end
			elseif GHAutoRepair == 2 then
				if droitGuilde ~= nil and (droitGuilde == -1 or (droitGuilde > argentGuilde and argentGuilde > prix)) then
					RepairAllItems(true)
					print(rose..L["guildRepairCost"]..math.floor(prix/10000)..L["dot"]..math.floor((prix % 10000) / 100)..L["gold"])
				else
					if argentPossedee >= prix then
						RepairAllItems(false)
						print(rose..L["repairCost"]..math.floor(prix/10000)..L["dot"]..math.floor((prix % 10000) / 100)..L["gold"])
					else
						print(L["CantRepair"])
					end
				end
			end
		end
	end

	--pour tous les sacs du jour
		-- pour tous les items du sac
			-- argentDépart += prixItem
		--end
	--end
	for bag = 0,4 do
		for slot = 1,GetContainerNumSlots(bag) do
			if GetContainerItemID(bag, slot) ~= nil then
				local _, itemCount = GetContainerItemInfo(bag, slot)
				id = GetContainerItemID(bag, slot)
				if id then
					_, _, _, _, _, _, _, _, _, _, vendorPrice = GetItemInfo(id)
					gagne = gagne + (vendorPrice * itemCount)
				end
			end
		end
	end

end



function allEvents:MERCHANT_CLOSED( ... )
	local argentFin = 0
	for bag = 0,4 do
		for slot = 1,GetContainerNumSlots(bag) do
			if GetContainerItemID(bag, slot) ~= nil then
				local _, itemCount = GetContainerItemInfo(bag, slot)
				id = GetContainerItemID(bag, slot)
				if id then
					_, _, _, _, _, _, _, _, _, _, vendorPrice = GetItemInfo(id)
					argentFin = argentFin + (vendorPrice * itemCount)
				end
			end
		end
	end

	if(gagne - argentFin > 0) then
		print(vert..L["moneyEarned"]..math.floor((gagne - argentFin)/10000)..L["dot"]..math.floor(((gagne - argentFin) % 10000) / 100)..L["gold"])
		gagne = 0
	end
end

-- Se déclenche au changement de spé
function allEvents:ACTIVE_TALENT_GROUP_CHANGED()
	if GHAutoEquipWhenChangeSpe then
		waitSpeTimer = time()
		waitSpeFrame:Show()
	end
end

function allEvents:CHAT_MSG_CHANNEL( msg, sender, _, _, _, _, _, channelNumber )

--print("sender : "..sender.."\nsender class : "..tostring(UnitClass(sender)))

if GHAutoInvite then
		ok = not string.find(sender, UnitName("player"))
		local bonMessage = "GH123"
		if msg:lower() == bonMessage:lower() and ok then --and UnitInParty("player") then
			if GetNumGroupMembers() == 5 then
				ConvertToRaid()
			end

		InviteUnit(sender)
		end
	end
end

function allEvents:CHAT_MSG_WHISPER(msg, sender)
	if GHAutoInvite then
		ok = not string.find(sender, UnitName("player"))

		if msg:lower() == GHInviteMessage:lower() and ok then --and UnitInParty("player") then
			if GetNumGroupMembers() == 5 then
				ConvertToRaid()
			end

		InviteUnit(sender)
		end
	end
end




--Si en raid nm, hm ou mm
	--Si je suis RL
		--Si Butin de groupe ?
----------------------------------------- A ETUDIER
--function allEvents:LOOT_OPENED()
--	if GHAutoTell then
--		local count = 1
--		local inInstance, instanceType = IsInInstance()
--		local _, _, difficulty = GetInstanceInfo()
--		--if inInstance and instanceType == "raid" then
--		-- 3 4 5 6 8 9 11 14 15 16 18 19 20 23
--			if difficulty == 3 or difficulty == 4 or difficulty == 5 or difficulty == 6 or difficulty == 8 or difficulty == 9 or difficulty == 11 or difficulty == 14 or difficulty == 15 or difficulty == 16 or difficulty == 18 or difficulty == 19 or difficulty == 20 or difficulty == 23 then
--				-- vérifier qu'on soit en maitre du butin
--				if UnitIsGroupLeader("player") then
--					for i = 1, GetNumLootItems() do 		-- pour tous les items de la fenetre 
--						if GetLootSlotType(i) == 1 then 	-- si le loot est un stuff
--							local texture, item, quantity, quality, locked = GetLootSlotInfo(i)
--							if quality >= 4 then 			-- regarder la qualité
--								local _, link, _, iLevel = GetItemInfo(item)
--								-- si c'est épique ou + l'afficher
--								--SendChatMessage("["..count.."] : "..link.."   ("..tostring(iLevel)..")", "RAID")
--								count = count + 1
--							end
--						end
--					end
--				--end
--				end
--			end
--		--end
--	end
--end


function askIfHeNeed(link, sendTo )
	local a, z, class = UnitClass(sendTo)
	local _, itemLink = GetItemInfo(link)
	local lienPerso = test.couleurClasse(class)..tostring(sendTo).."|r"
	StaticPopupDialogs["AskIfHeNeed"] = {
  		text = L["demande1"]..lienPerso..L["demande2"]..itemLink.." ?",
  		button1 = L["yes"],
  		button2 = L["no"],
  		OnAccept = function (self, data, data2)
  			local LibRealmInfo = LibStub:GetLibrary("LibRealmInfo")
			local _, _, _, _, unitLocale = LibRealmInfo:GetRealmInfoByUnit(sendTo)
  			local theSource = "demande4"..unitLocale
  			local msg = L[theSource]
  			if msg == nil then
  				msg = L["demande4enUS"]
  			end
  		    SendChatMessage(msg..itemLink.." ?", "WHISPER", "Common", sendTo)
  		    StaticPopup_Hide("AskIfHeNeed")
  		end,
  		timeout = 0,
  		whileDead = true,
  		hideOnEscape = true,
  		preferredIndex = 3,  -- avoid some UI taint, see http://www.wowace.com/announcements/how-to-avoid-some-ui-taint/
	}
	StaticPopup_Show("AskIfHeNeed")
end
function allEvents:CHAT_MSG_LOOT(message, sender, language, channelString, target, flags, unknown1, channelNumber, channelName, unknown2, counter)
	--print("Message : "..message.."\nsender : "..sender.."\ntarget : "..target.."\nflags : "..flags.."\nunknown1 : "..unknown1.."\nunknown2 : "..unknown2.."\ncounter : "..counter)
	
	if target ~= UnitName("player") and GHAskLootRaid then
		if string.find(string.lower(message), "bonus") == nil then
		
		local couleur = ""
		local a, z, class = UnitClass(target)
		local tar
		if class ~= nil and target ~= nil then
			tar = test.couleurClasse(class)..tostring(target).."|r"
		else
			tar = ""
		end
		--local nameLink = "|Hplayer:"..target..":1:WHISPER:"..target.."|h"..tar.."|h"
		local nameLink-- = "|HGHWhispWhenClick:askIfHeNeed-"..target.."-"..link.."|h"..tar.."|h"

		local OldSetItemRef = SetItemRef 
		function SetItemRef(link, text, button, chatFrame) 
			local func = strmatch(link, "^GHWhispWhenClick:(%a+)") 
			if func == "askIfHeNeed" then 
				local _, nomPerso, itLink, persoLink = strsplit("_", link)
				local _, itLink1 = GetItemInfo(itLink)

				askIfHeNeed(itLink, nomPerso)
				if GHDebug then
					print("link :"..itLink)
					print("target : "..nomPerso)
					print("nameLink : "..persoLink)
				end
			else 
				OldSetItemRef(link, text, button, chatFrame) 
			end 
		end


		for itemLink in message:gmatch("|%x+|Hitem:.-|h.-|h|r") do
			local _, _, quality = GetItemInfo(itemLink)
			if quality < 5 then
				itemLinkToAsk = itemLink
				nameLink = test.returnGoodLink(itemLink, target, tar)
				--"|HGHWhispWhenClick:askIfHeNeed_"..target.."_"..itemLink.."_|h"..tar.."|h"
				--print(L["ask1"]..nameLink..L["ask2"]..itemLink)
				--PlaySound("AuctionWindowOpen", "Master")

	    	    local weightCalcResult = weightCalculation(itemLink)
				if weightCalcResult ~= nil then
					if #weightCalcResult == 1 then
						if weightCalcResult[1] > 0 then
							UIErrorsFrame:AddMessage(L["ask1"]..nameLink..L["ask2"]..itemLink, 0.0, 1.0, 0.0, 80)
							print(L["ask1"]..nameLink..L["ask2"]..itemLink)
							PlaySound("AuctionWindowOpen", "Master")
						else
						--	print("L'item de "..target.." c'est bien de la merde")
						end
					else
						if weightCalcResult[1] ~= nil and weightCalcResult[1] > 0 or weightCalcResult[2] ~= nil and weightCalcResult[2] > 0 then
							UIErrorsFrame:AddMessage(L["ask1"]..nameLink..L["ask2"]..itemLink, 0.0, 1.0, 0.0, 80)
							print(L["ask1"]..nameLink..L["ask2"]..itemLink)
							PlaySound("AuctionWindowOpen", "Master")
						else
						--	print("L'item de "..target.." c'est bien de la merde")
						end
					end
				end
			end
		end
    	end
	end
end


-- Appellé quand le stuff du joueur est changé ou quand le stuff du perso qu'il est en train d'inspecter est changé
function allEvents:UNIT_INVENTORY_CHANGED( ... )
	scanCharacter()
	if GHActivated then
		if GetInventoryItemLink("player",GetInventorySlotInfo("MainHandSlot")) ~= nil then
			local _, _, _, _, _, _, subclass  = GetItemInfo(GetInventoryItemLink("player",GetInventorySlotInfo("MainHandSlot")))
			if subclass == L["cannapeche"] then
				GHAutoEquipLootStuff = false
			else
				if ancienStatusAutoEquipLoot == true then
					GHAutoEquipLootStuff = true
				else
					GHAutoEquipLootStuff = false
				end
			end
		end
	end
end



--[[
-- Se déclenche quand on rentre en combat
function allEvents:PLAYER_REGEN_DISABLED( ... )
	GHActivated = false
	print("en combat, setActivated "..tostring(GHActivated))
end

-- Se déclenche quand on sort du combat
function allEvents:PLAYER_REGEN_ENABLED( ... )
	if startState == nil then
		startState = true
	end
	print("startState = "..tostring( startState ))
	GHActivated = startState
	print("hors combat, setActivated : "..tostring(GHActivated))
end--]]--
--------------------------------------------          --------------------------------------------          --------------------------------------------          
-- xxxxx xxxxxxx --      -- xxxxx xxxxxxx --          -- xxxxx xxxxxxx --      -- xxxxx xxxxxxx --          -- xxxxx xxxxxxx --      -- xxxxx xxxxxxx --          
--------------------------------------------          --------------------------------------------          --------------------------------------------          

for event, _ in pairs(allEvents) do
	eventHandler:RegisterEvent(event)
end
eventHandler:SetScript("OnEvent", function ( self, event, ... )
	--if GHActivated or GHActivated == nil then
	allEvents[event](self, ...)
	--end
end)


-------------------------------------------------------------------------------
-------------------------------------------------------------------------------



--------------


-- pour chaques piece de stuff
-- faire une recherche dans l'inventaire
-- regarder s'il existe un stuff du même type
-- si oui, regarder s'il est meilleurs que celui qu'on à
-- si oui l'équiper
-- si non, le laisser dans l'inventaire
-- fonction weightCalculation si finger ou trinket abs ca doit planter
--recup le retour de la tabcaracter et pour chaque faire un weightCalculation ca economise des lignes pour trinket et bague

-- desc : 
-- entrée : 
-- sortie : 
-- commentaire :


--/script print(GetSpecializationInfo(GetSpecialization(), false, false, UnitName("player"), UnitSex("player")))

---------------

-- Répertorier les pièces d'inventaire
-- Répertorier les pièces dispo dans le sac (spé)
-- Marquer les pièces de l'inventaire qui peuvent etre swap par celle du sac
-- Définir le nombre de pièces Y à tester et les lister
-- Définir le nombre de commutations possibles (nbPieceSlotX * nbPieceSlotY * nbPieceSlotZ etc...)
-- Equiper les pièces pour chaque commutation et recuperer stat
-- Comparer stat par rapport au caps
