ui = {}

local decallageX = -120
local decallageY = 120
local openInterface = 0






local function pairsByKey (t, f)
	local a = {}
	for k, v in pairs(t) do 
		table.insert(a, v) 
	end
	table.sort(a, f)

	--for i = 1, #a do
	--	print(a[i])
	--end

	local b = {}
	local j = 0
	for k, v in pairs( t ) do
		b[v] = k..j
		j = j+1
	end
	--print(tostring( a[1] ))
	--print(isInTable(t, a[1]))
	local i = 0      -- iterator variable
	local iter = function ()   -- iterator function
		i = i + 1
		if a[i] == nil then 
			return nil
		else 
			return a[i], b[a[i]] 
		end
	end
	return iter
end

--[[
function sortTable( table )

	local tab2 = {}

	for k, v in pairs(table) do
	   if tab2[v] == nil then
	      tab2[v] = {}
	      table.insert(tab2[v], k)
	   else
	      table.insert(tab2[v], k)
	   end
	end

	table = {}
	local tab3 = {}

	for k, v in pairsByKey(tab2) do
		if tab3[v] == nil then
	      tab3[v] = {}
	      table.insert(tab3[v], k)
	   else
	      table.insert(tab3[v], k)
	   end
	end

	tab2 = {}
	local i = 1
	for k, v in pairs(tab3) do
		--if tab[i]

	for i, #tab3 do
		--tab2[i] = 
	end

	local i = #tab3
	for k, v in pairs(tab3) do
		table[]




end
]]--


local function createCheckbox( nomCheckbox, frameParent, posX, posY, text )
	local nomCheckbox = CreateFrame("CheckButton", tostring( nomCheckbox ), frameParent, "UICheckButtonTemplate")	
	nomCheckbox:SetPoint("CENTER", posX + decallageX, posY + decallageY)
	nomCheckbox.text:SetText(text)
	nomCheckbox:SetFrameStrata("HIGH")
	--nomCheckbox:SetScale(1.25)

	return nomCheckbox
end
local function createRadio( nomRatio, frameParent, posX, posY, text )
	local nomRatio = CreateFrame("CheckButton", tostring( nomRatio ), frameParent, "UIRadioButtonTemplate")
	nomRatio:SetPoint("CENTER", posX + decallageX, posY + decallageY)
	nomRatio.text:SetText(text)
	nomRatio:SetFrameStrata("HIGH")

	return nomRatio
end
local function createEditBox( nomEditBox, frameParent, posX, posY, text, longueur, empLabel, xLabel, yLabel, v)
	local nomEditBox = CreateFrame("EditBox", tostring( nomEditBox ), frameParent, "InputBoxTemplate")
	nomEditBox:SetPoint("CENTER", posX + decallageX, posY + decallageY)
	nomEditBox:SetText(v)
	nomEditBox:SetFrameStrata("HIGH")
	nomEditBox:SetSize(longueur, 1)
	nomEditBox:SetScript("OnEscapePressed", function(self)
		local frame = frameParent:GetParent()
		local parent = frame:GetParent()
		parent:Hide() 
	end)
	nomEditBox.Label = nomEditBox:CreateFontString(nil , "BORDER", "GameFontNormal")
    nomEditBox.Label:SetJustifyH("CENTER")
    nomEditBox.Label:SetPoint("LEFT", nomEditBox, empLabel, xLabel, yLabel)
	nomEditBox.Label:SetText(text)

	return nomEditBox
end
local function createButton( nomButton, frameParent, posX, posY, text )
	local nomButton = CreateFrame("Button", tostring( nomButton ), frameParent, "UIPanelButtonTemplate")
	nomButton:SetPoint("CENTER", posX + decallageX, posY + decallageY)
	nomButton:SetText(text)
	nomButton:SetSize(80, 20)
	nomButton:SetFrameStrata("HIGH")

	return nomButton
end




local function customWeightPanel()
	customWeightPanel = CreateFrame("Frame", nil, InterfaceOptionsFramePanelContainer, frameInterface)
	customWeightPanel.name = "Custom Weights"
	customWeightPanel.parent = frameInterface.name
	customWeightPanel:Hide()
	customWeightPanel:SetScript("OnShow", function(frame)
		
		editBoxCW = editBoxCW
		boutonAddCW = boutonAddCW

		local dic = { "Intellect", "Agility", "Strength", "Stamina", "Mastery",  "Haste", "CriticalStrike", "Versatility", "Armor", "Leech", "Avoidance", "MainHandDps", "MovementSpeed", "OffHandDps"}
		editBoxHate = editBoxHate
		editBoxIntel = editBoxIntell
		editBoxMaitrise = editBoxMaitrise
		editBoxCrit = editBoxCrit
		editBoxVers = editBoxVers
		editBoxAgi = editBoxAgi
		editBoxEndu = editBoxEndu
		editBoxForce = editBoxForce
		--editBoxArmure = editBoxArmure
		--editBoxLeech = editBoxLeech
		--editBoxAvoid = editBoxAvoid
		--editBoxMainHandDamage = editBoxMainHandDamage
		--editBoxOffHandDamage = editBoxOffHandDamage
		--editBoxMovementSpeed = editBoxMovementSpeed

		local temp = GH_Globals[specialisationID + GHAMR]
		local tabStats


		local tab2 = {}

		for k, v in pairs(temp) do
			if tab2[v] == nil then
      			tab2[v] = {}
      			table.insert(tab2[v], k)
   			else
      			table.insert(tab2[v], k)
   			end
		end


		for stat, value in pairs(temp) do
			
		




		local tabEditBox = {}

		if premierAffichageCW then

			editBoxCW = createEditBox(self, customWeightPanel, 95, 90, "Custom weights : stat value > stat value > ... ...", 500, "TOP", -125, 20, "")
			editBoxCW:SetMultiLine(true)
			--editBoxCW.Label:SetPoint("TOP", editBoxCW, "TOP", -5, 20)
			editBoxCW:SetScript("OnEnterPressed", function(self) end)

			boutonAddCW = createButton(self, customWeightPanel, 380, 90, "Add CW")

			-- pos y = 90 + (30 * i)
			--[[local i = 0
			table.sort(temp)
			for k, v in pairs(temp) do
				if v ~= 1 and k ~= "Max" then
					i = i + 1
					table.insert(tabEditBox, createEditBox(self, customWeightPanel, 50, 60 - (30 * i), tostring(v.."     "..k), 250))-- remplacere 500 par 80
				end
			end]]--
			local i = 1
			for stat, value in pairs(temp) do --pairsByKey(temp) do
				if stat ~= "Max" then
					i = i + 1
					table.insert(tabEditBox, createEditBox(self, customWeightPanel, 50, 90 - (30 * i), stat, 80, "RIGHT", 20, 0, value))
					--table.insert(tabEditBox, createEditBox(self, customWeightPanel, 50, 90 - (30 * i), tostring(value.."     "..stat), 250, "RIGHT"))-- remplacere 2500 par 80
				end
			end


			premierAffichageCW = false
		end

		boutonAddCW:SetScript("OnClick", function ( self,event, arg1 )
				print(tostring( editBoxCW:GetText() ))
			end)

		customWeightPanel.refresh = function()

			customWeightPanel:Hide()
			--customWeightPanel = nil
			premierAffichageCW = true
			customWeightPanel()

		end)

	end)
	

	--local boutonTest = createCheckbox( boutonTest, customWeightPanel, -150, 90, "salut")	
end

local function GHOptionPanel()

	--print(string.find("table", tostring( frameInterface )))
	if (string.find("table", tostring( frameInterface ))) then
		frameInterface:Show()
	else
		frameInterface = CreateFrame("Frame", nil, InterfaceOptionsFramePanelContainer)
		frameInterface.name = "GearHelper"
		frameInterface:Hide()
		--frameInterface:SetScript("OnEscapePressed", function(self) self:Hide() end)
		frameInterface:SetScript("OnShow", function(frame)

			checkGHActivated = checkGHActivated
			checkGHSellGreyActivated = checkGHSellGreyActivated
			checkGHAutoGreed = checkGHAutoGreed
			checkGHAutoAcceptQuestReward = checkGHAutoAcceptQuestReward
			checkGHAutoNeed = checkGHAutoNeed
			checkGHAutoEquipLootStuff = checkGHAutoEquipLootStuff
			checkGHAutoEquipWhenChangeSpe = checkGHAutoEquipWhenChangeSpe
			checkGHAutoInvite = checkGHAutoInvite
			checkGHAutoTell = checkGHAutoTell
			
			---------------------------------------   ENLEVER COMMENT QUAND ON REMET BOUTON MINIMAP ---------------------------------------
			--hideMinimapButton = hideMinimapButton
			---------------------------------------   ENLEVER COMMENT QUAND ON REMET BOUTON MINIMAP ---------------------------------------

			radioDoNotRepairButton = radioDoNotRepairButton
			radioAutoRepairButton = radioAutoRepairButton
			radioAutoRepairGuildButton = radioAutoRepairGuildButton
			radioAMRButton = radioAMRButton
			radioNoxxicButton = radioNoxxicButton



			if premierAffichage then

				checkGHActivated = createCheckbox(self, frameInterface, -150, 90, L["checkGHActivated"])
				checkGHSellGreyActivated = createCheckbox(self, frameInterface, -150, 60, L["checkGHSellGreyActivated"])
				checkGHAutoGreed = createCheckbox(self, frameInterface, -150, 30, L["checkGHAutoGreed"])
				checkGHAutoAcceptQuestReward = createCheckbox(self, frameInterface, -150, 0, L["checkGHAutoAcceptQuestReward"])
				checkGHAutoNeed = createCheckbox(self, frameInterface, -150, -30, L["checkGHAutoNeed"])
				checkGHAutoEquipLootStuff = createCheckbox(self, frameInterface, -150, -60, L["checkGHAutoEquipLootStuff"])
				checkGHAutoEquipWhenChangeSpe = createCheckbox(self, frameInterface, -150, -90, L["checkGHAutoEquipWhenChangeSpe"])
				--hideMinimapButton = createCheckbox(self, frameInterface, -150, -120, L["mmButton"])
				checkGHAutoInvite = createCheckbox(self, frameInterface, -150, -180, L["checkAutoInvite"]..tostring( GHInviteMessage ))
				checkGHAutoTell = createCheckbox(self, frameInterface, -150, -210, L["checkGHAutoTell"])


				radioDoNotRepairButton = createRadio(self, frameInterface, -150, -150, L["DNR"])
				radioAutoRepairButton = createRadio(self, frameInterface, 70, -150, L["AutoRepair"])
				radioAutoRepairGuildButton = createRadio(self, frameInterface, 250, -150, L["GuildAutoRepair"])

				radioAMRButton = createRadio(self, frameInterface, -150, 120, L["radioAMRButton"])
				radioNoxxicButton = createRadio(self, frameInterface, 70, 120, L["radioNoxxicButton"])
				radioIcyVeinsButton = createRadio(self, frameInterface, 250, 120, L["radioIcyVeinsButton"])

				if GHActivated then
					checkGHActivated:SetChecked(true)
				else
					checkGHActivated:SetChecked(false)
				end
				if GHSellGreyActivated then
					checkGHSellGreyActivated:SetChecked(true)
				else
					checkGHSellGreyActivated:SetChecked(false)
				end
				if GHAutoGreed then
					checkGHAutoGreed:SetChecked(true)
				else
					checkGHAutoGreed:SetChecked(false)
				end
				if GHAutoAcceptQuestReward then
					checkGHAutoAcceptQuestReward:SetChecked(true)
				else
					checkGHAutoAcceptQuestReward:SetChecked(false)
				end
				if GHAutoNeed then
					checkGHAutoNeed:SetChecked(true)
				else
					checkGHAutoNeed:SetChecked(false)
				end
				if GHAutoEquipLootStuff then
					checkGHAutoEquipLootStuff:SetChecked(true)
				else
					checkGHAutoEquipLootStuff:SetChecked(false)
				end
				if GHAutoEquipWhenChangeSpe then
					checkGHAutoEquipWhenChangeSpe:SetChecked(true)
				else
					checkGHAutoEquipWhenChangeSpe:SetChecked(false)
				end

				if GHAutoRepair == 0 then
					radioDoNotRepairButton:SetChecked(true)
					radioAutoRepairButton:SetChecked(false)
					radioAutoRepairGuildButton:SetChecked(false)
				end
				if GHAutoRepair == 1 then
					radioDoNotRepairButton:SetChecked(false)
					radioAutoRepairButton:SetChecked(true)
					radioAutoRepairGuildButton:SetChecked(false)
				end
				if GHAutoRepair == 2 then
					radioDoNotRepairButton:SetChecked(false)
					radioAutoRepairButton:SetChecked(false)
					radioAutoRepairGuildButton:SetChecked(true)
				end

				if GHAMR == 1000 then
					radioAMRButton:SetChecked(true)
					radioNoxxicButton:SetChecked(false)
					radioIcyVeinsButton:SetChecked(false)
				elseif GHAMR == 0 then
					radioNoxxicButton:SetChecked(true)
					radioAMRButton:SetChecked(false)
					radioIcyVeinsButton:SetChecked(false)
				elseif GHAMR == 10000 then
					radioIcyVeinsButton:SetChecked(true)
					radioAMRButton:SetChecked(false)
					radioNoxxicButton:SetChecked(false)
				end

				if GHAutoInvite == true then
					checkGHAutoInvite:SetChecked(true)
				else
					checkGHAutoInvite:SetChecked(false)
				end

				if GHAutoTell then
					checkGHAutoTell:SetChecked(true)
				else
					checkGHAutoTell:SetChecked(false)
				end

				--if GHMinimapButton then
				--	hideMinimapButton:SetChecked(true)
				--else
				--	hideMinimapButton:SetChecked(false)
				--end



				premierAffichage = false
			end



			radioNoxxicButton:SetScript("OnClick", function(self,event,arg1)
				if self:GetChecked() then
					GHAMR = 0
					radioNoxxicButton:SetChecked(true)
					radioAMRButton:SetChecked(false)
					radioIcyVeinsButton:SetChecked(false)
					scanCharacter()
					scanBag()
				else
					GHAMR = 0
					radioNoxxicButton:SetChecked(true)
					radioAMRButton:SetChecked(false)
					radioIcyVeinsButton:SetChecked(false)
					scanCharacter()
					scanBag()
				end
			end)

			radioAMRButton:SetScript("OnClick", function(self,event,arg1)
				if self:GetChecked() then
						GHAMR = 1000 ---------------------------------------------- METTRE à 1000 QUAND AMR EST UPDATE
						radioAMRButton:SetChecked(true)
					radioNoxxicButton:SetChecked(false)
					radioIcyVeinsButton:SetChecked(false)
						scanCharacter()
						scanBag()
					else
						GHAMR = 1000 ---------------------------------------------- METTRE à 1000 QUAND AMR EST UPDATE
						radioAMRButton:SetChecked(true)
					radioNoxxicButton:SetChecked(false)
					radioIcyVeinsButton:SetChecked(false)
						scanCharacter()
						scanBag()
					end
				end)

			radioIcyVeinsButton:SetScript("OnClick", function(self,event,arg1)
				if self:GetChecked() then
						GHAMR = 10000 
						radioIcyVeinsButton:SetChecked(true)
					radioAMRButton:SetChecked(false)
					radioNoxxicButton:SetChecked(false)
						scanCharacter()
						scanBag()
						message(L["ivIndisponible"])
					else
						GHAMR = 10000 
						radioIcyVeinsButton:SetChecked(true)
						radioAMRButton:SetChecked(false)
						radioNoxxicButton:SetChecked(false)
						scanCharacter()
						scanBag()
						message(L["ivIndisponible"])
					end
				end)

			radioDoNotRepairButton:SetScript("OnClick", function ( self,event, arg1 )
				radioDoNotRepairButton:SetChecked(true)
				if self:GetChecked() then
					radioDoNotRepairButton:SetChecked(true)
					radioAutoRepairButton:SetChecked(false)
					radioAutoRepairGuildButton:SetChecked(false)
					setGHAutoRepair(0)
				end
			end)
			radioAutoRepairButton:SetScript("OnClick", function ( self,event, arg1 )
				radioAutoRepairButton:SetChecked(true)
				if self:GetChecked() then
					radioDoNotRepairButton:SetChecked(false)
					radioAutoRepairButton:SetChecked(true)
					radioAutoRepairGuildButton:SetChecked(false)
					setGHAutoRepair(1)
				end
			end)
			radioAutoRepairGuildButton:SetScript("OnClick", function ( self,event, arg1 )
				radioAutoRepairGuildButton:SetChecked(true)
				if self:GetChecked() then
					radioDoNotRepairButton:SetChecked(false)
					radioAutoRepairButton:SetChecked(false)
					radioAutoRepairGuildButton:SetChecked(true)
					setGHAutoRepair(2)
				end
			end)

			checkGHActivated:SetScript("OnClick", function(self,event,arg1)
				if self:GetChecked() then
					setActivated(true)
				else
					setActivated(false)
				end
			end)

			checkGHSellGreyActivated:SetScript("OnClick", function(self,event,arg1)
				if self:GetChecked() then
					setGHSellGreyActivated(true)
				else
					setGHSellGreyActivated(false)
				end
			end)

			checkGHAutoGreed:SetScript("OnClick", function(self,event,arg1)
				if self:GetChecked() then
					setGHAutoGreed(true)
				else
					setGHAutoGreed(false)
				end
			end)

			checkGHAutoAcceptQuestReward:SetScript("OnClick", function(self,event,arg1)
				if self:GetChecked() then
					setGHAutoAcceptQuestReward(true)
				else
					setGHAutoAcceptQuestReward(false)
				end
			end)

			checkGHAutoNeed:SetScript("OnClick", function(self,event,arg1)
				if self:GetChecked() then
					setGHAutoNeed(true)
				else
					setGHAutoNeed(false)
				end
			end)

			checkGHAutoEquipLootStuff:SetScript("OnClick", function(self,event,arg1)
				if self:GetChecked() then
					setGHAutoEquipLootStuff(true)
				else
					setGHAutoEquipLootStuff(false)
				end
			end)

			checkGHAutoInvite:SetScript("OnClick", function(self,event,arg1)
				if self:GetChecked() then
					setGHAutoInvite(true)
				else
					setGHAutoInvite(false)
				end
			end)

			checkGHAutoTell:SetScript("OnClick", function ( self, event, arg1 )
				if self:GetChecked() then
					setGHAutoTell(true)
				else
					setGHAutoTell(false)
				end
			end)

			---------------------------------------   ENLEVER COMMENT QUAND ON REMET BOUTON MINIMAP ---------------------------------------
			--hideMinimapButton:SetScript("OnClick", function(self,event,arg1)
			--	if self:GetChecked() then
			--		GHMinimapButton = true
			--		MyMod_MinimapButton:Show()
			--	else
			--		MyMod_MinimapButton:Hide()
			--		GHMinimapButton = false
			--	end
			--end)
			---------------------------------------   ENLEVER COMMENT QUAND ON REMET BOUTON MINIMAP ---------------------------------------

			checkGHAutoEquipWhenChangeSpe:SetScript("OnClick", function(self,event,arg1)
			  	if self:GetChecked() then
			  		setGHAutoEquipWhenChangeSpe(true)
			  	else
			  		setGHAutoEquipWhenChangeSpe(false)
			  	end
			end)

		end)
	end
	  
	--end



	frameInterface.refresh = function()

		updateGHMenu()

	end

	frameInterface.default = function()
		setDefault()
	end


	frameInterface.okay = function (self)
		openInterface = 0
	end
	frameInterface.cancel = function (self)
		openInterface = 0  
	end
end


local function updateGHMenu()

	checkGHAutoInvite.text:SetText(L["checkAutoInvite"]..tostring( GHInviteMessage ))

	if checkGHActivated ~= nil then
		if GHActivated then
			checkGHActivated:SetChecked(true)
		else
			checkGHActivated:SetChecked(false)
		end
	end

	if checkGHSellGreyActivated ~= nil then
		if GHSellGreyActivated then
			checkGHSellGreyActivated:SetChecked(true)
		else
			checkGHSellGreyActivated:SetChecked(false)
		end
	end

	if checkGHAutoGreed ~= nil then
		if GHAutoGreed then
			checkGHAutoGreed:SetChecked(true)
		else
			checkGHAutoGreed:SetChecked(false)
		end
	end

	if checkGHAutoAcceptQuestReward ~= nil then
		if GHAutoAcceptQuestReward then
			checkGHAutoAcceptQuestReward:SetChecked(true)
		else
			checkGHAutoAcceptQuestReward:SetChecked(false)
		end
	end

	if checkGHAutoNeed ~= nil then
		if GHAutoNeed then
			checkGHAutoNeed:SetChecked(true)
		else
			checkGHAutoNeed:SetChecked(false)
		end
	end

	if checkGHAutoEquipLootStuff ~= nil then
		if GHAutoEquipLootStuff then
			checkGHAutoEquipLootStuff:SetChecked(true)
		else
			checkGHAutoEquipLootStuff:SetChecked(false)
		end
	end

	if checkGHAutoEquipWhenChangeSpe ~= nil then
		if GHAutoEquipWhenChangeSpe then
			checkGHAutoEquipWhenChangeSpe:SetChecked(true)
		else
			checkGHAutoEquipWhenChangeSpe:SetChecked(false)
		end
	end

	if checkGHAutoInvite ~= nil then
		if GHAutoInvite then
			checkGHAutoInvite:SetChecked(true)
		else
			checkGHAutoInvite:SetChecked(false)
		end
	end

	if checkGHAutoTell ~= nil then
		if GHAutoTell then
			checkGHAutoTell:SetChecked(true)
		else
			checkGHAutoTell:SetChecked(false)
		end
	end

	
	if radioDoNotRepairButton ~= nil and radioAutoRepairButton ~= nil and radioAutoRepairGuildButton ~= nil then
		if GHAutoRepair == 0 then
			radioDoNotRepairButton:SetChecked(true)
			radioAutoRepairButton:SetChecked(false)
			radioAutoRepairGuildButton:SetChecked(false)
		end
		if GHAutoRepair == 1 then
			radioDoNotRepairButton:SetChecked(false)
			radioAutoRepairButton:SetChecked(true)
			radioAutoRepairGuildButton:SetChecked(false)
		end
		if GHAutoRepair == 2 then
			radioDoNotRepairButton:SetChecked(false)
			radioAutoRepairButton:SetChecked(false)
			radioAutoRepairGuildButton:SetChecked(true)
		end
	end

	
	if radioAMRButton ~= nil and radioNoxxicButton ~= nil then
		if GHAMR == 1000 then
			radioIcyVeinsButton:SetChecked(false)
			radioAMRButton:SetChecked(true)
			radioNoxxicButton:SetChecked(false)
		elseif GHAMR == 0 then
			radioIcyVeinsButton:SetChecked(false)
			radioAMRButton:SetChecked(false)
			radioNoxxicButton:SetChecked(true)
		elseif GHAMR == 10000 then
			radioIcyVeinsButton:SetChecked(true)
			radioAMRButton:SetChecked(false)
			radioNoxxicButton:SetChecked(false)
		end
	end
end













function ui.UIGearHelper() 

	GHOptionPanel()
	if type(customWeightPanel) ~= "table" then
		customWeightPanel()
	end
	if premierAffichage then
		if frameInterface ~= nil then
			InterfaceOptions_AddCategory(frameInterface)
		else
			faceInterface:Hide()
		end
	end 
	InterfaceOptions_AddCategory(customWeightPanel) ------------------------- A RÉACTIVER QUAND ON METTRA LES CUSTOMS WEIGHTS
end















