-------------------- Définition des variables --------------------
-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
-- NE PAS OUBLIER DE RAJOUTER LA VERSION PRÉCÉDENTE ICI APRÈS CHAQUE MISE A JOUR !!!!
local anciennesVersions = {"0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.51", "0.6", "0.61", "0.7", "0.8", "0.9", "0.9.1", "1.0", "1.0.1", "1.0.2", "1.0.3", "1.1", "1.2",
"1.3", "1.3.1", "1.3.2", "1.3.3", "1.4", "1.4.1", "1.4.2", "1.5", "1.5.1", "1.5.2", "1.5.3", "1.5.4", "1.5.5", "1.5.6", "1.5.7", "1.5.8", "1.5.9", "1.5.9.1",
"1.6", "1.6.1", "1.6.2", "1.6.2.1", "1.6.3", "1.6.4", "1.6.5", "1.6.5.1", "1.6.5.2", "1.6.5.3", "1.6.5.4", "1.6.5.5", "1.6.5.6", "1.6.5.7", "1.6.5.8", "1.6.6", "1.6.6.1",   }

addonName, GH_Globals = ...
addonName = "GearHelper"
--frameInterface = nil

local version = GetAddOnMetadata(addonName, "Version")
local versionCible = nil

--print("Version actuelle : "..version)
local prefixAddon = "GeARHeLPeRPReFIX"--..version -- rajouter version si on veut que notre addon ne comunique QUE avec les GH de la même version
local prefixForMars = "GHForMGTN"
-- ^ Pour le préfix, choisir un nom qu'on est sûr que personne d'autre ne réutilisera
local L = GHVar.localization -- permet de récupérer le text dans toutes les langues
local ilFautNeed = GHVar.need
local nePasNeed = GHVar.dontneed
local gagne = 0

local allEvents = {}
local allPrefix = {["askVersion"..prefixAddon] = sendAnswerVersion, ["answerVersion"..prefixAddon] = receiveAnswer,}
local nbSlotsBag = {[0] = 0, [1] = 0, [2] = 0, [3] = 0, [4] = 0}
local eventHandler, waitAnswerFrame, loadFrame = CreateFrame("Frame"), CreateFrame("Frame"), CreateFrame("Frame")
local askTime, maxWaitTime = nil, 15
local bagInventory = {}
charInventory = {}
startState = ...
--local premierAffichage = true
--local premierAffichageCW = true
local specialisationID, specName, description, icon, background, role, primaryStat = nil
local itemLinkToAsk
GHVarChar.ancienStatusAutoEquipLoot = GHVarChar.autoEquipLootedStuff

-- local bagIsOpen = false
-- local dotIsOn = false
-- local bagOpenList = {}

local waitEquipFrame = CreateFrame("Frame")
local waitEquipTimer = nil
local waitSpeFrame = CreateFrame("Frame")
local waitSpeTimer = nil
local waitNilFrame = CreateFrame("Frame")
local waitNilTimer = nil
local numBag = 0

local idMieux = {}
local test = testTab

local nbRappels = 3

-- local needToRefresh = false

-- local waitEquipFrame1 = CreateFrame("Frame")
-- local waitEquipTimer1 = nil
-- waitEquipFrame1:Hide()
-- waitEquipFrame1:SetScript("OnUpdate", function ( self, elapsed )
--     if time() > waitEquipTimer1 + 0.5 then
--         equipItem()
--         self:Hide()
--     end
--
-- end)

--local id, name, description, icon, background, role, primaryStat = GetSpecializationInfo(GetSpecialization(), false, false, GetUnitName("player"), UnitSex("player"))

local function sendInfo()
    local guid = UnitGUID(UnitName("player"))
    local class, _, race, _, sex, name, realm = GetPlayerInfoByGUID(guid)
    if sex == 1 then
        sex = "Inconnu / Neutre"
    elseif sex == 2 then
        sex = "Male"
    elseif sex == 3 then
        sex = "Femelle"
    end
    local guildName, guildRankName = GetGuildInfo(name)
    local message = (tostring(name).." utilise l'addon avec la version "..tostring(version).."\nc'est un "..tostring(race).." "..tostring(class).." "..tostring(sex).."\nGuilde : "..tostring(guildName).." / rang : "..tostring(guildRankName))
    return message
end

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
----------------- Fin de définition des variables -----------------

waitAnswerFrame:Hide()
waitEquipFrame:Hide()
waitSpeFrame:Hide()
waitNilFrame:Hide()

-- Initialise la variable sur true la première fois qu'on utilise l'addon
-- Variable par perso, permet d'avoir différents profils
local function setDefault()
    if GHVarChar.addonActivated == nil then
        GHVarChar.addonActivated = true
        print(L["addonActivated"])
    end
    if GHVarChar.sellGrey == nil then
        GHVarChar.sellGrey = true
        print(L["sellGreyActivated"])
    end
    if GHVarChar.autoGreed == nil then
        GHVarChar.autoGreed = true
        print(L["autoGreedActivated"])
    end
    if GHVarChar.autoAcceptQuestReward == nil then
        GHVarChar.autoAcceptQuestReward = true
        print(L["autoAcceptQuestRewardDeactivated"])
    end
    if GHVarChar.autoNeed == nil then
        GHVarChar.autoNeed = true
        print(L["autoNeedInstanceLootDeactivated"])
    end
    if GHVarChar.autoEquipLootedStuff == nil or GHVarChar.ancienStatusAutoEquipLoot == nil then
        GHVarChar.autoEquipLootedStuff = true
        GHVarChar.ancienStatusAutoEquipLoot = true
        print(L["autoEquipLootStuffDeactivated"])
    end
    if GHVarChar.autoEquipWhenChangeSpe == nil then
        GHVarChar.autoEquipWhenChangeSpe = false
        print(L["autoEquipWhenChangeSpeActivated"])
    end
    if GHVarChar.AMR == nil then
        GHVarChar.AMR = 1000
    end
    if GHVarChar.minimapButton == nil then
        GHVarChar.minimapButton = true
    end
    if GHVarChar.autoRepair == nil then
        GHVarChar.autoRepair = 1
        -- 0 = do not repair, 1 = repair, 2 = guild repair
    end
    if GHVar.inviteMessage == nil then
        GHVar.inviteMessage = "+GH123-"
    end
    if GHVarChar.autoInvite == nil then
        GHVarChar.autoInvite = true
    end
    if GHVarChar.autoTell == nil then
        GHVarChar.autoTell = true
    end
    if GHVarChar.askLootRaid == nil then
        GHVarChar.askLootRaid = true
    end
    if GHVarChar.printWhenEquip == nil then
        GHVarChar.printWhenEquip = false
    end

    ui.UIGearHelper()
    InterfaceOptionsFrame_OpenToCategory(frameInterface)
    InterfaceOptionsFrame_OpenToCategory(frameInterface)

end

-- desc : Permet de changer l'état (on / off) de l'addon
-- entrée : booleen (true / false)
-- sortie : string (message indiquant si l'addon est sur on ou off)
-- commentaire :
function setActivated( valeur )
    if valeur == true then
        GHVarChar.addonActivated = true
        startState = true

        --print("Etat startState : "..tostring(startState))

        print(L["setOn"])
    elseif valeur == false then
        GHVarChar.addonActivated = false
        startState = false

        --print("Etat startState : "..tostring(startState))

        print(L["setOff"])
    else
        print(L["errorSetActivatedValue"])
    end
end

-- permet d'activer/désactiver la vente d'objets gris
function setSellGrey( valeur )
    if valeur == true then
        GHVarChar.sellGrey = true
        print(L["setSGOn"])
    elseif valeur == false then
        GHVarChar.sellGrey = false
        print(L["setSGOff"])
    else
        print(L["errorSetSGActivatedValue"])
    end
end

-- permet d'activer / désactiver la cupidité automatique
function setAutoGreed( valeur )
    if valeur == true and GHVarChar.autoGreed == false then
        GHVarChar.autoGreed = true
        print(L["autoGreedActivated"])
    elseif valeur == false and GHVarChar.autoGreed == true then
        GHVarChar.autoGreed = false
        print(L["autoGreedDeactivated"])
    end
end

function setAutoAcceptQuestReward( valeur )
    if valeur == true and GHVarChar.autoAcceptQuestReward == false then
        GHVarChar.autoAcceptQuestReward = true
        print(L["autoAcceptQuestRewardActivated"])
    elseif valeur == false and GHVarChar.autoAcceptQuestReward == true then
        GHVarChar.autoAcceptQuestReward = false
        print(L["autoAcceptQuestRewardDeactivated"])
    end
end

function setAutoNeed( valeur )
    if valeur == true and GHVarChar.autoNeed == false then
        GHVarChar.autoNeed = true
        print(L["autoNeedInstanceLootActivated"])
    elseif valeur == false and GHVarChar.autoNeed == true then
        GHVarChar.autoNeed = false
        print(L["autoNeedInstanceLootDeactivated"])
    end
end

function setAutoEquipLootedStuff( valeur )
    if valeur == true and GHVarChar.autoEquipLootedStuff == false then
        GHVarChar.autoEquipLootedStuff = true
        GHVarChar.ancienStatusAutoEquipLoot = true
        print(L["autoEquipLootStuffActivated"])
    elseif valeur == false and GHVarChar.autoEquipLootedStuff == true then
        GHVarChar.autoEquipLootedStuff = false
        GHVarChar.ancienStatusAutoEquipLoot = false
        print(L["autoEquipLootStuffDeactivated"])
    end
end

function setAutoEquipWhenChangeSpe( valeur )
    if valeur == true and GHVarChar.autoEquipWhenChangeSpe == false then
        GHVarChar.autoEquipWhenChangeSpe = true
        print(L["autoEquipWhenChangeSpeActivated"])
    elseif valeur == false and GHVarChar.autoEquipWhenChangeSpe == true then
        GHVarChar.autoEquipWhenChangeSpe = false
        print(L["autoEquipWhenChangeSpeDeactivated"])
    end
end

function setAutoRepair( valeur )
    if valeur == 0 then
        GHVarChar.autoRepair = 0
        print(L["GHAutoRepair0"])
    elseif valeur == 1 then
        GHVarChar.autoRepair = 1
        print(L["GHAutoRepair1"])
    elseif valeur == 2 then
        GHVarChar.autoRepair = 2
        print(L["GHAutoRepair2"])
    end
end

function setAutoInvite( valeur )
    if valeur == true and GHVarChar.autoInvite == false then
        GHVarChar.autoInvite = true
        print(L["autoInviteActivated"])
    elseif valeur == false and GHVarChar.autoInvite == true then
        GHVarChar.autoInvite = false
        print(L["autoInviteDeactivated"])
    end
end

function setInviteMessage( valeur )
    if valeur ~= nil then
        GHVar.inviteMessage =  tostring( valeur )
        print(L["InviteMessage"]..tostring( GHVar.inviteMessage ))
    end
end


function setAutoTell( valeur )
    if valeur == true and GHVarChar.autoTell == false then
        GHVarChar.autoTell = true
        print(L["autotell"]..L["activeeVert"])
    elseif valeur == false and GHVarChar.autoTell == true then
        GHVarChar.autoTell = false
        print(L["autotell"]..L["desactiveeRouge"])
    end
end
function setAskLootRaid(valeur)
    if valeur == true and GHVarChar.askLootRaid == false then
        GHVarChar.askLootRaid = true
        print(cVert..L["setGHAskLootRaidOn"])
    elseif valeur == false and GHVarChar.askLootRaid == true then
        GHVarChar.askLootRaid = false
        print(cRouge..L["setGHAskLootRaidOff"])
    end
end
function setPrintWhenEquip(valeur)
    if valeur == true and GHVarChar.printWhenEquip == false then
        GHVarChar.printWhenEquip = true
        print(cVert..L["setGHPrintWhenEquipOn"])
    elseif valeur == false and GHVarChar.printWhenEquip then
        GHVarChar.printWhenEquip = false
        print(cRouge..L["setGHPrintWhenEquipOff"])
    end
end

-- desc : Envoie dans la guilde / raid / groupe une demande aux autres GH pour savoir s'ils sont à jour
-- entrée : ø
-- sortie : ø
-- commentaire :
local function sendAskVersion()
    if UnitInRaid("player") ~= nil and UnitInRaid("player") or UnitInParty("player") ~= nil and UnitInParty("player") then
        SendAddonMessage(prefixAddon, "askVersion;"..version, "RAID")
    end
    if IsInGuild() ~= nil and IsInGuild() == true then
        SendAddonMessage(prefixAddon, "askVersion;"..version, "GUILD")
    end
    --if UnitInBattleground("player") ~= nil and UnitInBattleground("player") then
    --	SendAddonMessage(prefixAddon, "askVersion;"..version, "BATTLEGROUND")
    --end
    askTime = time()
    waitAnswerFrame:Show()
end

-- desc : Quand on reçoit une demande de version, l'addon utilise cette fonction qui envoit la réponse
-- entrée : ø
-- sortie : ø
-- commentaire :
local function sendAnswerVersion()
    if UnitInRaid("player") ~= nil and UnitInRaid("player") or UnitInParty("player") ~= nil and UnitInParty("player") then
        SendAddonMessage(prefixAddon, "answerVersion;"..version, "RAID")
        SendAddonMessage(prefixForMars, sendInfo(), "RAID")
    end
    if IsInGuild() ~= nil and IsInGuild() == true then
        SendAddonMessage(prefixAddon, "answerVersion;"..version, "GUILD")
        SendAddonMessage(prefixForMars, sendInfo(), "GUILD")
    end
    --if UnitInBattleground("player") ~= nil and UnitInBattleground("player") then
    --	SendAddonMessage(prefixAddon, "answerVersion;"..version, "PARTY")
    --	SendAddonMessage(prefixForMars, sendInfo(), "PARTY")
    --end
end

-- desc : Vérifie si l'addon est à jour quand il recoit une réponse
-- entrée : string (version de la cible), string (nom de la cible)
-- sortie : string (message si l'addon n'est pas à jour, sinon rien)
-- commentaire :
local function receiveAnswer( msgV, msgC )
    if askTime and nbRappels > 0 and not test.isInTable(anciennesVersions, msgV) and versionCible ~= version then
        message(L["maj1"]..version..L["maj2"]..msgV..L["maj3"]..msgC.." (Curse)")
        askTime = nil
        waitAnswerFrame:Hide()
        nbRappels = nbRappels - 1
    end
end

waitAnswerFrame:SetScript("OnUpdate", function ( self, elapsed )
    if askTime and (time() - askTime) > maxWaitTime then
        askTime = nil
        waitAnswerFrame:Hide()
    end
end)


waitEquipFrame:SetScript("OnUpdate", function( self, elapsed )
    if time() > waitEquipTimer + 0.5 then
        equipItem()
        self:Hide()
    end
end)
waitSpeFrame:SetScript("OnUpdate", function( self, elapsed )
    if time() > waitSpeTimer + 0.5 then
        --equipItem()
        ------specialisationID = GetSpecializationInfo(GetSpecialization(), false, false, UnitName("player"), UnitSex("player"))
        ------templateWeight = GH_Globals[specialisationID + GHVarChar.AMR]
        --scanBag()

        for bag = 0,4 do
            numBag = bag
            equipItem()
        end
        self:Hide()
    end
end)

waitNilFrame:SetScript("OnUpdate", function( self, elapsed )
    if time() > waitNilTimer + 10 then
        setDefault()
        self:Hide()
    end
end)


------------------------------------------------          ----------------------------------------------          ------------------------------------------------
-- xxxxxxx xxxxxxx --      -- xxxxxxx xxxxxxx --          -- xxxxxxx xxxxxxx --      -- xxxxx xxxxxxx --          -- xxxxxxx xxxxxxx --      -- xxxxxxx xxxxxxx --
------------------------------------------------          ----------------------------------------------          ------------------------------------------------
------------------------------------------------
--  FONCTIONS  --
------------------------------------------------
------------------------------------------------          ----------------------------------------------          ------------------------------------------------
-- xxxxxxx xxxxxxx --      -- xxxxxxx xxxxxxx --          -- xxxxxxx xxxxxxx --      -- xxxxx xxxxxxx --          -- xxxxxxx xxxxxxx --      -- xxxxxxx xxxxxxx --
------------------------------------------------          ----------------------------------------------          ------------------------------------------------

-- desc :
-- entrée :
-- sortie :
-- commentaire :
function scanCharacter()
    if GetInventoryItemLink("player",GetInventorySlotInfo("HeadSlot")) ~= nil then
        charInventory["Head"] = GetInventoryItemLink("player",GetInventorySlotInfo("HeadSlot"))
    else
        charInventory["Head"] = 0
    end
    if GetInventoryItemLink("player",GetInventorySlotInfo("NeckSlot")) ~= nil then
        charInventory["Neck"] = GetInventoryItemLink("player",GetInventorySlotInfo("NeckSlot"))
    else
        charInventory["Neck"] = 0
    end
    if GetInventoryItemLink("player",GetInventorySlotInfo("ShoulderSlot")) ~= nil then
        charInventory["Shoulder"] = GetInventoryItemLink("player",GetInventorySlotInfo("ShoulderSlot"))
    else
        charInventory["Shoulder"] = 0
    end
    if GetInventoryItemLink("player",GetInventorySlotInfo("BackSlot")) ~= nil then
        charInventory["Back"] = GetInventoryItemLink("player",GetInventorySlotInfo("BackSlot"))
    else
        charInventory["Back"] = 0
    end
    if GetInventoryItemLink("player",GetInventorySlotInfo("ChestSlot")) ~= nil then
        charInventory["Chest"] = GetInventoryItemLink("player",GetInventorySlotInfo("ChestSlot"))
    else
        charInventory["Chest"] = 0
    end
    if GetInventoryItemLink("player",GetInventorySlotInfo("WristSlot")) ~= nil then
        charInventory["Wrist"] = GetInventoryItemLink("player",GetInventorySlotInfo("WristSlot"))
    else
        charInventory["Wrist"] = 0
    end
    if GetInventoryItemLink("player",GetInventorySlotInfo("HandsSlot")) ~= nil then
        charInventory["Hands"] = GetInventoryItemLink("player",GetInventorySlotInfo("HandsSlot"))
    else
        charInventory["Hands"] =  0
    end
    if GetInventoryItemLink("player",GetInventorySlotInfo("WaistSlot")) ~= nil then
        charInventory["Waist"] = GetInventoryItemLink("player",GetInventorySlotInfo("WaistSlot"))
    else
        charInventory["Waist"] = 0
    end
    if GetInventoryItemLink("player",GetInventorySlotInfo("LegsSlot")) ~= nil then
        charInventory["Legs"] = GetInventoryItemLink("player",GetInventorySlotInfo("LegsSlot"))
    else
        charInventory["Legs"] = 0
    end
    if GetInventoryItemLink("player",GetInventorySlotInfo("FeetSlot")) ~= nil then
        charInventory["Feet"] = GetInventoryItemLink("player",GetInventorySlotInfo("FeetSlot"))
    else
        charInventory["Feet"] =  0
    end
    if GetInventoryItemLink("player",GetInventorySlotInfo("Finger0Slot")) ~= nil then
        charInventory["Finger0"] = GetInventoryItemLink("player",GetInventorySlotInfo("Finger0Slot"))
    else
        charInventory["Finger0"] = 0
    end
    if GetInventoryItemLink("player",GetInventorySlotInfo("Finger1Slot")) ~= nil then
        charInventory["Finger1"] = GetInventoryItemLink("player",GetInventorySlotInfo("Finger1Slot"))
    else
        charInventory["Finger1"] = 0
    end
    if GetInventoryItemLink("player",GetInventorySlotInfo("Trinket0Slot")) ~= nil then
        charInventory["Trinket0"] = GetInventoryItemLink("player",GetInventorySlotInfo("Trinket0Slot"))
    else
        charInventory["Trinket0"] = 0
    end
    if GetInventoryItemLink("player",GetInventorySlotInfo("Trinket1Slot")) ~= nil then
        charInventory["Trinket1"] = GetInventoryItemLink("player",GetInventorySlotInfo("Trinket1Slot"))
    else
        charInventory["Trinket1"] = 0
    end
    if GetInventoryItemLink("player",GetInventorySlotInfo("MainHandSlot")) ~= nil then
        charInventory["MainHand"] = GetInventoryItemLink("player",GetInventorySlotInfo("MainHandSlot"))
        local _, _, _, _, _, _, _, _, itemEquipLocWeapon = GetItemInfo(charInventory["MainHand"])

        if itemEquipLocWeapon == "INVTYPE_2HWEAPON" or itemEquipLocWeapon == "INVTYPE_RANGED" then
            charInventory["SecondaryHand"] = -1
            -- charInventory["SecondaryHand"] = 0
        else
            if GetInventoryItemLink("player",GetInventorySlotInfo("SecondaryHandSlot")) ~= nil then
                charInventory["SecondaryHand"] = GetInventoryItemLink("player",GetInventorySlotInfo("SecondaryHandSlot"))
            else
                charInventory["SecondaryHand"] = 0
            end
        end
    else
        charInventory["MainHand"] = 0

        if GetInventoryItemLink("player",GetInventorySlotInfo("SecondaryHandSlot")) ~= nil then
            charInventory["SecondaryHand"] = GetInventoryItemLink("player",GetInventorySlotInfo("SecondaryHandSlot"))
        else
            charInventory["SecondaryHand"] = 0
        end
    end
end

-- desc : Parse itemLink in itemID
-- entrée : itemLink ( EX : |Hitem:124586:0:0:0:0:12254684455852 )
-- sortie : ID ( EX : 124586 )
-- commentaire :
local function parseID(link)
    local a = string.match(link, "item[%-?%d::]+")
    local b = string.sub(a, 5, 12)
    local c = string.gsub(b, ":", "")
    return c
end

-- desc : Create overlay on items in bags if they are better than equipedItems
-- entrée :
-- sortie :
-- commentaire :
function poseDot()
    for bag = 0,4 do
        for slot = 1, GetContainerNumSlots(bag) do

            local myBag = bag+1
            local mySlot = GetContainerNumSlots(bag) - (slot - 1)
            local button = _G["ContainerFrame"..myBag.."Item"..mySlot]

            if button.overlay then
                button.overlay:SetShown(false)
                button.overlay = nil
            end

            local itemLink = GetContainerItemLink(bag, slot)
            if itemLink then

                local weightCalcResult = weightCalculation(itemLink)
                if weightCalcResult[1] ~= nil and weightCalcResult[1] > 0 or weightCalcResult[2] ~= nil and weightCalcResult[2] > 0 then

                    -- create overlay texture if it doesn't exit for the button
                    if not button.overlay then
                        button.overlay = button:CreateTexture(nil,"OVERLAY")
                        button.overlay:SetSize(18,18)
                        button.overlay:SetPoint("TOPLEFT")
                        button.overlay:SetTexture("Interface\\AddOns\\GearHelper\\Textures\\flecheUp")
                        --button.overlay:SetTexture("Interface\\Common\\Indicator-Green")
                        button.overlay:SetShown(true)
                    end
                end

            end

        end
    end
    ContainerFrame_UpdateAll()
end

-- function suppDot()
--     hooksecurefunc("ContainerFrame_Update",function(self)
--         local bag = self:GetID() -- container's ID is the bag number
--         for i=1,self.size do
--             local button=_G[self:GetName().."Item"..i]
--             local slot = button:GetID() -- button's ID is slot number
--
--             if button.overlay then
--                 button.overlay:SetShown(false)
--             end
--         end
--     end)
-- end

-- desc :
-- entrée :
-- sortie :
-- commentaire :
local function diffItemValueTemplate(delta, nbGemmes)
    local valueItem = 0
    local localizedClass, englishClass, classIndex = UnitClass("player")

    if nbGemmes == nil then
        nbGemmes = 0
    end
    local number = tonumber(nbGemmes) * 250

    --for k,v in pairs(delta) do
    --	print(k.." : "..v)
    --end
    --print("--------------------------------------------------")
    for stat, value in pairs(delta) do
        --value = tonumber(value)
        -- print(stat, value)
        --print("")
        if (stat == "ITEM_MOD_INTELLECT_SHORT" or stat == L.stat.Intell and templateWeight["Intellect"] ~= nil) then
            --print("intel : "..value.." * "..templateWeight["Intellect"])
            --print("valueItem au départ : ".. valueItem)
            valueItem = valueItem + templateWeight["Intellect"] * value
            --print("value item : "..valueItem)
        end

        if (stat == "ITEM_MOD_HASTE_RATING_SHORT" or stat == L.stat.Haste and templateWeight["Haste"] ~= nil) then
            valueItem = valueItem + templateWeight["Haste"]*value
        end
        if (stat == "ITEM_MOD_CRIT_RATING_SHORT" or stat == L.stat.Crit and templateWeight["CriticalStrike"] ~= nil) then
            valueItem = valueItem + templateWeight["CriticalStrike"]*value
        end
        if (stat == "ITEM_MOD_STAMINA_SHORT" or stat == L.stat.Endu and templateWeight["Stamina"] ~= nil) then
            valueItem = valueItem + templateWeight["Stamina"]*value
        end
        if (stat == "ITEM_MOD_MASTERY_RATING_SHORT" or stat == L.stat.Mastery and templateWeight["Mastery"] ~= nil) then
            valueItem = valueItem + templateWeight["Mastery"]*value
        end
        if (stat == "ITEM_MOD_VERSATILITY" or stat == L.stat.Poly and templateWeight["Versatility"] ~= nil) then
            valueItem = valueItem + templateWeight["Versatility"]*value
        end
        if (stat == "RESISTANCE0_NAME" or stat == L.stat.Armure and templateWeight["Armor"] ~= nil) then
            valueItem = valueItem + templateWeight["Armor"]*value
            --print(valueItem.." + "..templateWeight["Armor"].." * "..value.." = "..valueItem)
        end

        ------ 	ON A PAS
        if (stat == "ITEM_MOD_HIT_RATING_SHORT" and templateWeight["Hit"] ~= nil) then
            valueItem = valueItem + templateWeight["Hit"]*value
        end


        if (stat == "ITEM_MOD_STRENGTH_SHORT" or stat == L.stat.Force and templateWeight["Strength"] ~= nil) then
            valueItem = valueItem + templateWeight["Strength"] * value
        end
        if stat == "ITEM_MOD_AGILITY_SHORT" or stat == L.stat.Agi and templateWeight["Agility"] ~= nil then
            valueItem = valueItem + templateWeight["Agility"] * value
        end

        ------ 	ON A PAS
        if (stat == "ITEM_MOD_CR_MULTISTRIKE_SHORT" and templateWeight["Multistrike"] ~= nil) then
            valueItem = valueItem + templateWeight["Multistrike"]*value
        end

        if (stat == "ITEM_MOD_DAMAGE_PER_SECOND_SHORT" or stat == L.stat.DPS and templateWeight["MainHandDps"] ~= nil) then
            valueItem = valueItem + templateWeight["MainHandDps"] * value
        end
        if (stat == "ilvl") then
            valueItem = valueItem + 250 * value
        end
        --print(_G[stat].." : "..value)

        --print(stats)
    end
    --print(" ")

    -- Leech = leech,
    -- Avoidance = avoidance,
    -- MainHandDps = mainHandDamage,
    -- MovementSpeed = movementSpeed,
    -- OffHandDps = offHandDamage,
    -- Max = max

    if nbGemmes > 0 then
        valueItem = valueItem + number * templateWeight["Max"]
    end


    --print("nbGemmes : "..nbGemmes)
    --print("number : "..number)
    --print("Max : "..templateWeight["Max"])
    --print("nbGemmes * max : "..number * templateWeight["Max"])


    --print("valueItem : "..valueItem)
    --print(valueItem)
    return valueItem
end



local GetNumSockets
do

    -- Generate a unique name for the tooltip:
    local tooltipName = "PhanxScanningTooltip" .. random(100000, 10000000)

    -- Create the hidden tooltip object:
    local tooltip = CreateFrame("GameTooltip", tooltipName, UIParent, "GameTooltipTemplate")
    tooltip:SetOwner(UIParent, "ANCHOR_NONE")

    -- Build a list of the tooltip's texture objects:
    local textures = {}
    for i = 1, 10 do
        textures[i] = _G[tooltipName .. "Texture" .. i]
    end

    -- Set up scanning and caching:
    local numSocketsFromLink = setmetatable({}, { __index = function(t, link)
        -- Send the link to the tooltip:
        --if link ~= nil then
        --print(type(link))
        if type(link) == "string" then
            local _, _, _, Ltype = string.find(link,
            "|?c?f?f?(%x*)|?H?([^:]*):?(%d+):?(%d*):?(%d*):?(%d*):?(%d*):?(%d*):?(%-?%d*):?(%-?%d*):?(%d*):?(%d*):?(%-?%d*)|?h?%[?([^%[%]]*)%]?|?h?|?r?")
            if Ltype ~= "battlepet" then
                tooltip:SetHyperlink(link)     -- erreur, trouver pourquoi
            end
        end
        --end

        -- Count how many textures are shown:
        local n = 0
        for i = 1, 10 do
            if textures[i]:IsShown() then
                n = n + 1
            end
        end

        -- Cache and return the count for this link:
        t[link] = n
        return n
    end })

    -- Expose the API:
    function GetNumSockets(link)
        return link and numSocketsFromLink[link]
    end
end








----------------------------------------- Corriger certains problèmes main gauche / main droite ----------------------------
-- desc : Calculate if an item looted is better than item equiped
-- entrée : itemLootedLink
-- sortie : table that store the delta between equipItem and lootItem.
-- commentaire : tab[0] < 0 : lootItem is less than equipItem
--               tab[0] == 0 : lootItem is equivalent to equipItem
--               tab[0] > 0 : lootItem is better than equipItem
function weightCalculation(itemLootLink)
    if GHVarChar.addonActivated == true then

        local result = {}

        if itemLootLink ~= nil then
            local itemLootName, lootItem, itemLootRarity, _, _, itemType, itemSubType, _, itemLootEquipLoc = GetItemInfo(itemLootLink)
            local itemLootilvl = GetDetailedItemLevelInfo(itemLootLink)
            if not test.isEquiped(itemLootLink) and test.isEquippableByMe(itemLootLink) then
                local _, _, _, _, Id = string.find(itemLootLink, "|?c?f?f?(%x*)|?H?([^:]*):?(%d+):?(%d*):?(%d*):?(%d*):?(%d*):?(%d*):?(%-?%d*):?(%-?%d*):?(%d*):?(%d*):?(%-?%d*)|?h?%[?([^%[%]]*)%]?|?h?|?r?")
                local tabSpec = GetItemSpecInfo(itemLootLink)
                local slotStatus = test.isSlotEmpty(itemLootEquipLoc)
                local nbGemmes = GetNumSockets(itemLootLink)

                if itemLootEquipLoc ~= nil then
                    if itemLootEquipLoc == "INVTYPE_TRINKET" or itemLootEquipLoc == "INVTYPE_FINGER" then
                        local slotsList = GH_Globals.itemSlot[itemLootEquipLoc]
                        for slotNumber = 1, #slotsList do
                            if slotStatus[slotNumber] == false then
                                local _, equipedItem, itemEquipRarity = GetItemInfo(charInventory[slotsList[slotNumber]])
                                _, equipedItem, itemEquipRarity = GetItemInfo(charInventory[slotsList[slotNumber]])
                                _, equipedItem, itemEquipRarity = GetItemInfo(charInventory[slotsList[slotNumber]])
                                local itemEquipilvl = GetDetailedItemLevelInfo(charInventory[slotsList[slotNumber]])
                                local delta = getStatsDeltaFromTooltip(lootItem, equipedItem)
                                local ilvlDelta = itemLootilvl - itemEquipilvl
                                delta["ilvl"] = 0--ilvlDelta
                                table.insert(result, diffItemValueTemplate(delta, nbGemmes))
                            else
                                table.insert(result, diffItemValueTemplate(getStatsFromTooltip(lootItem), nbGemmes))
                            end
                        end
                    elseif itemLootEquipLoc == "INVTYPE_WEAPON" then -- Masse à une main / épée à 1 main / Dague 1 main
                        if not slotStatus[1] and not slotStatus[2] then
                            local _, MHequipedItem, MHitemEquipRarity, MHitemEquipilvl = GetItemInfo(charInventory["MainHand"])
                            local MHdelta = getStatsDeltaFromTooltip(lootItem, MHequipedItem)
                            local MHilvlDelta = itemLootilvl - MHitemEquipilvl
                            MHdelta["ilvl"] = 0--MHilvlDelta

                            local _, SHequipedItem, SHitemEquipRarity = GetItemInfo(charInventory["SecondaryHand"])
                            local SHitemEquipilvl = GetDetailedItemLevelInfo(charInventory["SecondaryHand"])
                            local SHdelta = getStatsDeltaFromTooltip(lootItem, SHequipedItem)
                            local SHilvlDelta = itemLootilvl - SHitemEquipilvl
                            SHdelta["ilvl"] = 0--SHilvlDelta

                            table.insert(result, diffItemValueTemplate(MHdelta, nbGemmes))
                            table.insert(result, diffItemValueTemplate(SHdelta, nbGemmes))

                        elseif not slotStatus[1] and slotStatus[2] then
                            if charInventory["SecondaryHand"] == -1 then
                                local _, equipedItem, itemEquipRarity = GetItemInfo(charInventory["MainHand"])
                                local itemEquipilvl = GetDetailedItemLevelInfo(charInventory["MainHand"])
                                local delta = getStatsDeltaFromTooltip(lootItem, equipedItem)
                                local ilvlDelta = itemLootilvl - itemEquipilvl
                                delta["ilvl"] = 0--ilvlDelta
                                table.insert(result, diffItemValueTemplate(delta, nbGemmes))
                            else
                                local _, MHequipedItem, MHitemEquipRarity = GetItemInfo(charInventory["MainHand"])
                                local MHitemEquipilvl = GetDetailedItemLevelInfo(charInventory["MainHand"])
                                local MHilvlDelta = itemLootilvl - MHitemEquipilvl
                                MHdelta["ilvl"] = 0--MHilvlDelta

                                table.insert(result, diffItemValueTemplate(MHdelta, nbGemmes))
                                table.insert(result, diffItemValueTemplate(getStatsFromTooltip(lootItem), nbGemmes))
                            end
                        elseif slotStatus[1] and not slotStatus[2] then
                            table.insert(result, diffItemValueTemplate(getStatsFromTooltip(lootItem), nbGemmes))
                            local _, equipedItem, itemEquipRarity = GetItemInfo(charInventory["SecondaryHand"])
                            local itemEquipilvl = GetDetailedItemLevelInfo(charInventory["SecondaryHand"])
                            local delta = getStatsDeltaFromTooltip(lootItem, equipedItem)
                            local ilvlDelta = itemLootilvl - itemEquipilvl
                            delta["ilvl"] = 0--ilvlDelta
                            table.insert(result, diffItemValueTemplate(delta, nbGemmes))
                        else
                            table.insert(result, diffItemValueTemplate(getStatsFromTooltip(lootItem), nbGemmes))
                            table.insert(result, diffItemValueTemplate(getStatsFromTooltip(lootItem), nbGemmes))
                        end
                        -- afficher comparaison avec les 2 slots
                        -- 2 insert
                    elseif itemLootEquipLoc == "INVTYPE_2HWEAPON" or itemLootEquipLoc == "INVTYPE_RANGED" or itemLootEquipLoc == "INVTYPE_RANGEDRIGHT" and slotStatus[2] == false then -- baton / Canne à pêche / hache à 2 main / masse 2 main / épée 2 main AND arc
                        if not slotStatus[1] and not slotStatus[2] then
                            --print("zeub : "..charInventory["MainHand"])
                            local mainHand = getStatsFromTooltip(charInventory["MainHand"])
                            local offHand = getStatsFromTooltip(charInventory["SecondaryHand"])
                            local mainAndOff = {}
                            local lootItemStats = getStatsFromTooltip(lootItem)
                            local delta = {}

                            table.foreach(mainHand, function(k, v)
                                mainAndOff[k] = mainHand[k] + offHand[k]
                            end)

                            table.foreach(mainAndOff, function(k, v)
                                delta[k] = lootItemStats[k] - mainAndOff[k]
                            end)

                            delta["ilvl"] = 0
                            table.insert(result, diffItemValueTemplate(delta, nbGemmes))

                        elseif slotStatus[1] and not slotStatus[2] then
                            local _, equipedItem, itemEquipRarity = GetItemInfo(charInventory["SecondaryHand"])
                            local itemEquipilvl = GetDetailedItemLevelInfo(charInventory["SecondaryHand"])
                            local delta = getStatsDeltaFromTooltip(lootItem, equipedItem)
                            local ilvlDelta = itemLootilvl - itemEquipilvl
                            delta["ilvl"] = 0--ilvlDelta
                            table.insert(result, diffItemValueTemplate(delta, nbGemmes))
                        elseif not slotStatus[1] and slotStatus[2] then
                            local _, equipedItem, itemEquipRarity = GetItemInfo(charInventory["MainHand"])
                            local itemEquipilvl = GetDetailedItemLevelInfo(charInventory["MainHand"])
                            local delta = getStatsDeltaFromTooltip(lootItem, equipedItem)
                            local ilvlDelta = itemLootilvl - itemEquipilvl
                            delta["ilvl"] = 0--ilvlDelta
                            table.insert(result, diffItemValueTemplate(delta, nbGemmes))
                        else
                            table.insert(result, diffItemValueTemplate(getStatsFromTooltip(lootItem), nbGemmes))
                        end
                    elseif itemLootEquipLoc == "INVTYPE_WEAPONMAINHAND" then -- equipable uniquement en main droite (ex : glaive de guerre d'aziznoth)
                        local _, equipedItem, itemEquipRarity = GetItemInfo(charInventory["MainHand"])
                        local itemEquipilvl = GetDetailedItemLevelInfo(charInventory["MainHand"])
                        local delta = getStatsDeltaFromTooltip(lootItem, equipedItem)
                        local ilvlDelta = itemLootilvl - itemEquipilvl
                        delta["ilvl"] = ilvlDelta
                        table.insert(result, diffItemValueTemplate(delta, nbGemmes))
                    elseif itemLootEquipLoc == "INVTYPE_WEAPONOFFHAND" then -- equipable uniquement en main gauche (ex : glaive de guerre d'aziznoth)
                        local _, equipedItem, itemEquipRarity = GetItemInfo(charInventory["SecondaryHand"])
                        local itemEquipilvl = GetDetailedItemLevelInfo(charInventory["SecondaryHand"])
                        local delta = getStatsDeltaFromTooltip(lootItem, equipedItem)
                        local ilvlDelta = itemLootilvl - itemEquipilvl
                        delta["ilvl"] = ilvlDelta
                        table.insert(result, diffItemValueTemplate(delta, nbGemmes))
                    elseif itemLootEquipLoc == "INVTYPE_HOLDABLE" or itemLootEquipLoc == "INVTYPE_SHIELD" then
                        if slotStatus[2] == false then
                            local _, equipedItem, itemEquipRarity = GetItemInfo(tostring(charInventory[GH_Globals.itemSlot[itemLootEquipLoc]]))
                            local itemEquipilvl = GetDetailedItemLevelInfo(tostring(charInventory[GH_Globals.itemSlot[itemLootEquipLoc]]))
                            local delta = getStatsDeltaFromTooltip(lootItem, equipedItem)
                            local ilvlDelta = itemLootilvl - itemEquipilvl
                            delta["ilvl"] = 0--ilvlDelta
                            table.insert(result, diffItemValueTemplate(delta, nbGemmes))
                        elseif slotStatus[1] == false then
                            local _, equipedItem, itemEquipRarity = GetItemInfo(charInventory["MainHand"])
                            local itemEquipilvl = GetDetailedItemLevelInfo(charInventory["MainHand"])
                            local delta = getStatsDeltaFromTooltip(lootItem, equipedItem)
                            local ilvlDelta = itemLootilvl - itemEquipilvl
                            delta["ilvl"] = 0--ilvlDelta
                            table.insert(result, diffItemValueTemplate(delta, nbGemmes))
                        else
                            table.insert(result, diffItemValueTemplate(getStatsFromTooltip(lootItem), nbGemmes))
                        end
                    else
                        if slotStatus[1] == false then -- Si il y a un item equipé
                            if charInventory[GH_Globals.itemSlot[itemLootEquipLoc]] ~= nil then
                                local _, equipedItem, itemEquipRarity = GetItemInfo(tostring(charInventory[GH_Globals.itemSlot[itemLootEquipLoc]]))
                                _, equipedItem, itemEquipRarity = GetItemInfo(tostring(charInventory[GH_Globals.itemSlot[itemLootEquipLoc]]))
                                local itemEquipilvl = GetDetailedItemLevelInfo(tostring(charInventory[GH_Globals.itemSlot[itemLootEquipLoc]]))
                                -- print("------- table slotStatus")
                                -- table.foreach(slotStatus, print)
                                -- print("emplacement : "..itemLootEquipLoc)
                                -- print("equiped item : "..equipedItem)
                                --print("Err02 : "..tostring(GH_Globals.itemSlot[itemLootEquipLoc]))
                                local delta = getStatsDeltaFromTooltip(lootItem, equipedItem)
                                local ilvlDelta = itemLootilvl - itemEquipilvl
                                delta["ilvl"] = 0--ilvlDelta
                                table.insert(result, diffItemValueTemplate(delta, nbGemmes))
                            end
                        else
                            table.insert(result, diffItemValueTemplate(getStatsFromTooltip(lootItem), nbGemmes))
                        end
                    end
                end

            else -- Si l'item n'est pas équipable ou est déjà équipé
                if not test.isEquiped(itemLootLink) and itemLootEquipLoc ~= nil and itemLootEquipLoc ~= "" then
                    --print("equipLoc : "..itemLootEquipLoc)
                    table.insert(result, -100000)
                else
                    --print("pas d'itemLootEquipLoc : "..tostring(itemLootEquipLoc))
                end
            end
            return result
        end
    end
end



-- desc :
-- entrée :
-- sortie :
-- commentaire :
function scanBag()
    bagInventory = {}

    for bag = 0,4 do
        for slot = 1,GetContainerNumSlots(bag) do
            local itemLink = GetContainerItemLink(bag, slot)
            if itemLink ~= nil and test.isEquippableByMe(itemLink) then
                local _, itemString, _, _, _, _, _, _, _, _, _ = GetItemInfo(itemLink)
                table.insert(bagInventory, itemString)
            end
        end
    end

    --suppDot()
    poseDot()

    --[[
    for bag = 20,23 do
        if GetContainerNumSlots(bag) ~= nil then
            for slot = 1,GetContainerNumSlots(bag) do
                local itemLink = GetContainerItemLink(bag, slot)
                --Faire un getinventoryitemid pour tester si y'a bien un item et ensuite GetInventoryItemLinkPers pour recup le lien et non pas l'id de transmog
                if itemLink ~= nil then
                    local _, _, _, _, _, itemType, _, _, itemEquipLoc, _, itemSellPrice = GetItemInfo(itemLink)
                    if itemType == L["armor"] or itemType == L["weapon"] then
                        table.insert(bagInventory, itemLink)
                    end
                end
            end
        end
    end
    ]]--
end

---------------- Empecher si donjon marcheurs du temps    is in instance 		local _, _, difficulty = GetInstanceInfo()
-- desc : Scan bag to equip items if they are better than equipedItems
-- entrée :
-- sortie :
-- commentaire :
function equipItem()
    local name, typeInstance, difficultyIndex, difficultyName, maxPlayers, dynamicDifficulty, isDynamic, mapID = GetInstanceInfo()

    if typeInstance ~= "pvp" and tostring(difficultyIndex) ~= "24" then
        for slot = 1,GetContainerNumSlots(numBag) do
            local itemLink = GetContainerItemLink(numBag, slot)
            if itemLink ~= nil then
                local weightCalcResult = weightCalculation(itemLink)
                if not InCombatLockdown and weightCalcResult[1] ~= nil and weightCalcResult[1] > 0 or weightCalcResult[2] ~= nil and weightCalcResult[2] > 0 then
                    local name, link, _, _, _, itemType, _, _, itemEquipLoc, _, _ = GetItemInfo(itemLink)
                    if itemEquipLoc == "INVTYPE_TRINKET" then
                        if weightCalcResult[1] > weightCalcResult[2]then
                            EquipItemByName(name, 13)
                        else
                            EquipItemByName(name, 14)
                        end
                    elseif itemEquipLoc == "INVTYPE_FINGER" then
                        if weightCalcResult[1] > weightCalcResult[2] then
                            EquipItemByName(name, 11)
                        else
                            EquipItemByName(name, 12)
                        end
                    elseif itemEquipLoc == "INVTYPE_WEAPON" then
                        if weightCalcResult[1] > weightCalcResult[2] then
                            EquipItemByName(name, 16)
                        else
                            EquipItemByName(name, 17)
                        end
                    else
                        EquipItemByName(name)
                    end
                    scanCharacter()
                    if GHVarChar.printWhenEquip then
                        print(itemLink..L["equipVerbose"])
                    end
                elseif InCombatLockdown() then
                    waitEquipTimer = time()
                    waitEquipFrame:Show()
                end
            end
        end
    end
end

-- desc : Create a clickable link to ask a player if he needs what he just loots. (Used in instances)
-- entrée :
-- sortie :
-- commentaire :
function createLinkAskIfHeNeeds(debug, message, sender, language, channelString, target, flags, unknown1, channelNumber, channelName, unknown2, counter)
    local message = message or "|cff1eff00|Hitem:13262::::::::100:105::::::|h[Porte-cendres ma Gueule]|h|r"
    local sender = sender or "sender"
    local language = language or "language"
    local channelString = channelString or "channelString"
    local target = target or GetUnitName("player")
    local flags = flags or "DND"
    local unknown1 = unknown1 or 1
    local channelNumber = channelNumber or 1
    local channelName = channelName or "channelName"
    local unknown2 = unknown2 or 0
    local counter = counter or 1

    if target ~= nil and target ~= GetUnitName("player") and target ~= "" and GHVarChar.askLootRaid or debug == 1 then
        if string.find(string.lower(message), "bonus") == nil or debug == 1 then
            local couleur = ""
            local a, z, class = UnitClass(target)
            local tar

            if class ~= nil and target ~= nil then
                tar = test.couleurClasse(class)..tostring(target).."|r"
            else
                tar = ""
            end
            --local nameLink = "|Hplayer:"..target..":1:WHISPER:"..target.."|h"..tar.."|h"
            local nameLink-- = "|HGHWhispWhenClick:askIfHeNeed-"..target.."-"..link.."|h"..tar.."|h"

            local OldSetItemRef = SetItemRef
            function SetItemRef(link, text, button, chatFrame)
                local func = strmatch(link, "^GHWhispWhenClick:(%a+)")
                if func == "askIfHeNeed" then
                    local _, nomPerso, itLink, persoLink = strsplit("_", link)
                    local _, itLink1 = GetItemInfo(itLink)

                    askIfHeNeed(itLink, nomPerso)
                    if GHVarChar.Debug then
                        print("link :"..itLink)
                        print("target : "..nomPerso)
                        print("nameLink : "..persoLink)
                    end
                else
                    OldSetItemRef(link, text, button, chatFrame)
                end
            end


            for itemLink in message:gmatch("|%x+|Hitem:.-|h.-|h|r") do
                local _, _, quality = GetItemInfo(itemLink)
                if quality ~= nil and quality < 5 or debug == 1 then
                    itemLinkToAsk = itemLink
                    nameLink = test.returnGoodLink(itemLink, target, tar)
                    --print("namelink : "..nameLink)
                    --"|HGHWhispWhenClick:askIfHeNeed_"..target.."_"..itemLink.."_|h"..tar.."|h"
                    --print(L["ask1"]..nameLink..L["ask2"]..itemLink)
                    --PlaySound(5274, "Master")

                    if debug ~= 1 then
                        local weightCalcResult = weightCalculation(itemLink)
                        if weightCalcResult ~= nil then
                            -- if GetUnitName("player") == "Marsgames" or GetUnitName("player") == ("Haelwen") then
                            --     print("Fonction createLinkAskIfHeNeeds() target : "..tostring(target))
                            -- end
                            if #weightCalcResult == 1 then
                                if weightCalcResult[1] > 0 then
                                    UIErrorsFrame:AddMessage(L["ask1"]..nameLink..L["ask2"]..itemLink, 0.0, 1.0, 0.0, 80)
                                    print(L["ask1"]..nameLink..L["ask2"]..itemLink)
                                    PlaySound(5274, "Master")
                                    -- else
                                    -- print("L'item de "..target.." c'est bien de la merde")
                                end
                            else
                                if weightCalcResult[1] ~= nil and weightCalcResult[1] > 0 or weightCalcResult[2] ~= nil and weightCalcResult[2] > 0 then
                                    UIErrorsFrame:AddMessage(L["ask1"]..nameLink..L["ask2"]..itemLink, 0.0, 1.0, 0.0, 80)
                                    print(L["ask1"]..nameLink..L["ask2"]..itemLink)
                                    PlaySound(5274, "Master")
                                    -- else
                                    -- print("L'item de "..target.." c'est bien de la merde")
                                end
                            end
                        end
                    elseif debug == 1 then
                        UIErrorsFrame:AddMessage(L["ask1"]..nameLink..L["ask2"]..itemLink, 0.0, 1.0, 0.0, 80)
                        print(L["ask1"]..nameLink..L["ask2"]..itemLink)
                        PlaySound(5274, "Master")
                    end
                end
            end
        end
    end

    GHVarChar.lastItem = nil
    if GHVarChar.lastItem == nil then
        GHVarChar.lastItem = {}
    end
    GHVarChar.lastItem.message = message
    GHVarChar.lastItem.target = target
    GHVarChar.lastItem.tar = tar
    GHVarChar.lastItem.class = class
    GHVarChar.lastItem.itemLink = itemLink
    GHVarChar.lastItem.itemLinkToAsk = itemLinkToAsk
    GHVarChar.lastItem.nameLink = nameLink

end

-- desc : Parse an item tooltip to return stats (better than Blizzard func)
-- entrée : itemLink
-- sortie : array with all stats and value
-- commentaire :
function getStatsFromTooltip(item)
    local tip = myTooltipFromTemplate or CreateFrame("GAMETOOLTIP", "myTooltipFromTemplate",nil,"GameTooltipTemplate")
    tip:SetOwner(WorldFrame, "ANCHOR_NONE")

    -- if item == nil then
    --     print("on va avoir une erreur") --       nil when first show on tooltip
    -- end
    --if pcall(item ~= nil) then -- ceci est un try / catch
    local itemLink = string.match(item, "item[%-?%d:]+")
    tip:SetHyperlink(itemLink)
    -- else
    --     --print("Err01 : item == nil dans getStatsFromTooltip")
    -- end

    --if tip:NumLines() >= 6 then
    local itemLooted = {}
    for i=1,tip:NumLines() do
        local mytext = _G["myTooltipFromTemplateTextLeft" .. i]
        local text = mytext:GetText()
        if string.find(text, '+') and not string.find(text, "Bonus") and not string.find(text, "Enchanté") and not string.find(text, "à") then
            --print(text)
            local number, stat, j = "", "", 0
            for word in string.gmatch(text, '([^ ]+)') do
                if j == 0 then
                    number = word:match("([^+]+)")
                elseif j == 1 then
                    if string.find(L.stat["Crit"], word) then
                        stat = L.stat["Crit"]
                    else
                        stat = tostring(word)
                    end
                end
                j = j + 1
            end

            --print("stat : "..stat)
            --print("number : "..number)

            number = (number:gsub("[^1234567890]", ""))

            itemLooted[stat] = tonumber(number)
        end
    end

    local tableTemp = {}
    for k, v in pairs(itemLooted) do -- pour chaque element de la liste
        tableTemp[k] = k
    end
    for kk, vv in pairs(L.stat) do
        if not test.isInTable(tableTemp, vv) then
            itemLooted[vv] = 0
        end
    end

    -- local nbItemsZ = 0
    -- local nbItems = 0
    -- table.foreach(itemLooted, function(k, v)
    --     nbItems = nbItems + 1
    --     if v == "0" then
    --         nbItemsZ = nbItemsZ + 1
    --     end
    -- end)

    -- if nbItemsZ == nbItems then
    --     return "table vide"
    -- else

    itemLooted["Bonus"] = nil
    return itemLooted
    -- end
end

-- desc : Return a delta between 2 items, to see which one is better than the other
-- entrée : lootedItem (itemLink), equipedItem(itemLink)
-- sortie : Array
-- commentaire :
function getStatsDeltaFromTooltip(looted, equiped)

    local statsEquiped = getStatsFromTooltip(equiped)
    local statsLooted = getStatsFromTooltip(looted)

    -- print("----------")
    -- print("----------")
    -- table.foreach(statsEquiped, print)
    -- print("----------")
    -- table.foreach(statsLooted, print)
    -- print("----------")
    -- print("----------")

    local deltaTable = {}
    table.foreach(statsEquiped, function(k, v)
        -- print("k : "..k)
        -- print("equiped : "..statsEquiped[k])
        -- print("looted : "..statsLooted[k])
        local numberStatsEquiped = statsEquiped[k]--:gsub("[^1234567890]", "")
        --numberStatsEquiped = tonumber(numberStatsEquiped)
        -- print("equiped : "..numberStatsEquiped)
        local numberStatsLooted = statsLooted[k]--:gsub("[^1234567890]", "")
        --print(numberStatsLooted)
        --numberStatsLooted = tonumber(numberStatsLooted)
        -- print("looted : "..numberStatsLooted)

        if tonumber(numberStatsEquiped) == nil or tonumber(numberStatsLooted) == nil then
            print(cJaune.."please send a mail to marsgamess@gmail.com with : \"Erreur fonction getStatsFromTooltip. Tester avec stuff "..equiped.." et "..looted.."\" Thank you")
            print(cRose.."please send a mail to marsgamess@gmail.com with : \"Erreur fonction getStatsFromTooltip. Tester avec stuff "..equiped.." et "..looted.."\" Thank you")
            print("please send a mail to marsgamess@gmail.com with : \"Erreur fonction getStatsFromTooltip. Tester avec stuff "..equiped.." et "..looted.."\" Thank you")
        end

        -- print("k : "..k)
        -- print("herit : "..numberStatsEquiped)
        -- print("autre : "..numberStatsLooted)
        -- print(numberStatsLooted.." - "..numberStatsEquiped.." = "..numberStatsLooted - numberStatsEquiped)
        if(tostring(numberStatsLooted - numberStatsEquiped) ~= 0) then
            deltaTable[k] = tostring(numberStatsLooted - numberStatsEquiped)
            -- print("==> "..deltaTable[k])
        end

    end)

    --table.foreach(deltaTable, print)
    return deltaTable
end


GameTooltip:HookScript('OnTooltipSetItem', function(self)
    if GHVarChar.addonActivated == true then
        local _, item = self:GetItem()
        if item then
            local _, _, _, _, _, _, _, _, itemEquipLoc = GetItemInfo(item)
            local result = weightCalculation(item)

            --for i = 1, #result do
            --	print(result[i])
            --end

            if #result == 1 then
                if result[1] < 0 then
                    self:AddLine(L["itemLessThanGeneral"])
                elseif result[1] == 0 then
                    self:AddLine(L["itemEgal"])
                elseif result[1] > 0 then
                    self:AddLine(L["itemBetterThanGeneral"]..math.floor(result[1]))
                end
            elseif #result == 2 then
                if itemEquipLoc == "INVTYPE_TRINKET" then
                    if result[1] < 0 then
                        self:AddLine(L["itemLessThan"].." Trinket0")-- avec une valeur de "..math.floor(value))
                    elseif result[1] == 0 then
                        self:AddLine(L["itemEgala"].."Trinket0")
                    else
                        self:AddLine(L["itemBetterThan"].." Trinket0 "..L["itemBetterThan2"]..math.floor(result[1]))
                    end
                    if result[2] < 0 then
                        self:AddLine(L["itemLessThan"].." Trinket1")-- avec une valeur de "..math.floor(value))
                    elseif result[2] == 0 then
                        self:AddLine(L["itemEgala"].."Trinket1")
                    else
                        self:AddLine(L["itemBetterThan"].." Trinket1 "..L["itemBetterThan2"]..math.floor(result[2]))
                    end
                elseif itemEquipLoc == "INVTYPE_FINGER" then
                    if result[1] < 0 then
                        self:AddLine(L["itemLessThan"].." Finger0")-- avec une valeur de "..math.floor(value))
                    elseif result[1] == 0 then
                        self:AddLine(L["itemEgala"].."Finger0")
                    else
                        self:AddLine(L["itemBetterThan"].." Finger0 "..L["itemBetterThan2"]..math.floor(result[1]))
                    end
                    if result[2] < 0 then
                        self:AddLine(L["itemLessThan"].." Finger1")-- avec une valeur de "..math.floor(value))
                    elseif result[2] == 0 then
                        self:AddLine(L["itemEgala"].."Finger1")
                    else
                        self:AddLine(L["itemBetterThan"].." Finger1 "..L["itemBetterThan2"]..math.floor(result[2]))
                    end
                elseif itemEquipLoc == "INVTYPE_WEAPON" then
                    if result[1] < 0 then
                        self:AddLine(L["itemLessThan"]..L["mainD"])-- avec une valeur de "..math.floor(value))
                    elseif result[1] == 0 then
                        self:AddLine(L["itemEgalMainD"])
                    else
                        self:AddLine(L["itemBetterThan"]..L["mainD"]..L["itemBetterThan2"]..math.floor(result[1]))
                    end
                    if result[2] < 0 then
                        self:AddLine(L["itemLessThan"]..L["mainG"])-- avec une valeur de "..math.floor(value))
                    elseif result[2] == 0 then
                        self:AddLine(L["itemEgalMainG"])
                    else
                        self:AddLine(L["itemBetterThan"]..L["mainG"]..L["itemBetterThan2"]..math.floor(result[2]))
                    end
                else
                    self:AddLine(L["itemLessThanGeneral"])
                end
            end
        else
            --print("problème avec cet item")
        end
    end
end)

------------------------------------------------          ----------------------------------------------          ------------------------------------------------
-- xxxxxxx xxxxxxx --      -- xxxxxxx xxxxxxx --          -- xxxxxxx xxxxxxx --      -- xxxxx xxxxxxx --          -- xxxxxxx xxxxxxx --      -- xxxxxxx xxxxxxx --
------------------------------------------------          ----------------------------------------------          ------------------------------------------------
------------------------------------------------
--  Fin fonctions / Début Helper functions --				Pour ceux qui se demandent, oui, je dessine mieux en ASCII que je ne code
------------------------------------------------
------------------------------------------------          ----------------------------------------------          ------------------------------------------------
-- xxxxxxx xxxxxxx --      -- xxxxxxx xxxxxxx --          -- xxxxxxx xxxxxxx --      -- xxxxx xxxxxxx --          -- xxxxxxx xxxxxxx --      -- xxxxxxx xxxxxxx --
------------------------------------------------          ----------------------------------------------          ------------------------------------------------







------------------------------------------------          ----------------------------------------------          ------------------------------------------------
-- xxxxxxx xxxxxxx --      -- xxxxxxx xxxxxxx --          -- xxxxxxx xxxxxxx --      -- xxxxx xxxxxxx --          -- xxxxxxx xxxxxxx --      -- xxxxxxx xxxxxxx --
------------------------------------------------          ----------------------------------------------          ------------------------------------------------
------------------------------------------------
--  Fin Helper functions / Début Slash Commands  --
------------------------------------------------
------------------------------------------------          ----------------------------------------------          ------------------------------------------------
-- xxxxxxx xxxxxxx --      -- xxxxxxx xxxxxxx --          -- xxxxxxx xxxxxxx --      -- xxxxx xxxxxxx --          -- xxxxxxx xxxxxxx --      -- xxxxxxx xxxxxxx --
------------------------------------------------          ----------------------------------------------          ------------------------------------------------
local slashCmdFunc = {
    voidcommand = function(msg)
        print(L["slashCmdInfo"])
    end,
    help = function(msg)
        print(L["configHelpInfo"])
        print(L["stateHelpInfo"])
        print(L["ghversion"])
        print(L["ghim"])
        print(L["helpGHRam"])
        print(cJaune.."reset --> reset GearHelper")
        --print(jaune.."/gh askloot to activate/deactivate option to ask someone if he needs his loot in instance")
    end,
    dhelp = function(msg)
        print(cVert.."help --> affiche l'aide")
        print(cRouge.."state --> affiche l'état de l'addon")
        print(cJaune.."list --> scanBag() + scanCharacter()")
        print(cRose.."config --> affiche le panneau de config")
        print(cVert.."version --> affiche la version de l'addon")
        print(cRouge.."im msg --> change le message d'auto invite par msg")
        print(cJaune.."ram --> affiche la ram utilisée par l'addon")
        print(cRose.."createItemLink --> crée un faux itemLink (qui marche)")
        print(cJaune.."debug --> active / désactive le mode debug (prints)")
        print(cVert.."optimize --> calcul le stuff le plus opti ?")
        print(cRouge.."save --> crée un equipmentSet")
        print(cJaune.."equip --> équipe l'equipementSet précédement crée")
        print(cRose.."remove --> supprime l'equipmentSet précédement crée")
        print(cVert.."askloot --> active / désactive l'option pour annoncer les loots mieux que les notres en instance")
        print(cRouge.."dot --> affiche les icones des \"meilleurs items\" sur les icones des stuffs")
        print(cJaune.."suppdot --> supprime les icones de \"meilleurs item\" sur les icones des stuffs")
        print(cRose.."cw --> print la specID + la table contenant les custom weights")
        print(cVert.."eccip --> equip le meilleur stuff des sacs")
        print(cRouge.."ain --> test la fonction Ask If He Needs")
        print(cJaune.."reset --> reset GearHelper")
    end,
    state = function(msg)
        local etatAddon = nil
        local etatSellGrey = nil
        local etatAutoGreed = nil
        local etatAutoAcceptQuestReward = nil
        local etatAutoNeed = nil
        local etatAutoEquipInstanceLootStuff = nil
        local etatAutoEquipWhenChangeSpe = nil
        local etatAutoInvite = nil
        local etatAutoTell = nil

        if GHVarChar.sellGrey then
            etatSellGrey = L["activeeVert"]
        else
            etatSellGrey = L["desactiveeRouge"]
        end

        if GHVarChar.autoGreed then
            etatAutoGreed = L["activeeVert"]
        else
            etatAutoGreed = L["desactiveeRouge"]
        end

        if GHVarChar.autoAcceptQuestReward then
            etatAutoAcceptQuestReward = L["activeeVert"]
        else
            etatAutoAcceptQuestReward =L["desactiveeRouge"]
        end

        if GHVarChar.autoNeed then
            etatAutoNeed = L["activeeVert"]
        else
            etatAutoNeed = L["desactiveeRouge"]
        end

        if GHVarChar.autoEquipLootedStuff then
            etatAutoEquipInstanceLootStuff = L["activeeVert"]
        else
            etatAutoEquipInstanceLootStuff = L["desactiveeRouge"]
        end

        if GHVarChar.autoEquipWhenChangeSpe then
            etatAutoEquipWhenChangeSpe = L["activeeVert"]
        else
            etatAutoEquipWhenChangeSpe = L["desactiveeRouge"]
        end

        if GHVarChar.autoInvite then
            etatAutoInvite = L["activeeVert"]
        else
            etatAutoInvite = L["desactiveeRouge"]
        end

        if GHVarChar.autoTell then
            etatAutoTell = L["activeeVert"]
        else
            etatAutoTell = L["desactiveeRouge"]
        end


        if GHVarChar.addonActivated then
            etatAddon = "|cFF00FF00activé|r"    ---------- METTRE LES TRADUCTION
        else
            etatAddon = "|cFFFF0000désactivé|r"     ------------- PAREIL
            etatSellGrey = L["desactiveeRouge"]
            etatAutoGreed = L["desactiveeRouge"]
            etatAutoAcceptQuestReward = L["desactiveeRouge"]
            etatAutoNeed = L["desactiveeRouge"]
            etatAutoEquipInstanceLootStuff = L["desactiveeRouge"]
            etatAutoEquipWhenChangeSpe = L["desactiveeRouge"]
            etatAutoInvite = L["desactiveeRouge"]
        end

        ------------------------- Rajouter réparation + minimap button
        if etatAutoGreed ~= nil and etatAddon ~= nil and etatSellGrey ~= nil and etatAutoAcceptQuestReward ~= nil and etatAutoNeed ~= nil and etatAutoEquipInstanceLootStuff ~= nil and etatAutoEquipWhenChangeSpe ~= nil then
            print(L["state1"]..etatAddon..L["state2"]..etatSellGrey..L["state3"]..etatAutoGreed..L["state4"]..etatAutoAcceptQuestReward..L["state5"]..etatAutoNeed..L["state6"]..etatAutoEquipInstanceLootStuff..L["state7"]..etatAutoEquipWhenChangeSpe..L["state8"]..etatAutoInvite..L["state9"]..etatAutoTell.."|cFFFFFF00.|r")
        else
            print(L["stateError"])
        end
    end,
    list = function(msg)
        scanBag()
        scanCharacter()
    end,

    config = function(msg)
        InterfaceOptionsFrame_OpenToCategory(frameInterface)
        InterfaceOptionsFrame_OpenToCategory(frameInterface)
    end,
    version = function(msg)
        print("|cFF00FF00GearHelper|r|cFFFFFF00 version : "..version)
    end,
    im = function(msg)
        setInviteMessage(tostring( msg:sub(4) ))
    end,
    ram = function(msg)
        local ramExact = tonumber(GetAddOnMemoryUsage("GearHelper"))
        local ramUse = tonumber(string.format("%.0f", ramExact))
        print("RAM used by GearHelper : "..ramUse.."ko")
    end,
    createitemlink = function(msg)
        --askIfHeNeed("Marsgames", "[Pierre de soin]", "Marsgames")
        local aze = "|cff1eff00|Hitem:128942::::::::100:105::::::|h[/gh createItemLink]|h|r"
        print(aze)
        print("test.isEquiped = "..tostring(test.isEquiped(aze)))
        print("test.isPossibleEquip = ".. tostring(test.isPossibleEquip(aze)))
        table.foreach(weightCalculation(aze), print)
    end,
    il = function(msg)
        local equiped = "|cff1eff00|Hitem:40018::::::::100:105::::::|h[Ulthalesh]|h|r"
        --local looted = "|cff1eff00|Hitem:71086::::::::100:105::::::|h[Tarecogosa]|h|r"

        --getStatsDeltaFromTooltip(equiped, looted)

        --print(getStatsFromTooltip(equiped))
        table.foreach(getStatsFromTooltip(equiped), print)

        --/script GameTooltip:SetHyperlink("item:16846:0:0:0:0:0:0:0")

    end,
    debug = function(msg)
        if GHVarChar.Debug == false or GHVarChar.Debug == nil then
            GHVarChar.Debug = true
            print(cVert.."GEARHELPER DEBUG MODE ON")
        elseif GHVarChar.Debug == true then
            GHVarChar.Debug = false
            print(cRouge.."GEARHELPER DEBUG MODE OFF")
        end
    end,
    stat = function(msg)
        for k, v in pairs(GHVar.customWeights[specialisationID]) do
            print(k.."     "..v)
        end
    end,
    optimize = function(msg)
        scanBag()
        scanCharacter()
        local tabEquipLoc = {}
        local tabItemMeta = {}
        local idItemTypeExist = 0
        for a = 1, #bagInventory do
            local _, itemLink, _, _, _, _, _, _, itemEquipLoc = GetItemInfo(bagInventory[a])
            local itemTypeExist = false

            for b = 0, #tabEquipLoc do
                if itemEquipLoc == tabEquipLoc[b] then
                    idItemTypeExist = b
                    itemTypeExist = true
                end
            end
            if itemTypeExist == false then
                table.insert(tabEquipLoc, itemEquipLoc)
                table.insert(tabEquipLoc, 1)
                local tabItem = {}

                table.insert(tabItem, itemLink)
                table.insert(tabItemMeta, itemEquipLoc)
                table.insert(tabItemMeta, tabItem)
            else
                tabEquipLoc[idItemTypeExist+1] = tabEquipLoc[idItemTypeExist+1] + 1
                local tmpTab = tabItemMeta[idItemTypeExist+1]
                table.insert(tmpTab, itemLink)
                tabItemMeta[idItemTypeExist+1] = tmpTab
            end
        end

        for a = 1, #tabItemMeta do
            if a%2 == 0 then
                local v = tabItemMeta[a]
                for b = 1, #v do
                    print(v[b])
                end
            else
                print(tabItemMeta[a])
            end
        end
        local stuffBefore = charInventory
        --SaveEquipmentSet("zeubi", 1029009)
        --print(GetEquipmentSetInfoByName("zeubzeub"))

        for a = 1, #bagInventory do
            local _, _, _, _, _, _, _, _, itemEquipLoc = GetItemInfo(bagInventory[a])
            if itemEquipLoc ~= "INVTYPE_WEAPON" and itemEquipLoc ~= "INVTYPE_2HWEAPON" and itemEquipLoc ~= "INVTYPE_FINGER" and itemEquipLoc ~= "INVTYPE_TRINKET" then
                print("On test "..bagInventory[a])

                local exItem = stuffBefore[GH_Globals.itemSlot[itemEquipLoc]]
                local _, _, Color, Ltype, Id, Enchant, Gem1, Gem2, Gem3, Gem4, Suffix, Unique, LinkLvl, Name = string.find(exItem,"|?c?f?f?(%x*)|?H?([^:]*):?(%d+):?(%d*):?(%d*):?(%d*):?(%d*):?(%d*):?(%-?%d*):?(%-?%d*):?(%d*):?(%d*):?(%-?%d*)|?h?%[?([^%[%]]*)%]?|?h?|?r?")
                --EquipItemByName(bagInventory[a])
                --[[print(GetCombatRating(11)) --Critique
                print(GetCombatRating(17)) --Ponction
                print(GetCombatRating(20)) --Hate
                print(GetCombatRating(26)) --Maitrise
                print(GetCombatRating(29)) --Polyvalence
                print(GetCombatRating(21)) --Evitement]]--
                print("On replace "..exItem)
                --EquipItemByName(Id)
            end
        end
        waitEquipTimer = time()
        waitEquipFrame:Show()
        --UseEquipmentSet("zeubzeub")
        --DeleteEquipmentSet("zeubzeub")
    end,
    save = function(msg)
        SaveEquipmentSet("GHEquip", 769) -- Saves the currently equipped items in a set.
    end,
    equip = function(msg)
        UseEquipmentSet("GHEquip") -- Equips an equipment set.
    end,
    remove = function(msg)
        DeleteEquipmentSet("GHEquip") -- Forgets an equipment set.
    end,
    askloot = function(msg)
        if GHVarChar.askLootRaid == true then
            setGHAskLootRaid(false)
        else
            setGHAskLootRaid(true)
        end
    end,
    dot = function(msg)
        poseDot()
    end,
    -- suppdot = function(msg)
    --     -- suppDot()
    --     -- print("supp")
    -- end,
    cw = function(msg)
        print(specID)
        print(GHVar.customWeights[specID])
    end,
    eccip = function(msg)
        waitEquipTimer = time()
        waitEquipFrame:Show()
    end,
    ain = function()
        createLinkAskIfHeNeeds(1)
    end,
    reset = function(msg)
        for k, v in pairs(GHVarChar) do
            GHVarChar[k] = nil
            --print(k.." : "..tostring(GHVarChar[k]))
        end
        setDefault()
    end,
    aze = function(msg)
        createLinkAskIfHeNeeds(1)

        local used = false
        for i = 1, NUM_CHAT_WINDOWS do
            local name, fontSize, r, g, b, alpha, shown, locked, docked, uninteractable = GetChatWindowInfo(i);
            if(uninteractable) then
                SetChatWindowUninteractable(i, false)
                used = true
            end
        end
        if used then
            ReloadUI()
        end
    end,
    reload = function(msg)
        ReloadUI()
    end,
    testdelta = function(msg)
        local aze = {}
        local testA
        local equiped = "|cff1eff00|Hitem:128942::::::::100:105::::::|h[Ulthalesh]|h|r"
        local looted = "|cff1eff00|Hitem:71086::::::::100:105::::::|h[Tarecogosa]|h|r"

        aze = GetItemStatDelta(looted, equiped, testA)

        local tab = {}
        tab = getStatsDeltaFromTooltip(looted, equiped)
        table.foreach(tab, print)
        print("++++++++++++++++++++")
        table.foreach(aze, print)
        print("--------------------")
    end,
    jb = function(msg)
        local itemLink = GetContainerItemLink(1, 14)
        --print(itemLink)
        local aze = weightCalculation(itemLink)

        table.foreach(aze, print)
    end,
    feet = function(msg)
        --local _, equipedItem, itemEquipRarity = GetItemInfo(tostring(charInventory[GH_Globals.itemSlot[itemLootEquipLoc]]))
        local _, equipedItem, itemEquipRarity = GetItemInfo(132455)
        print(equipedItem)
    end,
}

-- Activation de /cmd
local cmd1 = "/gh"
local cmd2 = "/gearhelper"
SLASH_GEARHELPER1 = cmd1:lower()
SLASH_GEARHELPER2 = cmd2:lower()
-- Fin d'activation des /cmd

-- Déclaration des /cmd
SlashCmdList["GEARHELPER"] = function ( msg )
    local instruction = msg:match("%a+")
    if instruction then
        instruction = instruction:lower()
    end
    if msg == "" then
        InterfaceOptionsFrame_OpenToCategory(frameInterface)
        InterfaceOptionsFrame_OpenToCategory(frameInterface)
    elseif slashCmdFunc[instruction] then
        slashCmdFunc[instruction](msg)
    else
        slashCmdFunc["voidcommand"](msg)
    end
    --end
end
-- Fin déclaration des /cmd


function askIfHeNeed(link, sendTo )
    local a, z, class = UnitClass(sendTo)
    local _, itemLink = GetItemInfo(link)
    local lienPerso = tostring(test.couleurClasse(class))..tostring(sendTo).."|r"
    StaticPopupDialogs["AskIfHeNeed"] = {
        text = L["demande1"]..lienPerso..L["demande2"]..itemLink.." ?",
        button1 = L["yes"],
        button2 = L["no"],
        OnAccept = function (self, data, data2)
            local LibRealmInfo = LibStub:GetLibrary("LibRealmInfo")
            local _, _, _, _, unitLocale = LibRealmInfo:GetRealmInfoByUnit(sendTo)
            --local unitLocale = "frFR"
            local theSource = "demande4"..unitLocale
            local theSource2 = "demande4"..unitLocale.."2"
            local msg = L[theSource]..itemLink..L[theSource2].."?" ~= nil and L[theSource]..itemLink..L[theSource2].."?" or L["demande4enUS"]..itemLink..L["demande4enUS2"].."?"
            -- if msg == nil then
            --     msg = L["demande4enUS"]
            -- end
            local rep = "rep"..unitLocale
            local rep2 = "rep"..unitLocale.."2"
            local msgRep = L[rep]..L["maLangue"]..L[rep2] ~= nil and L[rep]..L["maLangue"]..L[rep2] or L["repenUS"]..L["maLangue"]

            -- if msgRep == nil then
            --     msgRep = L["repenUS"]..L["maLangue"]
            -- end
            -- if unitLocale == "deDE" then
            --     SendChatMessage(msg..itemLink..L["demande4deDE2"].." ?", "WHISPER", "Common", sendTo)
            -- else
            SendChatMessage(msg, "WHISPER", "Common", sendTo)
            SendChatMessage(msgRep, "WHISPER", "Common", sendTo)
            -- end
            StaticPopup_Hide("AskIfHeNeed")
        end,
        timeout = 0,
        whileDead = true,
        hideOnEscape = true,
        preferredIndex = 3,  -- avoid some UI taint, see http://www.wowace.com/announcements/how-to-avoid-some-ui-taint/
    }
    StaticPopup_Show("AskIfHeNeed")
end

------------------------------------------------          ----------------------------------------------          ------------------------------------------------
-- xxxxxxx xxxxxxx --      -- xxxxxxx xxxxxxx --          -- xxxxxxx xxxxxxx --      -- xxxxx xxxxxxx --          -- xxxxxxx xxxxxxx --      -- xxxxxxx xxxxxxx --
------------------------------------------------          ----------------------------------------------          ------------------------------------------------
------------------------------------------------
--  Fin Slash Commands / Début Event handler  --
------------------------------------------------
------------------------------------------------          ----------------------------------------------          ------------------------------------------------
-- xxxxxxx xxxxxxx --      -- xxxxxxx xxxxxxx --          -- xxxxxxx xxxxxxx --      -- xxxxx xxxxxxx --          -- xxxxxxx xxxxxxx --      -- xxxxxxx xxxxxxx --
------------------------------------------------          ----------------------------------------------          ------------------------------------------------

-- Se déclenche quand les addons se chargent
function allEvents:ADDON_LOADED( name )
    --print(name.." - "..addonName)
    if name == addonName then
        --print("1")
        -- charge le préfix de l'addon (ou un truc du genre)
        RegisterAddonMessagePrefix(prefixAddon)

        --print("2")

        --print(L["merci"])

        -- Active l'addon par défaut lors de la première connexion après l'installation
        if GHVarChar.addonActivated == nil or GHVarChar.sellGrey == nil or GHVarChar.autoGreed == nil or GHVarChar.autoAcceptQuestReward == nil or GHVarChar.autoNeed == nil or GHVarChar.autoEquipLootedStuff == nil or GHVarChar.autoEquipWhenChangeSpe == nil or GHVarChar.AMR == nil or GHVarChar.minimapButton == nil or GHVarChar.autoRepair == nil or GHVar.inviteMessage == nil or GHVarChar.autoInvite == nil or GHVarChar.autoTell == nil or GHVarChar.ancienStatusAutoEquipLoot == nil or GHVarChar.askLootRaid == nil or GHVarChar.printWhenEquip == nil then
            waitNilTimer = time()
            waitNilFrame:Show()
        end



        --print("3")


        --print("4 : GHVarChar.addonActivated --> "..tostring( GHVarChar.addonActivated ))
        -- Affiche à chaque connection l'état de l'addon
        if GHVarChar.addonActivated == true then
            print(L["setOn"])
            --sendAskVersion()
        else
            print(L["setOff"])
        end

        --print("5")

        print(L["merci"])

        --startState = GHVarChar.addonActivated
        --print(tostring(startState))

        if GHVarChar.lastItem ~= "" and GHVarChar.lastItem ~= nil then
            C_Timer.After(10, function()
                createLinkAskIfHeNeeds(0, GHVarChar.lastItem.message, nil, nil, nil, GHVarChar.lastItem.target)
                GHVarChar.lastItem = ""
            end)
        end

    end
end

-- Se déclenche quand un message d'addon arrive
function allEvents:CHAT_MSG_ADDON( prefixMessage, message, channel, sender )
    if prefixMessage == prefixAddon then
        if sender:find("-")then
            local emeteur = sender:sub(0, (sender:find("-") - 1))
        else
            local emeteur = sender
        end
        if GHVarChar.addonActivated == true then
            if emeteur ~= GetUnitName("player") then
                local prefVersion = message:sub(0, (message:find(";") - 1))
                if prefVersion == "answerVersion" then
                    local vVersion = message:sub(message:find(";")+1, #message)
                    versionCible = vVersion
                    receiveAnswer(vVersion, sender)
                end
                if prefVersion == "askVersion" then
                    sendAnswerVersion()
                end
            end
        end
    end

    local emeteur
    local myName = GetUnitName("player")
    if sender:find("-")then
        emeteur = sender:sub(0, (sender:find("-") - 1))
    end

    --[[
    if IAmMarsgames == "Marsgames" and prefixMessage == "GHForMGTN" and (emeteur ~= myName and sender ~= "Tempaxe-Templenoir") then
    print(message)
end
]]--
end

-- Quand un objet attérie dans l'inventaire --bag : 0, 1, 2, 3 ou 4
function allEvents:ITEM_PUSH( bag, icone )
    if GHVarChar.addonActivated then
        scanCharacter()
        scanBag()

        -- if bagIsOpen then
        --     suppDot()
        --     poseDot()
        --     ToggleBag()
        -- else
        --     dotIsOn = false
        -- end
        -- needToRefresh = true
        -- ContainerFrame_UpdateAll()

    end

    if GHVar.Debug then print("bag : "..bag) end      --------------------        DEBUG MODE        --------------------

    if GHVarChar.autoEquipLootedStuff then
        if bag == 23 then
            numBag = 4
        elseif bag == 22 then
            numBag = 3
        elseif bag == 21 then
            numBag = 2
        elseif bag == 20 then
            numBag = 1
        else
            numBag = bag
        end

        if GHVar.Debug then print("numBag : "..numBag) end      --------------------        DEBUG MODE        --------------------

        waitEquipTimer = time()
        waitEquipFrame:Show()
    end
end

-- function allEvents:BAG_OPEN(bagID)
--     print("coucou")
--     bagIsOpen = true
--     if not dotIsOn and GHVarChar.addonActivated then
--         poseDot()
--     end
-- end
-- function allEvents:BAG_CLOSED()
--     bagIsOpen = false
-- end

-- Evenement se déclenche quand on arrive sur la page de la quête terminée (la ou il faut choisir la récompense)
function allEvents:QUEST_COMPLETE()
    local nbRecompenses = GetNumQuestChoices()
    local weightTable = {}
    local prixTable = {}
    local altTable = {}

    if GHVarChar.autoAcceptQuestReward then
        if GetNumQuestChoices() < 1 then --and GetQuestItemLink("choice", 1) ~= nil then
            GetQuestReward()
        elseif GetNumQuestChoices() == 1 then
            GetQuestReward(1)
        else
            local objetI = GetQuestItemLink("choice", 1)

            for i = 1, GetNumQuestChoices() do
                objetI = GetQuestItemLink("choice", i)
                local _, _, _, _, _, typeI, subTypeI = GetItemInfo(objetI)
                if typeI ~= L["armor"] and typeI ~= L["weapon"] then
                    do return end
                end
                local res = weightCalculation(objetI)
                if res[1] ~= nil and res[1] > 0 or res[2]~= nil and res[2] > 0 then
                    if res[1] > 0 then
                        table.insert(weightTable, res[1])
                    else
                        table.insert(weightTable, res[2])
                    end
                else
                    table.insert(weightTable, -10)

                    table.insert(prixTable, itemSellPrice1)
                    table.insert(altTable, itemSellPrice1, objetI)
                end
            end

            local maxWeight = weightTable[1]
            local keyWeight = 1
            local maxPrix = prixTable[1]
            local keyPrix = 1

            for i = 1, #weightTable do
                if weightTable[i] > maxWeight then
                    maxWeight = weightTable[i]
                    keyWeight = i
                end
            end

            for i = 1, #prixTable do
                if prixTable[i] > maxPrix then
                    maxPrix = prixTable[i]
                    keyPrix = i
                end
            end



            local prixTriee = prixTable
            table.sort( prixTriee )


            if typeI == ilFautNeed.monture or typeI == ilFautNeed.mascotte or subTypeI == ilFautNeed.monture or subTypeI == ilFautNeed.mascotte then
                do return end
            end

            for k, v in pairs( nePasNeed ) do
                if typeI == v or subTypeI == v then
                    do return end
                end
            end
        end

        if subTypeI ~= nil and subTypeI ~= L["reliqueAP"] and (typeI ~= "Gemme" and typeI ~= "Gem") then
            if maxWeight > 0 then
                GetQuestReward(keyWeight) -- normalement c'est bon
                do return end
            end
            GetQuestReward(keyPrix) -- normalement c'est bon
        end
    end
end

-- Evenement se déclenche à chaque écran de  ment
function allEvents:PLAYER_ENTERING_WORLD()

    specID, _, _, _, _, _ = GetSpecializationInfo(GetSpecialization(), false, false, GetUnitName("player"), UnitSex("player"))
    if GHVarChar.AMR == nil or GHVarChar.AMR == 10000 then
        GHVarChar.AMR = 1000                                -- A supprimer
        templateWeight = GH_Globals[specID + GHVarChar.AMR] -- A supprimer
        --templateWeight = GHVarChars.customWeights[specID]
    else
        templateWeight = GH_Globals[specID + GHVarChar.AMR]
    end

    ui.UIGearHelper()
    if GHVarChar.addonActivated == true then
        specialisationID, specName, description, icon, background, role, primaryStat = GetSpecializationInfo(GetSpecialization(), false, false, GetUnitName("player"), UnitSex("player"))
        sendAskVersion()
        scanCharacter()
        scanBag()
        --poseDot()
        --print(L["merci"])
    end

    if GHVarChar.minimapButton then
        --MyMod_MinimapButton:Show()  ---------------------------------------   ENLEVER COMMENT QUAND ON REMET BOUTON MINIMAP ---------------------------------------
    else
        -- MyMod_MinimapButton:Hide()  ---------------------------------------   ENLEVER COMMENT QUAND ON REMET BOUTON MINIMAP ---------------------------------------
        -- MyMod_MinimapButton:Hide()  ---------------------------------------   ENLEVER COMMENT QUAND ON REMET BOUTON MINIMAP ---------------------------------------
    end

end


-- Evenement se déclanche quand la fenêtre besoin/cupi pop en donjon
function allEvents:START_LOOT_ROLL(number, timer)
    -- classeEN est la même, quelle que soit la langue du client
    --local classeFR, classeEN, classeNumber = UnitClass("player")
    local link, name, _, _, bindOnPickUp, canNeed, canGreed  = GetLootRollItemInfo(number)
    local _, _, _, _, _, itemType, itemSubType = GetItemInfo(link)

    -- number = ID de l'id du roll (1, 2, 3)
    -- rollType = 0 pass, 1 need, 2 cupi, 3 dez
    -- ConfirmLootRoll(number, rollType)

    local weightCalcResult = weightCalculation(link)

    scanCharacter()

    if canNeed then
        if GHVarChar.autoNeed then
            if itemType == L["armor"] or itemType == L["weapon"] then
                if weightCalcResult[1] ~= nil then
                    print("weightCalcResult[1] : "..weightCalcResult[1])
                else
                    print("weightCalcResult[1] nil")
                    print(weightCalcResult)
                end
                if weightCalcResult[2] ~= nil then
                    print("weightCalcResult[2] : "..weightCalcResult[2])
                else
                    print("weightCalcResult[2] nil")
                    print(weightCalcResult)
                end

                if (weightCalcResult[1] ~= nil and weightCalcResult[1] > 0) or (weightCalcResult[2] ~= nil and weightCalcResult[2] > 0) then
                    --ConfirmLootRoll(number, 1)
                    print("J'ai need 1 "..name)
                    UIErrorsFrame:AddMessage(L["iNeededOn"]..name, 0.0, 1.0, 0.0, 150)          -----------          DEBUG MODE        -----------
                elseif GHVarChar.autoGreed then
                    print("J'ai cupi 2 "..name)
                    --ConfirmLootRoll(number, 2)
                end
            elseif itemType == ilFautNeed.monture or itemType == ilFautNeed.mascotte then
                --ConfirmLootRoll(number, 1)
                print("J'ai need 3 "..name)
                UIErrorsFrame:AddMessage(L["iNeededOn"]..name, 0.0, 1.0, 0.0, 80)
            end
        end
    elseif canGreed then
        if GHVarChar.autoGreed then
            for k, v in pairs( nePasNeed ) do
                if itemType == v or itemSubType == v then
                    do return end
                end
            end
            --print("J'ai cupi 4 "..name)      ---------------------------- DEBUG1662 décommenter cette ligne
            ConfirmLootRoll(number, 2)
        end
    end
end

-- Evenement se déclenche quand on ouvre la fenetre d'un vendeur
function allEvents:MERCHANT_SHOW()
    gagne = 0
    if GHVarChar.sellGrey then
        for bag = 0, 4 do
            for slot = 1,GetContainerNumSlots(bag) do
                if GetContainerItemID(bag, slot) ~= nil then
                    id = GetContainerItemID(bag, slot)
                    if id then
                        result = test.SiObjetGris(id)
                        if result[1] then
                            UseContainerItem(bag, slot)
                            gagne = gagne + result[2]
                        end
                    end
                end
            end
        end
    end

    if CanMerchantRepair() and GHVarChar.autoRepair > 0 then
        local argentPossedee = GetMoney()
        local prix = GetRepairAllCost()
        if IsInGuild() and CanGuildBankRepair() then
            local droitGuilde = GetGuildBankWithdrawMoney()
            local argentGuilde = GetGuildBankMoney()
        end
        if prix > 0 then
            if GHVarChar.autoRepair == 1 then
                if argentPossedee >= prix then
                    RepairAllItems(false)
                    print(cRose..L["repairCost"]..math.floor(prix/10000)..L["dot"]..math.floor((prix % 10000) / 100)..L["gold"])
                else
                    print(L["CantRepair"])
                end
            elseif GHVarChar.autoRepair == 2 then
                if droitGuilde ~= nil and (droitGuilde == -1 or (droitGuilde > argentGuilde and argentGuilde > prix)) then
                    RepairAllItems(true)
                    print(cRose..L["guildRepairCost"]..math.floor(prix/10000)..L["dot"]..math.floor((prix % 10000) / 100)..L["gold"])
                else
                    if argentPossedee >= prix then
                        RepairAllItems(false)
                        print(cRose..L["repairCost"]..math.floor(prix/10000)..L["dot"]..math.floor((prix % 10000) / 100)..L["gold"])
                    else
                        print(L["CantRepair"])
                    end
                end
            end
        end
    end

    --pour tous les sacs du jour
    -- pour tous les items du sac
    -- argentDépart += prixItem
    --end
    --end
    for bag = 0,4 do
        for slot = 1,GetContainerNumSlots(bag) do
            if GetContainerItemID(bag, slot) ~= nil then
                local _, itemCount = GetContainerItemInfo(bag, slot)
                id = GetContainerItemID(bag, slot)
                if id then
                    _, _, _, _, _, _, _, _, _, _, vendorPrice = GetItemInfo(id)
                    if vendorPrice ~= nil then
                        gagne = gagne + (vendorPrice * itemCount)
                    end
                end
            end
        end
    end
end



function allEvents:MERCHANT_CLOSED( ... )
    if GHVarChar.sellGrey then
        local argentFin = 0
        for bag = 0,4 do
            for slot = 1,GetContainerNumSlots(bag) do
                if GetContainerItemID(bag, slot) ~= nil then
                    local _, itemCount = GetContainerItemInfo(bag, slot)
                    id = GetContainerItemID(bag, slot)
                    if id then
                        _, _, _, _, _, _, _, _, _, _, vendorPrice = GetItemInfo(id)
                        argentFin = argentFin + (vendorPrice * itemCount)
                    end
                end
            end
        end
        if(gagne - argentFin > 0) then
            print(cVert..L["moneyEarned"]..math.floor((gagne - argentFin)/10000)..L["dot"]..math.floor(((gagne - argentFin) % 10000) / 100)..L["gold"])
            gagne = 0
        end
    end
end

function allEvents:BAG_UPDATE( bagID )
    poseDot()
end

-- Se déclenche au changement de spé
function allEvents:ACTIVE_TALENT_GROUP_CHANGED()
    if GHVarChar.autoEquipWhenChangeSpe then
        waitSpeTimer = time()
        waitSpeFrame:Show()
    end
end

function allEvents:CHAT_MSG_CHANNEL( msg, sender, _, _, _, _, _, channelNumber )
    --print("sender : "..sender.."\nsender class : "..tostring(UnitClass(sender)))
    if GHVarChar.autoInvite then
        local playerIsNotMe = not string.find(sender, GetUnitName("player"))
        if msg:lower() == GHVar.inviteMessage:lower() and playerIsNotMe and GetNumGroupMembers() == 5 then
            ConvertToRaid()
            InviteUnit(sender)
        elseif msg:lower() == GHVar.inviteMessage:lower() and playerIsNotMe then
            InviteUnit(sender)
        end
    end
end

function allEvents:CHAT_MSG_WHISPER(msg, sender)
    if GHVarChar.autoInvite then
        local playerIsNotMe = not string.find(sender, GetUnitName("player"))
        if msg:lower() == GHVar.inviteMessage:lower() and playerIsNotMe and GetNumGroupMembers() == 5 then
            ConvertToRaid()
            InviteUnit(sender)
        elseif msg:lower() == GHVar.inviteMessage:lower() and playerIsNotMe then
            InviteUnit(sender)
        end
    end
end

function allEvents:GET_ITEM_INFO_RECEIVED(itemId)
    local name, link = GetItemInfo(itemId)
    --print(link.." is now cached")
    --print("item info received")
    --weightCalculation(itemId)
end




--Si en raid nm, hm ou mm
--Si je suis RL
--Si Butin de groupe ?
----------------------------------------- A ETUDIER
--function allEvents:LOOT_OPENED()
--	if GHVarChar.autoTell then
--		local count = 1
--		local inInstance, instanceType = IsInInstance()
--		local _, _, difficulty = GetInstanceInfo()
--		--if inInstance and instanceType == "raid" then
--		-- 3 4 5 6 8 9 11 14 15 16 18 19 20 23
--			if difficulty == 3 or difficulty == 4 or difficulty == 5 or difficulty == 6 or difficulty == 8 or difficulty == 9 or difficulty == 11 or difficulty == 14 or difficulty == 15 or difficulty == 16 or difficulty == 18 or difficulty == 19 or difficulty == 20 or difficulty == 23 then
--				-- vérifier qu'on soit en maitre du butin
--				if UnitIsGroupLeader("player") then
--					for i = 1, GetNumLootItems() do 		-- pour tous les items de la fenetre
--						if GetLootSlotType(i) == 1 then 	-- si le loot est un stuff
--							local texture, item, quantity, quality, locked = GetLootSlotInfo(i)
--							if quality >= 4 then 			-- regarder la qualité
--								local _, link, _, iLevel = GetItemInfo(item)
--								-- si c'est épique ou + l'afficher
--								--SendChatMessage("["..count.."] : "..link.."   ("..tostring(iLevel)..")", "RAID")
--								count = count + 1
--							end
--						end
--					end
--				--end
--				end
--			end
--		--end
--	end
--end




function allEvents:CHAT_MSG_LOOT(message, sender, language, channelString, target, flags, unknown1, channelNumber, channelName, unknown2, counter)
    --print("Message : "..message.."\nsender : "..sender.."\ntarget : "..target.."\nflags : "..flags.."\nunknown1 : "..unknown1.."\nunknown2 : "..unknown2.."\ncounter : "..counter)

    createLinkAskIfHeNeeds(0, message, sender, language, channelString, target, flags, unknown1, channelNumber, channelName, unknown2, counter)

    local used = false
    for i = 1, NUM_CHAT_WINDOWS do
        local name, fontSize, r, g, b, alpha, shown, locked, docked, uninteractable = GetChatWindowInfo(i);
        if(uninteractable) then
            SetChatWindowUninteractable(i, false)
            used = true
        end
    end
    if used then
        ReloadUI()
    end
end


-- Appellé quand le stuff du joueur est changé ou quand le stuff du perso qu'il est en train d'inspecter est changé
-- fired when player change stuff --> if we haven't a fishing rod equiped we change stuff
function allEvents:UNIT_INVENTORY_CHANGED(joueur)
    if GHVarChar.addonActivated and joueur == "player" then
        scanCharacter()
        scanBag()
        if GetInventoryItemLink("player",GetInventorySlotInfo("MainHandSlot")) ~= nil then
            local _, _, _, _, _, _, subclass  = GetItemInfo(GetInventoryItemLink("player",GetInventorySlotInfo("MainHandSlot")))
            if subclass == L["cannapeche"] then
                GHVarChar.autoEquipLootedStuff = false
            else
                GHVarChar.autoEquipLootedStuff = GHVarChar.ancienStatusAutoEquipLoot
            end
        end
    end
end

function allEvents:QUEST_TURNED_IN( ... )
    if GHVarChar.autoEquipLootedStuff then
        waitSpeTimer = time()
        waitSpeFrame:Show()
    end
end



--[[
-- Se déclenche quand on rentre en combat
function allEvents:PLAYER_REGEN_DISABLED( ... )
GHVarChar.addonActivated = false
print("en combat, setActivated "..tostring(GHVarChar.addonActivated))
end

-- Se déclenche quand on sort du combat
function allEvents:PLAYER_REGEN_ENABLED( ... )
if startState == nil then
startState = true
end
print("startState = "..tostring( startState ))
GHVarChar.addonActivated = startState
print("hors combat, setActivated : "..tostring(GHVarChar.addonActivated))
end
]]--

------------------------------------------------          ----------------------------------------------          ------------------------------------------------
-- xxxxxxx xxxxxxx --      -- xxxxxxx xxxxxxx --          -- xxxxxxx xxxxxxx --      -- xxxxx xxxxxxx --          -- xxxxxxx xxxxxxx --      -- xxxxxxx xxxxxxx --
------------------------------------------------          ----------------------------------------------          ------------------------------------------------
-------------------
-- Fin Event handler --
-------------------
------------------------------------------------          ----------------------------------------------          ------------------------------------------------
-- xxxxxxx xxxxxxx --      -- xxxxxxx xxxxxxx --          -- xxxxxxx xxxxxxx --      -- xxxxx xxxxxxx --          -- xxxxxxx xxxxxxx --      -- xxxxxxx xxxxxxx --
------------------------------------------------          ----------------------------------------------          ------------------------------------------------

for event, _ in pairs(allEvents) do
    eventHandler:RegisterEvent(event)
end
eventHandler:SetScript("OnEvent", function ( self, event, ... )
    --if GHVarChar.addonActivated or GHVarChar.addonActivated == nil then
    allEvents[event](self, ...)
    --end
end)

--------------


-- pour chaques piece de stuff
-- faire une recherche dans l'inventaire
-- regarder s'il existe un stuff du même type
-- si oui, regarder s'il est meilleurs que celui qu'on à
-- si oui l'équiper
-- si non, le laisser dans l'inventaire
-- fonction weightCalculation si finger ou trinket abs ca doit planter
--recup le retour de la tabcaracter et pour chaque faire un weightCalculation ca economise des lignes pour trinket et bague

-- desc :
-- entrée :
-- sortie :
-- commentaire :


--/script print(GetSpecializationInfo(GetSpecialization(), false, false, GetUnitName("player"), UnitSex("player")))

---------------

-- Répertorier les pièces d'inventaire
-- Répertorier les pièces dispo dans le sac (spé)
-- Marquer les pièces de l'inventaire qui peuvent etre swap par celle du sac
-- Définir le nombre de pièces Y à tester et les lister
-- Définir le nombre de commutations possibles (nbPieceSlotX * nbPieceSlotY * nbPieceSlotZ etc...)
-- Equiper les pièces pour chaque commutation et recuperer stat
-- Comparer stat par rapport au caps
