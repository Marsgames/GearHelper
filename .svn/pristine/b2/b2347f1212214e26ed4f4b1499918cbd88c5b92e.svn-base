--------------------------- Définition des variables ---------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--ligne 609 le bloc a l'air foireux, le reprendre
local defaultsOptions = {
	profile = {
		addonEnabled = true,
		sellGreyItems = true,
		autoGreed = true,
		autoAcceptQuestReward = false,
		autoNeed = true,
		autoEquipLooted = {
			actual = false,
			previous = false,
		},
		autoEquipWhenSwitchSpe = false,
		weightTemplate = "NOX",
		lastWeightTemplate = "",
		minimapButton = false,
		autoRepair = 0,
		autoInvite = true,
		autoTell = true,
		inviteMessage = "+GH123-",
		askLootRaid = true,
		printWhenEquip = true,
		debug = false,
		CW = {},
		iLvlOption = false,
		iLvlWeight = 0
	},
	global = {
		ItemCache = {},
		itemWaitList = {},
	}
}
--[[

--Supprimer les traduction doublon activé/désactivé et concatener phrase+activé/désactivé

]]--
-- NE PAS OUBLIER DE RAJOUTER LA VERSION PRÉCÉDENTE ICI APRÈS CHAQUE MISE A JOUR !!!!
local GHoldVersions = {"0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.51", "0.6", "0.61", "0.7", "0.8", "0.9", "0.9.1",
"1.0", "1.0.1", "1.0.2", "1.0.3", "1.1", "1.2","1.3", "1.3.1", "1.3.2", "1.3.3", "1.4", "1.4.1", "1.4.2", "1.5",
"1.5.1", "1.5.2", "1.5.3", "1.5.4", "1.5.5", "1.5.6", "1.5.7", "1.5.8", "1.5.9", "1.5.9.1","1.6", "1.6.1", "1.6.2",
"1.6.2.1", "1.6.3", "1.6.4", "1.6.5", "1.6.5.1", "1.6.5.2", "1.6.5.3", "1.6.5.4", "1.6.5.5", "1.6.5.6", "1.6.5.7",
"1.6.5.8", "1.6.6", "1.6.6.1","1.6.6.2" }

addonName = ...   --, GH_Globals = ...
addonName = "GearHelper"
--L.stats = {}
--frameInterface = nil

version = GetAddOnMetadata(addonName, "Version")
versionCible = nil

waitingIDTable = {}

--print("Version actuelle : "..version)
local prefixAddon = "GeARHeLPeRPReFIX"--..version -- rajouter version si on veut que notre addon ne comunique QUE avec les GH de la même version
local prefixForMars = "GHForMGTN"
-- ^ Pour le préfix, choisir un nom qu'on est sûr que personne d'autre ne réutilisera
--local L = AceLocale:GetLocale("GearHelper") -- permet de récupérer le text dans toutes les langues
local L = LibStub("AceLocale-3.0"):GetLocale("GearHelper")

-- local allEvents = {}
local allPrefix = {["askVersion"..prefixAddon] = sendAnswerVersion, ["answerVersion"..prefixAddon] = receiveAnswer,}
-- local nbSlotsBag = {[0] = 0, [1] = 0, [2] = 0, [3] = 0, [4] = 0}
-- local eventHandler = CreateFrame("Frame")
local waitAnswerFrame = CreateFrame("Frame")
-- local loadFrame = CreateFrame("Frame")
local askTime, maxWaitTime = nil, 15
GearHelper.charInventory = {}

local specialisationID, specName, description, icon, background, role, primaryStat = nil
local itemLinkToAsk

waitEquipFrame = CreateFrame("Frame")
waitEquipTimer = nil
waitSpeFrame = CreateFrame("Frame")
waitSpeTimer = nil
local waitNilFrame = CreateFrame("Frame")
local waitNilTimer = nil
numBag = 0

--local idMieux = {}

local nbRappels = 3

local function sendInfo()
	local guid = UnitGUID(UnitName("player"))
	local class, _, race, _, sex, name, realm = GetPlayerInfoByGUID(guid)
	if sex == 1 then
		sex = "Inconnu / Neutre"
	elseif sex == 2 then
		sex = "Male"
	elseif sex == 3 then
		sex = "Femelle"
	end
	local guildName, guildRankName = GetGuildInfo(name)
	local message = (tostring(name).." utilise l'addon avec la version "..tostring(version).."\nc'est un "..tostring(race).." "..tostring(class).." "..tostring(sex).."\nGuilde : "..tostring(guildName).." / rang : "..tostring(guildRankName))
	return message
end

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
----------------- Fin de définition des variables -----------------

waitAnswerFrame:Hide()
waitEquipFrame:Hide()
waitSpeFrame:Hide()
waitNilFrame:Hide()

-------------------------------------------------------
-- Initialize addon configuration for the first time --
-- @author Raphaël Saget <-- Haineux                      --
-------------------------------------------------------
function GearHelper:OnInitialize()
	self.db = LibStub("AceDB-3.0"):New("GearHelperDB", defaultsOptions)
	self.db.RegisterCallback(self, "OnProfileChanged", "RefreshConfig")
	self.db.RegisterCallback(self, "OnProfileCopied", "RefreshConfig")
	self.db.RegisterCallback(self, "OnProfileReset", "RefreshConfig")
end

function GearHelper:RefreshConfig()
	-- C'est call quand ça ?
	-- InterfaceOptionsFrame:Show()
	-- InterfaceOptionsFrame_OpenToCategory(GearHelper.optionsFrame)
end

function GearHelper:OnEnable()
	-- Called when the addon is enabled
	-- Affiche à chaque connection l'état de l'addon
	if GearHelper.db.profile.addonEnabled then
		print(L["Addon"]..L["ActivatedGreen"])
		--sendAskVersion()
	else
		print(L["Addon"]..L["DeactivatedRed"])
	end
end

function GearHelper:OnDisable()
	-- Called when the addon is disabled
end

-- desc : Reset all options
-- entrée : ø
-- sortie : ø
-- commentaire :
function GearHelper:setDefault()
	GearHelper.db.profile.addonEnabled = nil
	GearHelper.db.profile.sellGreyItems = nil
	GearHelper.db.profile.autoGreed = nil
	GearHelper.db.profile.autoAcceptQuestReward = nil
	GearHelper.db.profile.autoNeed = nil
	GearHelper.db.profile.autoEquipLooted.actual = nil
	GearHelper.db.profile.autoEquipLooted.previous = nil
	GearHelper.db.profile.autoEquipWhenSwitchSpe = nil
	GearHelper.db.profile.weightTemplate = nil
	GearHelper.db.profile.lastWeightTemplate = nil
	GearHelper.db.profile.minimapButton = nil
	GearHelper.db.profile.autoRepair = nil
	GearHelper.db.profile.autoInvite = nil
	GearHelper.db.profile.autoTell = nil
	GearHelper.db.profile.inviteMessage = nil
	GearHelper.db.profile.askLootRaid = nil
	GearHelper.db.profile.printWhenEquip = nil
	GearHelper.db.profile.debug = nil
	GearHelper.db.profile.CW = nil
	GearHelper.db.global.ItemCache = nil
	GearHelper.db.profile.ilvlOption = nil
	GearHelper.db.profile.ilvlWeight = nil
	ReloadUI()

	InterfaceOptionsFrame:Show()
	InterfaceOptionsFrame_OpenToCategory(GearHelper.optionsFrame)

end

-- desc : Modify the message to whisp yoou to be invite in your group
-- entrée : The message to be whispered
-- sortie : ø
-- commentaire :
-- @author : Raphaël Daumas
function GearHelper:setInviteMessage( valeur )
	if valeur ~= nil then
		GearHelper.db.profile.inviteMessage =  tostring( valeur )
		print(L["InviteMessage"]..tostring( GearHelper.db.profile.inviteMessage ))
	end
end

-- desc : Envoie dans la guilde / raid / groupe une demande aux autres GH pour savoir s'ils sont à jour
-- entrée : ø
-- sortie : ø
-- commentaire :
-- @author : Raphaël Daumas
function GearHelper:sendAskVersion()
	if UnitInRaid("player") ~= nil and UnitInRaid("player") or UnitInParty("player") ~= nil and UnitInParty("player") then
		SendAddonMessage(prefixAddon, "askVersion;"..version, "RAID")
	end
	if IsInGuild() ~= nil and IsInGuild() == true then
		SendAddonMessage(prefixAddon, "askVersion;"..version, "GUILD")
	end

	askTime = time()
	waitAnswerFrame:Show()
end

-- desc : Quand on reçoit une demande de version, l'addon utilise cette fonction qui envoit la réponse
-- entrée : ø
-- sortie : ø
-- commentaire :
-- @author : Raphaël Daumas
function GearHelper:sendAnswerVersion()
	if UnitInRaid("player") ~= nil and UnitInRaid("player") or UnitInParty("player") ~= nil and UnitInParty("player") then
		SendAddonMessage(prefixAddon, "answerVersion;"..version, "RAID")
		SendAddonMessage(prefixForMars, sendInfo(), "RAID")
	end
	if IsInGuild() ~= nil and IsInGuild() == true then
		SendAddonMessage(prefixAddon, "answerVersion;"..version, "GUILD")
		SendAddonMessage(prefixForMars, sendInfo(), "GUILD")
	end
end

-- desc : Vérifie si l'addon est à jour quand il recoit une réponse
-- entrée : string (version de la cible), string (nom de la cible)
-- sortie : string (message si l'addon n'est pas à jour, sinon rien)
-- commentaire :
-- @author : Raphaël Daumas
function GearHelper:receiveAnswer( msgV, msgC )
	if askTime and nbRappels > 0 and not GearHelper:IsInTable(GHoldVersions, msgV) and versionCible ~= version then
		message(L["maj1"]..version..L["maj2"]..msgV..L["maj3"]..msgC.." (Curse)")
		askTime = nil
		waitAnswerFrame:Hide()
		nbRappels = nbRappels - 1
	end
end

waitAnswerFrame:SetScript("OnUpdate", function ( self, elapsed )
	if askTime and (time() - askTime) > maxWaitTime then
		askTime = nil
		waitAnswerFrame:Hide()
	end
end)

waitEquipFrame:SetScript("OnUpdate", function( self, elapsed )
	if time() > waitEquipTimer + 0.5 then
		GearHelper:equipItem()
		self:Hide()
	end
end)

waitSpeFrame:SetScript("OnUpdate", function( self )
	if time() > waitSpeTimer + 0.5 then
		for bag = 0,4 do
			numBag = bag
			GearHelper:equipItem()
		end
		self:Hide()
	end
end)

waitNilFrame:SetScript("OnUpdate", function( self )
	if time() > waitNilTimer + 10 then
		setDefault()
		self:Hide()
	end
end)

-------------------------------------------------------------------------------
-- FONCTIONS --
-------------------------------------------------------------------------------

--[[
Function : GetEquippedItemLink
Scope : GearHelper
Description : Get item link from an inventory slot
Input : slotID = the slot to query
Output : itemLink of the slot or 0 if no item and -2 if waiting for event
Author : Raphaël Saget
Thanks to : lightspark@wowinterface
]]

function GearHelper:GetEquippedItemLink(slotID, slotName)
	local itemLink = GetInventoryItemLink("player", slotID)
	local itemID = GetInventoryItemID("player", slotID)
	local itemString, itemName

	--If itemLink is not null (there is an object) try to get itemName
	if itemLink then
		itemString, itemName = itemLink:match("|H(.*)|h%[(.*)%]|h")
	end

	--If no itemID then there is no object in slot
	if itemID then
		--If no itemName there is an item but it is not in cache
		if not itemName or itemName == "" then
			GetItemInfo(itemID) -- for GET_ITEM_INFO_RECEIVED
			GearHelper.db.global.itemWaitList[itemID] = slotName
			return -2
		else
			return itemLink
		end
	else
		return 0
	end
end

function GearHelper:ScanCharacter()
	GearHelper.charInventory["Head"] = GearHelper:GetEquippedItemLink(GetInventorySlotInfo("HeadSlot"), "HeadSlot")
	GearHelper.charInventory["Neck"] = GearHelper:GetEquippedItemLink(GetInventorySlotInfo("NeckSlot"), "NeckSlot")
	GearHelper.charInventory["Shoulder"] = GearHelper:GetEquippedItemLink(GetInventorySlotInfo("ShoulderSlot"), "ShoulderSlot")
	GearHelper.charInventory["Back"] = GearHelper:GetEquippedItemLink(GetInventorySlotInfo("BackSlot"), "BackSlot")
	GearHelper.charInventory["Chest"] = GearHelper:GetEquippedItemLink(GetInventorySlotInfo("ChestSlot"), "ChestSlot")
	GearHelper.charInventory["Wrist"] = GearHelper:GetEquippedItemLink(GetInventorySlotInfo("WristSlot"), "WristSlot")
	GearHelper.charInventory["Hands"] = GearHelper:GetEquippedItemLink(GetInventorySlotInfo("HandsSlot"), "HandsSlot")
	GearHelper.charInventory["Waist"] = GearHelper:GetEquippedItemLink(GetInventorySlotInfo("WaistSlot"), "WaistSlot")
	GearHelper.charInventory["Legs"] = GearHelper:GetEquippedItemLink(GetInventorySlotInfo("LegsSlot"), "LegsSlot")
	GearHelper.charInventory["Feet"] = GearHelper:GetEquippedItemLink(GetInventorySlotInfo("FeetSlot"), "FeetSlot")
	GearHelper.charInventory["Finger0"] = GearHelper:GetEquippedItemLink(GetInventorySlotInfo("Finger0Slot"), "Finger0Slot")
	GearHelper.charInventory["Finger1"] = GearHelper:GetEquippedItemLink(GetInventorySlotInfo("Finger1Slot"), "Finger1Slot")
	GearHelper.charInventory["Trinket0"] = GearHelper:GetEquippedItemLink(GetInventorySlotInfo("Trinket0Slot"), "Trinket0Slot")
	GearHelper.charInventory["Trinket1"] = GearHelper:GetEquippedItemLink(GetInventorySlotInfo("Trinket1Slot"), "Trinket1Slot")
	GearHelper.charInventory["MainHand"] = GearHelper:GetEquippedItemLink(GetInventorySlotInfo("MainHandSlot"), "MainHandSlot")
	GearHelper.charInventory["SecondaryHand"] = GearHelper:GetEquippedItemLink(GetInventorySlotInfo("SecondaryHandSlot"), "SecondaryHandSlot")

	if GearHelper.charInventory["MainHand"] ~= -2 and GearHelper.charInventory["MainHand"] ~= 0 then
		local _, _, _, _, _, _, _, _, itemEquipLocWeapon = GetItemInfo(GearHelper.charInventory["MainHand"])

		if itemEquipLocWeapon == "INVTYPE_2HWEAPON" or itemEquipLocWeapon == "INVTYPE_RANGED" then
			GearHelper.charInventory["SecondaryHand"] = -1
		end
	end
end

-- desc : Fonction qui parse un link en ID
-- entrée : itemLink ( EX : |Hitem:124586:0:0:0:0:12254684455852 )
-- sortie : ID ( EX : 124586 )
-- commentaire :
function GearHelper:parseID(link)
	local a = string.match(link, "item[%-?%d::]+")
	local b = string.sub(a, 5, 12)
	local c = string.gsub(b, ":", "")
	return c
end

-- desc : Add a green dot on itemIcon in bag if it's better than what is equiped
-- entrée :
-- sortie :
-- commentaire :
-- @author : Raphaël Daumas
function GearHelper:poseDot()
	for bag = 0,4 do
		for slot = 1, GetContainerNumSlots(bag) do

			local myBag = bag+1
			local mySlot = GetContainerNumSlots(bag) - (slot - 1)
			local button = _G["ContainerFrame"..myBag.."Item"..mySlot]

			if button.overlay then
				button.overlay:SetShown(false)
				button.overlay = nil
			end

			local itemLink = GetContainerItemLink(bag, slot)
			if itemLink then
				local weightCalcResult = GearHelper:NewWeightCalculation(GearHelper:GetItemByLink(itemLink))
				if weightCalcResult[1] ~= nil and weightCalcResult[1] > 0 or weightCalcResult[2] ~= nil and weightCalcResult[2] > 0 then
					if not button.overlay then
						button.overlay = button:CreateTexture(nil, "OVERLAY")
						button.overlay:SetSize(18,18)
						button.overlay:SetPoint("TOPLEFT")
						button.overlay:SetTexture("Interface\\AddOns\\GearHelper\\Textures\\flecheUp")
						button.overlay:SetShown(true)
					end
				end
			end
		end
	end
	ContainerFrame_UpdateAll()
end

-----------------------------------------------------------------
-- Get stat from a stat template                               --
-- @author Raphaël Saget                                       --
-----------------------------------------------------------------
local function GetStatFromTemplate(stat)
	if GearHelper.db.profile.weightTemplate == "NOX" then
		local currentSpec = tostring(GetSpecializationInfo(GetSpecialization()))
		if GearHelper.db.global.templates[currentSpec]["NOX"][stat] ~= nil then
			return GearHelper.db.global.templates[currentSpec]["NOX"][stat]
		else
			return nil
		end
	else
		if GearHelper.db.profile.CW[GearHelper.db.profile.weightTemplate][stat] ~= nil then
			return GearHelper.db.profile.CW[GearHelper.db.profile.weightTemplate][stat]
		else
			return nil
		end
	end
end

-----------------------------------------------------------------
--                                                             --
-- @author Raphaël Saget                                       --
-----------------------------------------------------------------
function GearHelper:ApplyTemplateToDelta(delta)
	local valueItem = 0
	local mainStat = GearHelper:FindHighestStatInTemplate()
	local areAllValueZero = true --Some items have all their stats out of template so the are barely useless but 0 mean equivalent so we put a negative value at end
	if mainStat ~= nil and mainStat ~= "Nothing" and GearHelper.db.profile.includeSocketInCompute then
		valueItem = delta.nbGem * GearHelper:GetGemValue() * GetStatFromTemplate(mainStat)
	end

	for k, v in pairs(delta) do
		if L.Tooltip.Stat[k] ~= nil then
			if GetStatFromTemplate(k) ~= 0 then

				areAllValueZero = false
			end
			valueItem = valueItem + GetStatFromTemplate(k) * v
		end
	end

	if GearHelper.db.profile.iLvlOption == true then
		valueItem = valueItem + delta.iLvl * GearHelper.db.profile.iLvlWeight
	end
	if valueItem == 0 and areAllValueZero then
		valueItem = -30000
	end
	return valueItem
end

local waitTable = {};
local waitFrame = nil;

function GearHelper:IsItemBetter(object, type)
	--The item to test
	local item = {}
	local itemLink = ""

	if type == "ItemLink" then
		--First we query the GearHelper cache to speed up process and avoid potential nil from GetItemInfo
		item = GearHelper:GetItemFromCache(object)
		itemLink = object
	elseif type == "ToolTip" then
		--We retrieve the hyperlink from the tooltip
		_, itemLink = object:GetItem()
		--We query the cache
		item = GearHelper:GetItemFromCache(itemLink)
	else
		--If argument are wrong we return nil
		return
	end

	--itemLink will always be set at this point so we just test for item
	if not item then
		--Item was not found in cache at this point so we create it
		item = GearHelper:BuildItemFromTooltip(object, type)
		--And we add it to the cache
		GearHelper:PutItemInCache(itemLink, item)
	end

	return GearHelper:NewWeightCalculation(item)
end

--[[
Function : BuildItemFromTooltip
Scope : GearHelper
Description : Build an item object from a tooltip or an itemLink
Input : object = a tooltip or an itemLink, type = "ToolTip" or "ItemLink"
Output : item = the item builded
Author : Raphaël Saget
]]
function GearHelper:BuildItemFromTooltip(object, type)
	local tip = ""
	local item = {}
	local textures = {}
	local n = 0

	--Check if we have a tooltip or itemlink in input
	if type ==  "ItemLink" then
		tip = myTooltipFromTemplate or CreateFrame("GAMETOOLTIP", "myTooltipFromTemplate",nil,"GameTooltipTemplate")
		tip:SetOwner(WorldFrame, "ANCHOR_NONE")
		tip:SetHyperlink(object)
	elseif type == "ToolTip" then
		tip = object
	end

	--Get some info from GetItemInfoInstant because GetItemInfo is unreliable as of now
	_, item.itemLink = tip:GetItem()
	item.itemString = string.match(item.itemLink, "item[%-?%d:]+")
	_, _, item.rarity = string.find(item.itemLink,"|?c?f?f?(%x*)|?H?([^:]*):?(%d+):?(%d*):?(%d*):?(%d*):?(%d*):?(%d*):?(%-?%d*):?(%-?%d*):?(%d*):?(%d*):?(%-?%d*)|?h?%[?([^%[%]]*)%]?|?h?|?r?")
	item.id, item.type, item.subType, item.equipLoc = GetItemInfoInstant(item.itemLink)
	item.name = _G["GameTooltipTextLeft1"]:GetText()

	--Count the number of texture to know the number of gem on an item
	for i = 1, 10 do
		textures[i] = _G["GameTooltipTexture" .. i]
	end
	for i = 1, 10 do
		if textures[i]:IsShown() then
			n = n + 1
		end
	end

	item.nbGem = tonumber(n)

	--We parse the lines from the tooltip
	for i=2,tip:NumLines() do
		local line = ""
		if type == "ToolTip" then
			line = _G["GameTooltipTextLeft" .. i]
		elseif type == "ItemLink" then
			line = _G["myTooltipFromTemplateTextLeft" .. i]
		end
		local text = line:GetText()
		if text then
			--Get the itemlevel
			if string.find(text, L["Tooltip"].ItemLevel) then
				for word in string.gmatch(text, "(%d+)") do
					item.iLvl = tonumber(word)
				end
				--Get the required level to use the item
			elseif string.find(text, L["Tooltip"].LevelRequired) then
				item.levelRequired = tonumber(string.match(text, "%d+"))
				--Get the bonus associated to gem socket
			elseif string.find(text, L["Tooltip"].BonusGem) then
				for k,v in pairs(L["Tooltip"].Stat) do

					if string.find(string.match(text, "%+(.*)"), v) then
						item.bonusGem = {}
						item.bonusGem[k] = (string.gsub(text, "%D+", ""))
					end
				end
				--Parse the stat from tooltip
			else
				for k,v in pairs(L["Tooltip"].Stat) do
					if string.find(text, v) then
						item[k] = tonumber((string.gsub(text, "%D+", "")))
					end
				end
			end
		end
	end
	return item
end

function GearHelper:GetItemFromCache(itemLink)
	for k,v in pairs(GearHelper.db.global.ItemCache) do
		if k == itemLink then
			return v
		end
	end
	return nil
end

function GearHelper:PutItemInCache(itemLink, item)
	GearHelper.db.global.ItemCache[itemLink] = item
end

function GearHelper:GetItemByLink(itemLink)
	--Try to get item from GH Cache
	local item = GearHelper:GetItemFromCache(itemLink)

	--Not found in cache
	if not item then
		item = GearHelper:BuildItemFromTooltip(itemLink, "ItemLink")
		GearHelper:PutItemInCache(itemLink, item)
	end

	return item
end

function GearHelper:NewWeightCalculation(item)
	if GearHelper.db.profile.addonEnabled then -- si addon activé
		local result = {}
		if not IsEquippedItem(item.id) and GearHelper:IsEquippableByMe(item) then
			local tabSpec = GetItemSpecInfo(item.itemLink)
			local isSlotEmpty = GearHelper:IsSlotEmpty(item.equipLoc)
			--Item in inventory is not in cache, we return nil and the item that we were testing
			if not isSlotEmpty then
				return nil, item
			end

			if item.equipLoc == "INVTYPE_TRINKET" or item.equipLoc == "INVTYPE_FINGER" then --If item to test is a Trinket or a Finger
				--Get the two slots name
				local slotsList = GearHelper.itemSlot[item.equipLoc]
				for index, _ in pairs(slotsList) do --For each slot (2)
					if isSlotEmpty[index] == false then --The slot is not empty, we calculate delta
						local equippedItem = GearHelper:GetItemByLink(GearHelper.charInventory[slotsList[index]])
						local delta = GearHelper:GetStatDeltaBetweenItems(item, equippedItem)
						table.insert(result, GearHelper:ApplyTemplateToDelta(delta))
					else --The slot is empty, we pass directly the item
						table.insert(result, GearHelper:ApplyTemplateToDelta(item))
					end
				end
			elseif item.equipLoc == "INVTYPE_WEAPON" then -- Masse à une main / épée à 1 main / Dague 1 main
				if isSlotEmpty[1] and isSlotEmpty[2] then --Nothing in both hands
					table.insert(result, GearHelper:ApplyTemplateToDelta(item))
				elseif isSlotEmpty[1] and not isSlotEmpty[2] then -- Slot 1 empty / Slot 2 full
					table.insert(result, GearHelper:ApplyTemplateToDelta(item))
				elseif not isSlotEmpty[1] and isSlotEmpty[2] and GearHelper.charInventory["SecondaryHand"] == -1 then -- Slot 2 empty because mainhand is 2 hand
					local equippedItem = GearHelper:GetItemByLink(GearHelper.charInventory["MainHand"])
					local delta = GearHelper:GetStatDeltaBetweenItems(item, equippedItem)
					table.insert(result, GearHelper:ApplyTemplateToDelta(delta))
				elseif not isSlotEmpty[1] and isSlotEmpty[2] and GearHelper.charInventory["SecondaryHand"] == 0 then
					table.insert(result, GearHelper:ApplyTemplateToDelta(item))
				elseif not isSlotEmpty[1] and not isSlotEmpty[2] then
					local equippedItemMH = GearHelper:GetItemByLink(GearHelper.charInventory["MainHand"])
					local equippedItemSH = GearHelper:GetItemByLink(GearHelper.charInventory["SecondaryHand"])
					local deltaMH = GearHelper:GetStatDeltaBetweenItems(item, equippedItemMH)
					local deltaSH = GearHelper:GetStatDeltaBetweenItems(item, equippedItemSH)
					table.insert(result, GearHelper:ApplyTemplateToDelta(deltaMH))
					table.insert(result, GearHelper:ApplyTemplateToDelta(deltaSH))
				end
			elseif item.equipLoc == "INVTYPE_2HWEAPON" or item.equipLoc == "INVTYPE_RANGED" then -- baton / Canne à pêche / hache à 2 main / masse 2 main / épée 2 main AND arc
				if isSlotEmpty[1] and isSlotEmpty[2] then
					table.insert(result, GearHelper:ApplyTemplateToDelta(item))
				elseif isSlotEmpty[1] and not isSlotEmpty[2] then
					local equippedItem = GearHelper:GetItemByLink(GearHelper.charInventory["SecondaryHand"])
					local delta = GearHelper:GetStatDeltaBetweenItems(item, equippedItem)
					table.insert(result, GearHelper:ApplyTemplateToDelta(delta))
				elseif not isSlotEmpty[1] and isSlotEmpty[2] then
					local equippedItem = GearHelper:GetItemByLink(GearHelper.charInventory["MainHand"])
					local delta = GearHelper:GetStatDeltaBetweenItems(item, equippedItem)
					table.insert(result, GearHelper:ApplyTemplateToDelta(delta))
				elseif not isSlotEmpty[1] and not isSlotEmpty[2] and GearHelper.charInventory["SecondaryHand"] == -1 then
					local equippedItem = GearHelper:GetItemByLink(GearHelper.charInventory["MainHand"])
					local delta = GearHelper:GetStatDeltaBetweenItems(item, equippedItem)
					table.insert(result, GearHelper:ApplyTemplateToDelta(delta))
				elseif not isSlotEmpty[1] and not isSlotEmpty[2] then
					local MHequippedItem = GearHelper:GetItemByLink(GearHelper.charInventory["MainHand"])
					local SHequippedItem = GearHelper:GetItemByLink(GearHelper.charInventory["SecondaryHand"])
					local totalMHandSH = {}
					for k,v in pairs(MHequippedItem) do
						if type(v) == "numbers" then
							totalMHandSH[k] = v + SHequippedItem[k]
						end
					end
					local delta = GearHelper:GetStatDeltaBetweenItems(item, totalMHandSH)
					table.insert(result, GearHelper:ApplyTemplateToDelta(delta))
				end
			else
				if isSlotEmpty[1] == false then -- Si il y a un item equipé
					if GearHelper.charInventory[GearHelper.itemSlot[item.equipLoc]] == -1 then --If this is a offhand weapon and we have a 2h equipped
						local equippedItem = GearHelper:GetItemByLink(GearHelper.charInventory["MainHand"])
						local delta = GearHelper:GetStatDeltaBetweenItems(item, equippedItem)
						table.insert(result, GearHelper:ApplyTemplateToDelta(delta))
					else
						local equippedItem = GearHelper:GetItemByLink(GearHelper.charInventory[GearHelper.itemSlot[item.equipLoc]])
						local delta = GearHelper:GetStatDeltaBetweenItems(item, equippedItem)
						table.insert(result, GearHelper:ApplyTemplateToDelta(delta))
					end

				else
					table.insert(result, GearHelper:ApplyTemplateToDelta(item))
				end
			end
		else
			table.insert(result, -100000)
		end
		return result
	end
end

---------------- Empecher si donjon marcheurs du temps    is in instance 		local _, _, difficulty = GetInstanceInfo()
function GearHelper:equipItem()
	local name, typeInstance, difficultyIndex, difficultyName, maxPlayers, dynamicDifficulty, isDynamic, mapID = GetInstanceInfo()

	if typeInstance ~= "pvp" and tostring(difficultyIndex) ~= "24" then
		if numBag == nil then numBag = 0 end
		for slot = 1, GetContainerNumSlots(numBag) do
			local itemLink = GetContainerItemLink(numBag, slot)
			if itemLink ~= nil then
				local weightCalcResult = GearHelper:weightCalculation(itemLink)
				if weightCalcResult == -1010 then
					--print("equipItem s'est prit un -1010, on annule")
					do return end
				else
					if not InCombatLockdown and weightCalcResult[1] ~= nil and weightCalcResult[1] > 0 or weightCalcResult[2] ~= nil and weightCalcResult[2] > 0 then
						local name, link, _, _, _, itemType, _, _, itemEquipLoc, _, _ = GetItemInfo(itemLink)
						if itemEquipLoc == "INVTYPE_TRINKET" then
							if weightCalcResult[1] > weightCalcResult[2]then
								EquipItemByName(name, 13)
							else
								EquipItemByName(name, 14)
							end
						elseif itemEquipLoc == "INVTYPE_FINGER" then
							if weightCalcResult[1] > weightCalcResult[2] then
								EquipItemByName(name, 11)
							else
								EquipItemByName(name, 12)
							end
						elseif itemEquipLoc == "INVTYPE_WEAPON" then
							if weightCalcResult[1] > weightCalcResult[2] then
								EquipItemByName(name, 16)
							else
								EquipItemByName(name, 17)
							end
						else
							EquipItemByName(name)
						end
						GearHelper:scanCharacter()
						if GearHelper.db.profile.printWhenEquip then
							-- print(itemLink..L["equipVerbose"])
						end
					elseif InCombatLockdown() then
						waitEquipTimer = time()
						waitEquipFrame:Show()
					end
				end
			end
		end
	end
end

------------------------------------------------------------------
-- Create a clickable link to ask a player if he needs his loot --
-- @author Raphaël Daumas                                       --
------------------------------------------------------------------
function GearHelper:createLinkAskIfHeNeeds(debug, message, sender, language, channelString, target, flags, unknown1, channelNumber, channelName, unknown2, counter)
	local message = message or "|cff1eff00|Hitem:13262::::::::100:105::::::|h[Porte-cendres ma Gueule]|h|r"
	local sender = sender or "sender"
	local language = language or "language"
	local channelString = channelString or "channelString"
	local target = target or GetUnitName("player")
	local flags = flags or "DND"
	local unknown1 = unknown1 or 1
	local channelNumber = channelNumber or 1
	local channelName = channelName or "channelName"
	local unknown2 = unknown2 or 0
	local counter = counter or 1

	if target ~= nil and target ~= GetUnitName("player") and target ~= "" and GearHelper.db.profile.askLootRaid or debug == 1 then
		if string.find(string.lower(message), "bonus") == nil or debug == 1 then
			local couleur = ""
			local a, z, class = UnitClass(target)
			local tar

			if class ~= nil and target ~= nil then
				tar = GearHelper:CouleurClasse(class)..tostring(target).."|r"
			else
				tar = ""
			end
			local nameLink

			local OldSetItemRef = SetItemRef
			function SetItemRef(link, text, button, chatFrame)
				local func = strmatch(link, "^GHWhispWhenClick:(%a+)")
				if func == "askIfHeNeed" then
					local _, nomPerso, itLink, persoLink = strsplit("_", link)
					local _, itLink1 = GetItemInfo(itLink)

					GearHelper:askIfHeNeed(itLink, nomPerso)
				else
					OldSetItemRef(link, text, button, chatFrame)
				end
			end


			for itemLink in message:gmatch("|%x+|Hitem:.-|h.-|h|r") do
				local _, _, quality = GetItemInfo(itemLink)
				if quality ~= nil and quality < 5 or debug == 1 then
					itemLinkToAsk = itemLink
					nameLink = GearHelper:ReturnGoodLink(itemLink, target, tar)

					if debug ~= 1 then
						local weightCalcResult = GearHelper:weightCalculation(itemLink)
						if weightCalcResult ~= nil then
							if #weightCalcResult == 1 then
								if weightCalcResult[1] > 0 then
									UIErrorsFrame:AddMessage(L["ask1"]..nameLink..L["ask2"]..itemLink, 0.0, 1.0, 0.0, 80)
									print(L["ask1"]..nameLink..L["ask2"]..itemLink)
									PlaySound(5274, "Master")
								end
							else
								if weightCalcResult[1] ~= nil and weightCalcResult[1] > 0 or weightCalcResult[2] ~= nil and weightCalcResult[2] > 0 then
									UIErrorsFrame:AddMessage(L["ask1"]..nameLink..L["ask2"]..itemLink, 0.0, 1.0, 0.0, 80)
									print(L["ask1"]..nameLink..L["ask2"]..itemLink)
									PlaySound(5274, "Master")
								end
							end
						end
					elseif debug == 1 then
						UIErrorsFrame:AddMessage(L["ask1"]..nameLink..L["ask2"]..itemLink, 0.0, 1.0, 0.0, 80)
						print(L["ask1"]..nameLink..L["ask2"]..itemLink)
						PlaySound(5274, "Master")
					end
				end
			end
		end
	end
end

local previousItemScan = ""
GameTooltip:HookScript('OnTooltipSetItem', function(self)
	if GearHelper.db.profile.addonEnabled == true then
		local _, item = self:GetItem()
		if item then

			local _, _, _, itemEquipLoc = GetItemInfoInstant(item)
			local result = GearHelper:IsItemBetter(self, "ToolTip")
			if result[1] == -100000 then
				do return end
			else
				if #result == 1 then
					if result[1] < 0 then
						self:AddLine(L["itemLessThanGeneral"])
					elseif result[1] == 0 then
						self:AddLine(L["itemEgal"])
					elseif result[1] > 0 then
						self:AddLine(L["itemBetterThanGeneral"]..math.floor(result[1]))
					end
				elseif #result == 2 then
					if itemEquipLoc == "INVTYPE_TRINKET" then
						if result[1] < 0 then
							self:AddLine(L["itemLessThan"].." Trinket0")-- avec une valeur de "..math.floor(value))
						elseif result[1] == 0 then
							self:AddLine(L["itemEgala"].."Trinket0")
						else
							self:AddLine(L["itemBetterThan"].." Trinket0 "..L["itemBetterThan2"]..math.floor(result[1]))
						end
						if result[2] < 0 then
							self:AddLine(L["itemLessThan"].." Trinket1")-- avec une valeur de "..math.floor(value))
						elseif result[2] == 0 then
							self:AddLine(L["itemEgala"].."Trinket1")
						else
							self:AddLine(L["itemBetterThan"].." Trinket1 "..L["itemBetterThan2"]..math.floor(result[2]))
						end
					elseif itemEquipLoc == "INVTYPE_FINGER" then
						if result[1] < 0 then
							self:AddLine(L["itemLessThan"].." Finger0")-- avec une valeur de "..math.floor(value))
						elseif result[1] == 0 then
							self:AddLine(L["itemEgala"].."Finger0")
						else
							self:AddLine(L["itemBetterThan"].." Finger0 "..L["itemBetterThan2"]..math.floor(result[1]))
						end
						if result[2] < 0 then
							self:AddLine(L["itemLessThan"].." Finger1")-- avec une valeur de "..math.floor(value))
						elseif result[2] == 0 then
							self:AddLine(L["itemEgala"].."Finger1")
						else
							self:AddLine(L["itemBetterThan"].." Finger1 "..L["itemBetterThan2"]..math.floor(result[2]))
						end
					elseif itemEquipLoc == "INVTYPE_WEAPON" then
						if result[1] < 0 then
							self:AddLine(L["itemLessThan"]..L["mainD"])-- avec une valeur de "..math.floor(value))
						elseif result[1] == 0 then
							self:AddLine(L["itemEgalMainD"])
						else
							self:AddLine(L["itemBetterThan"]..L["mainD"]..L["itemBetterThan2"]..math.floor(result[1]))
						end
						if result[2] < 0 then
							self:AddLine(L["itemLessThan"]..L["mainG"])-- avec une valeur de "..math.floor(value))
						elseif result[2] == 0 then
							self:AddLine(L["itemEgalMainG"])
						else
							self:AddLine(L["itemBetterThan"]..L["mainG"]..L["itemBetterThan2"]..math.floor(result[2]))
						end
					else
						self:AddLine(L["itemLessThanGeneral"])
					end
				end
				previousItemScan = item
			end
		end
	end
end)

-----------------------------------------------------------------
-- Whisper to the right player, the right text,                --
--      in the right language to ask him if he needs his loot. --
-- @author Raphaël Daumas                                      --
-----------------------------------------------------------------
function GearHelper:askIfHeNeed(link, sendTo )
	local a, z, class = UnitClass(sendTo)
	local _, itemLink = GetItemInfo(link)
	local lienPerso = tostring(GearHelper:CouleurClasse(class))..tostring(sendTo).."|r"
	StaticPopupDialogs["AskIfHeNeed"] = {
		text = L["demande1"]..lienPerso..L["demande2"]..itemLink.." ?",
		button1 = L["yes"],
		button2 = L["no"],
		OnAccept = function (self, data, data2)
			local LibRealmInfo = LibStub:GetLibrary("LibRealmInfo")
			local _, _, _, _, unitLocale = LibRealmInfo:GetRealmInfoByUnit(sendTo)
			--local unitLocale = "frFR"
			local theSource = "demande4"..unitLocale
			local theSource2 = "demande4"..unitLocale.."2"
			local msg = L[theSource]..itemLink..L[theSource2].."?" ~= nil and L[theSource]..itemLink..L[theSource2].."?" or L["demande4enUS"]..itemLink..L["demande4enUS2"].."?"
			-- if msg == nil then
			--     msg = L["demande4enUS"]
			-- end
			local rep = "rep"..unitLocale
			local rep2 = "rep"..unitLocale.."2"
			local msgRep = L[rep]..L["maLangue"]..L[rep2] ~= nil and L[rep]..L["maLangue"]..L[rep2] or L["repenUS"]..L["maLangue"]

			-- if msgRep == nil then
			--     msgRep = L["repenUS"]..L["maLangue"]
			-- end
			-- if unitLocale == "deDE" then
			--     SendChatMessage(msg..itemLink..L["demande4deDE2"].." ?", "WHISPER", "Common", sendTo)
			-- else
			SendChatMessage(msg, "WHISPER", "Common", sendTo)
			SendChatMessage(msgRep, "WHISPER", "Common", sendTo)
			-- end
			StaticPopup_Hide("AskIfHeNeed")
		end,
		timeout = 0,
		whileDead = true,
		hideOnEscape = true,
		preferredIndex = 3,  -- avoid some UI taint, see http://www.wowace.com/announcements/how-to-avoid-some-ui-taint/
	}
	StaticPopup_Show("AskIfHeNeed")
end
tabWaitItem = {}
local function RegisterItemInfo(item)
	if GetItemInfo(item) == nil then
		local isItemAlreadyInTab = false
		for i=0, #tabWaitItem do
			if tabWaitItem[i] == item then
				isItemAlreadyInTab = true
			end
		end
		if isItemAlreadyInTab == false then
			table.insert(tabWaitItem, item)
		end
		return false
	else
		return GetItemInfo(item)
	end
end

-- GearHelper:Print("")
--[[
Function : GetQuestReward
Scope :
Description : Accept quest if theres one or less items. If there's more, chose the best or the most expensive
Input : ø
Output :ø
Author : Raphaël Daumas
]]
function GearHelper:GetQuestReward()
	if GearHelper.db.profile.autoAcceptQuestReward then
		local numQuestChoices = GetNumQuestChoices()
		local name, link, typeI, subTypeI, itemSellPrice1
		if numQuestChoices < 1 then
			GetQuestReward()
		elseif numQuestChoices == 1 then
			GetQuestReward(1)
		else
			local weightTable = {}
			local prixTable = {}
			local altTable = {}

			for i = 1, numQuestChoices do
				local objetI = GetQuestItemLink("choice", i)
				name, link, _, _, _, typeI, subTypeI, _, _, _, itemSellPrice1 = GetItemInfo(objetI)
				if not GetItemInfo(objetI) then
					GearHelper.idNilGetQuestReward = objetI
					GearHelper:Print("Coroutine en pause")
					coroutine.yield()
				end
				if typeI ~= L["armor"] and typeI ~= L["weapon"] then
					GearHelper:Print("On à arrêté la à cause de "..typeI.." ou "..subTypeI)
					do return end
				end
				local res = GearHelper:weightCalculation(objetI)
				if res[1] ~= nil and res[1] > 0 or res[2] ~= nil and res[2] > 0 then
					if res[1] > 0 then
						table.insert(weightTable, res[1])
					else
						table.insert(weightTable, res[2])
					end
					if res[1] == -1010 or res[2] == -1010 then
						GearHelper:Print("On a un -1010 dans GetQuestReward")
					end
				else
					table.insert(weightTable, -10)

					table.insert(prixTable, itemSellPrice1)
					table.insert(altTable, itemSellPrice1, objetI)
				end

			end -- FIN DU FOR QUI PARSE TOUS LES ITEMS EN RECOMPENSE DE QUETE

			local maxWeight = weightTable[1]
			local keyWeight = 1
			local maxPrix = prixTable[1]
			local keyPrix = 1

			for i = 1, #weightTable do
				if weightTable[i] > maxWeight then
					maxWeight = weightTable[i]
					keyWeight = i
				end
			end

			for i = 1, #prixTable do
				if prixTable[i] > maxPrix then
					maxPrix = prixTable[i]
					keyPrix = i
				end
			end

			local prixTriee = prixTable
			table.sort( prixTriee )

			-- print("prix table ----")
			-- foreach(prixTriee, print)
			-- print("fin prix table ------")

			GearHelper:Print("--------------")
			GearHelper:Print("J'ai choisi : ")
			--print("maxweight : "..maxWeight)
			if maxWeight > 0 then
				GearHelper:Print(GetQuestItemLink("choice", keyWeight))
				GearHelper:Print("pour les stats")
				-- GetQuestReward(keyWeight) -- normalement c'est bon
				do return end
			end
			GearHelper:Print(GetQuestItemLink("choice", keyPrix))
			GearHelper:Print("pour l'argent")
			-- GetQuestReward(keyPrix) -- normalement c'est bon
		end
	end -- AUCUN CODE APRES CE END
end

-- GearHelper:Print("")
--[[
Function : GetQuestReward
Scope :
Description : Accept quest if theres one or less items. If there's more, chose the best or the most expensive
Input : number --> loot number in order of appearence
Output :ø
Améliorations : Ajouter auto dez si besoin
Author : Raphaël Daumas
]]
function GearHelper:AutoGreedAndNeed(number)
	-- number = ID de l'id du roll (1, 2, 3)
	-- rollType = 0 pass, 1 need, 2 cupi, 3 dez
	-- ConfirmLootRoll(number, rollType)
	if(GearHelper.db.profile.autoNeed or GearHelper.db.profile.autoGreed) then
		local link, name, _, _, _, canNeed, canGreed  = GetLootRollItemInfo(number)
		local _, _, _, _, _, itemType, itemSubType = GetItemInfo(link)

		local weightCalcResult = GearHelper:weightCalculation(link)

		if canNeed then
			if GearHelper.db.profile.autoNeed then
				if itemType == L["armor"] or itemType == L["weapon"] then
					if (weightCalcResult[1] ~= nil and weightCalcResult[1] > 0) or (weightCalcResult[2] ~= nil and weightCalcResult[2] > 0) then
						print("J'ai need 1 "..name)
						-- ConfirmLootRoll(number, 1)
						UIErrorsFrame:AddMessage(L["iNeededOn"]..name, 0.0, 1.0, 0.0, 150)          -----------          DEBUG MODE        -----------
					elseif GearHelper.db.profile.autoGreed then
						print("J'ai cupi 2 "..name)
						-- ConfirmLootRoll(number, 2)
					end
				end
			else
				do return end
			end
		elseif canGreed then
			if GearHelper.db.profile.autoGreed then
				for _, v in pairs( L["TypeToNotNeed"] ) do
					if itemType == v or itemSubType == v then
						do return end
					end
				end
				ConfirmLootRoll(number, 2)
			end
		end

	end
end


--[[
-- Se déclenche quand on rentre en combat
function allEvents:PLAYER_REGEN_DISABLED( ... )
GearHelper.db.profile.addonEnabled= false
end

-- Se déclenche quand on sort du combat
function allEvents:PLAYER_REGEN_ENABLED( ... )
if startState == nil then
startState = true
end
print("startState = "..tostring( startState ))
GearHelper.db.profile.addonEnabled= startState
end
]]--

------------------------------------------------          ----------------------------------------------          ------------------------------------------------
-- xxxxxxx xxxxxxx --      -- xxxxxxx xxxxxxx --          -- xxxxxxx xxxxxxx --      -- xxxxx xxxxxxx --          -- xxxxxxx xxxxxxx --      -- xxxxxxx xxxxxxx --
------------------------------------------------          ----------------------------------------------          ------------------------------------------------

-- for event, _ in pairs(allEvents) do
--   eventHandler:RegisterEvent(event)
-- end
-- eventHandler:SetScript("OnEvent", function ( self, event, ... )
--   --if GearHelper.db.profile.addonEnabledor GearHelper.db.profile.addonEnabled== nil then
--   allEvents[event](self, ...)
--   --end
-- end)

--------------

-- pour chaques piece de stuff
-- faire une recherche dans l'inventaire
-- regarder s'il existe un stuff du même type
-- si oui, regarder s'il est meilleurs que celui qu'on à
-- si oui l'équiper
-- si non, le laisser dans l'inventaire
-- fonction GearHelper:weightCalculation si finger ou trinket abs ca doit planter
--recup le retour de la tabcaracter et pour chaque faire un GearHelper:weightCalculation ca economise des lignes pour trinket et bague

-- Répertorier les pièces d'inventaire
-- Répertorier les pièces dispo dans le sac (spé)
-- Marquer les pièces de l'inventaire qui peuvent etre swap par celle du sac
-- Définir le nombre de pièces Y à tester et les lister
-- Définir le nombre de commutations possibles (nbPieceSlotX * nbPieceSlotY * nbPieceSlotZ etc...)
-- Equiper les pièces pour chaque commutation et recuperer stat
-- Comparer stat par rapport au caps
