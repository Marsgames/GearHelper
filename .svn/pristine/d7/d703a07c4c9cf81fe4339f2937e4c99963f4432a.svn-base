--[[
--Mettre SpecID en variable globale
local L = GHVar.localization

local tabVS = {}
local specID = GetSpecializationInfo(GetSpecialization(), false, false, UnitName("player"), UnitSex("player"))
----------------------------------------------------------------
--Helper which avoid item skipping while auto equip many items--
----------------------------------------------------------------

local waitEquipFrame1 = CreateFrame("Frame")
local waitEquipTimer1 = nil
waitEquipFrame1:Hide()
waitEquipFrame1:SetScript("OnUpdate", function ( self, elapsed )
	if time() > waitEquipTimer1 + 0.5 then
		equipItem()
		self:Hide()
	end
end)

local function pairsByKey (t, f)
   local a = {}
   for n in pairs(t) do table.insert(a, n) end
   table.sort(a, f)
   local i = #a      -- iterator variable
   local iter = function ()   -- iterator function
      i = i - 1
      if a[i] == nil then return nil
      else return a[i], t[a[i]--]
      end
   end
   return iter
end

function GHCheckBox_OnLoad(self)
	_G[self:GetName().."Text"]:SetText(L["UIGHCheckBox"..self:GetName()])
end

function GHCheckBox_OnShow(self)
	self:SetChecked(GHVarChar.addonOptions[self:GetName()])
end

function GHCheckBox_OnClick(self, event, arg1)
	swapState(not self:GetChecked(), self:GetName())
end

function MainOptionFrame_OnShow(self)
end

local function createRadio(nomRatio, frameParent, posX, posY, text )
	local nomRatio = CreateFrame("CheckButton", tostring( nomRatio ), frameParent, "UIRadioButtonTemplate")
	nomRatio:SetPoint("CENTER", posX - 120, posY + 120)
	nomRatio.text:SetText(text)
	nomRatio:SetFrameStrata("HIGH")

	return nomRatio
end

local function createEditBox(nameEditBox, frameParent, editBoxPoint, editBoxX, editBoxY, editBoxText, editBoxSize, labelText)
	local tmpEditBox = CreateFrame("EditBox", tostring(nameEditBox), frameParent, "GHEditBoxTemplate")
	tmpEditBox:SetPoint(editBoxPoint, editBoxX, editBoxY)
	tmpEditBox:SetText(editBoxText)
	tmpEditBox:SetSize(editBoxSize, 1)

	tmpEditBox.Label = tmpEditBox:CreateFontString(nil , "BORDER", "GameFontNormal")
  tmpEditBox.Label:SetJustifyH("CENTER")
  tmpEditBox.Label:SetPoint("LEFT", nameEditBox, "RIGHT", 70, 0)
	tmpEditBox.Label:SetText(labelText)
	tmpEditBox:SetScript("OnEscapePressed", function(self)
		InterfaceOptionsFramePanelContainer:Hide()
	end)
	return tmpEditBox
end

local function createButton( buttonName, frameParent, posX, posY, text )
	local tmpButton = CreateFrame("Button", tostring(buttonName), frameParent, "GHButtonTemplate")
	tmpButton:SetPoint("CENTER", posX - 120, posY + 120)
	tmpButton:SetText(text)
	return tmpButton
end

function MainOptionFrame_OnLoad(self)
	self.name = "GearHelper"
	self.childElements = {}

	self.refresh = function()
		updateGHMenu()
	end

	self.default = function()
		--setDefault()
	end

	self.okay = function (self)
		--openInterface = 0
	end

	self.cancel = function (self)
		--openInterface = 0
	end

	InterfaceOptions_AddCategory(self)

end

function CustomWeightsFrame_OnLoad(self)
	self.name = "Custom Weights"
	self.parent = "GearHelper"

	self.saveButton = createButton("SaveTemplateButton", self, 180, 150 - 7*30, "Save Template")
	self.statBoxes = {}
	table.insert(self.statBoxes, createEditBox("GHTemplateNameEditBox", self, "CENTER", 50, 110, "", 150, "Template Name"))

	local i = 1
	for k, v in pairsByKey(tabVS) do
		 for kk, vv in pairs(tabVS[k]) do
				if vv ~= "Max" then
					i = i + 1
					table.insert(self.statBoxes, createEditBox(vv, self.statBoxes[i-1], "TOPLEFT", 50, 110,k,50,vv))
					stats[vv] = k
				end
		 end
	end

	InterfaceOptions_AddCategory(self)
end

function CustomWeightsFrame_OnShow(self)

	--A revoir
	if GearHelper.db.profile.weightTemplate == 10000 and GHVar.customWeights[specID] ~= nil then
		for stat, val in pairs(GHVar.customWeights[specID]) do
			 if type(tabVS[val]) ~= "table" then
					tabVS[val] = {}
			 end
			 table.insert(tabVS[val], stat)
		end
	elseif GearHelper.db.profile.weightTemplate ~= 10000 then
		for stat, val in pairs(GH_Globals[specID + 1000]) do
			 if type(tabVS[val]) ~= "table" then
					tabVS[val] = {}
			 end
			 table.insert(tabVS[val], stat)
		end
	elseif GearHelper.db.profile.weightTemplate == 10000 and GHVar.customWeights[specID] == nil then
		GHVar.customWeights[specID] = GH_Globals[specID + 1000]

		for stat, val in pairs(GHVar.customWeights[specID]) do
			 if type(tabVS[val]) ~= "table" then
					tabVS[val] = {}
			 end
			 table.insert(tabVS[val], stat)
		end
	end
end
			---------------------------------------   ENLEVER COMMENT QUAND ON REMET BOUTON MINIMAP ---------------------------------------
			--hideMinimapButton = hideMinimapButton
			---------------------------------------   ENLEVER COMMENT QUAND ON REMET BOUTON MINIMAP ---------------------------------------




			radioNoxxicButton:SetScript("OnClick", function(self,event,arg1)
				if self:GetChecked() then
					GearHelper.db.profile.weightTemplate = 0
					radioNoxxicButton:SetChecked(true)
					radioAMRButton:SetChecked(false)
					scanCharacter()
					scanBag()
				else
					GearHelper.db.profile.weightTemplate = 0
					radioNoxxicButton:SetChecked(true)
					radioAMRButton:SetChecked(false)
					scanCharacter()
					scanBag()
				end
				if GearHelper.db.profile.weightTemplate == 10000 then
					GearHelper.db.global.templates["72"]["AMR"] = GHVar.customWeights[GetSpecializationInfo(GetSpecialization(), false, false, UnitName("player"), UnitSex("player"))]
				else
					GearHelper.db.global.templates["72"]["AMR"] = GH_Globals[GetSpecializationInfo(GetSpecialization(), false, false, UnitName("player"), UnitSex("player")) + GearHelper.db.profile.weightTemplate]
				end
			end)

			radioAMRButton:SetScript("OnClick", function(self,event,arg1)
				if self:GetChecked() then
						GearHelper.db.profile.weightTemplate = 1000 ---------------------------------------------- METTRE à 1000 QUAND AMR EST UPDATE
						radioAMRButton:SetChecked(true)
						radioNoxxicButton:SetChecked(false)
						scanCharacter()
						scanBag()
					else
						GearHelper.db.profile.weightTemplate = 1000 ---------------------------------------------- METTRE à 1000 QUAND AMR EST UPDATE
						radioAMRButton:SetChecked(true)
						radioNoxxicButton:SetChecked(false)
						scanCharacter()
						scanBag()
					end
					if GearHelper.db.profile.weightTemplate == 10000 then
					GearHelper.db.global.templates["72"]["AMR"] = GHVar.customWeights[GetSpecializationInfo(GetSpecialization(), false, false, UnitName("player"), UnitSex("player"))]
				else
					GearHelper.db.global.templates["72"]["AMR"] = GH_Globals[GetSpecializationInfo(GetSpecialization(), false, false, UnitName("player"), UnitSex("player")) + GearHelper.db.profile.weightTemplate]
				end
				end)

			radioDoNotRepairButton:SetScript("OnClick", function ( self,event, arg1 )
				radioDoNotRepairButton:SetChecked(true)
				if self:GetChecked() then
					radioDoNotRepairButton:SetChecked(true)
					radioAutoRepairButton:SetChecked(false)
					radioAutoRepairGuildButton:SetChecked(false)
					setAutoRepair(0)
				end
			end)
			radioAutoRepairButton:SetScript("OnClick", function ( self,event, arg1 )
				radioAutoRepairButton:SetChecked(true)
				if self:GetChecked() then
					radioDoNotRepairButton:SetChecked(false)
					radioAutoRepairButton:SetChecked(true)
					radioAutoRepairGuildButton:SetChecked(false)
					setAutoRepair(1)
				end
			end)
			radioAutoRepairGuildButton:SetScript("OnClick", function ( self,event, arg1 )
				radioAutoRepairGuildButton:SetChecked(true)
				if self:GetChecked() then
					radioDoNotRepairButton:SetChecked(false)
					radioAutoRepairButton:SetChecked(false)
					radioAutoRepairGuildButton:SetChecked(true)
					setAutoRepair(2)
				end
			end)


			UIGHCheckBoxAddon:SetScript("OnClick", function(self,event,arg1)
				if self:GetChecked() then
					setActivated(true)
				else
					setActivated(false)
				end
			end)

			UIGHCheckBoxSellGrey:SetScript("OnClick", function(self,event,arg1)
				if self:GetChecked() then
					setSellGrey(true)
				else
					setSellGrey(false)
				end
			end)

			UIGHCheckBoxAutoGreed:SetScript("OnClick", function(self,event,arg1)
				if self:GetChecked() then
					setAutoGreed(true)
				else
					setAutoGreed(false)
				end
			end)

			UIGHCheckBoxAutoAcceptQuestReward:SetScript("OnClick", function(self,event,arg1)
				if self:GetChecked() then
					setAutoAcceptQuestReward(true)
				else
					setAutoAcceptQuestReward(false)
				end
			end)

			UIGHCheckBoxAutoNeed:SetScript("OnClick", function(self,event,arg1)
				if self:GetChecked() then
					setAutoNeed(true)
				else
					setAutoNeed(false)
				end
			end)

			UIGHCheckBoxAutoEquipLootedStuff:SetScript("OnClick", function(self,event,arg1)
				if self:GetChecked() then
					setAutoEquipLootedStuff(true)
				else
					setAutoEquipLootedStuff(false)
				end
			end)

			checkGHAutoInvite:SetScript("OnClick", function(self,event,arg1)
				if self:GetChecked() then
					setAutoInvite(true)
				else
					setAutoInvite(false)
				end
			end)


			checkGHAutoTell:SetScript("OnClick", function ( self, event, arg1 )
				if self:GetChecked() then
					setGHAutoTell(true)
				else
					setGHAutoTell(false)
				end
			end)


			checkGHPrintWhenEquip:SetScript("OnClick", function (self, event, arg1)
				if self:GetChecked() then
					setPrintWhenEquip(true)
				else
					setPrintWhenEquip(false)
				end
			end)

			---------------------------------------   ENLEVER COMMENT QUAND ON REMET BOUTON MINIMAP ---------------------------------------
			--hideMinimapButton:SetScript("OnClick", function(self,event,arg1)
			--	if self:GetChecked() then
			--		GHMinimapButton = true
			--		MyMod_MinimapButton:Show()
			--	else
			--		MyMod_MinimapButton:Hide()
			--		GHMinimapButton = false
			--	end
			--end)
			---------------------------------------   ENLEVER COMMENT QUAND ON REMET BOUTON MINIMAP ---------------------------------------

			UIGHCheckBoxAutoEquipWhenSwitchSpe:SetScript("OnClick", function(self,event,arg1)
			  	if self:GetChecked() then
			  		setAutoEquipWhenChangeSpe(true)
			  	else
			  		setAutoEquipWhenChangeSpe(false)
			  	end
			end)

			UIGHCheckBoxAskLootRaid:SetScript("OnClick", function(self,event,arg1)
			  	if self:GetChecked() then
			  		setAskLootRaid(true)
			  	else
			  		setAskLootRaid(false)
			  	end
			end)

			equipButton:SetScript("OnClick", function(self, event, arg1)
				waitEquipTimer1 = time()
				waitEquipFrame1:Show()
			end)


local function updateGHMenu()

	checkGHAutoInvite.text:SetText(L["UIGHCheckBoxAutoInvite"]..tostring( GearHelper.db.profile.inviteMessage ))

	if UIGHCheckBoxAddon ~= nil then
		if GHVarChar.addonActivatedtivated then
			UIGHCheckBoxAddon:SetChecked(true)
		else
			UIGHCheckBoxAddon:SetChecked(false)
		end
	end

	if UIGHCheckBoxSellGrey ~= nil then
		if GearHelper.db.profile.sellGreyItems then
			UIGHCheckBoxSellGrey:SetChecked(true)
		else
			UIGHCheckBoxSellGrey:SetChecked(false)
		end
	end

	if UIGHCheckBoxAutoGreed ~= nil then
		if GearHelper.db.profile.autoGreed then
			UIGHCheckBoxAutoGreed:SetChecked(true)
		else
			UIGHCheckBoxAutoGreed:SetChecked(false)
		end
	end

	if UIGHCheckBoxAutoAcceptQuestReward ~= nil then
		if GearHelper.db.profile.autoAcceptQuestReward then
			UIGHCheckBoxAutoAcceptQuestReward:SetChecked(true)
		else
			UIGHCheckBoxAutoAcceptQuestReward:SetChecked(false)
		end
	end

	if UIGHCheckBoxAutoNeed ~= nil then
		if GearHelper.db.profile.autoNeed then
			UIGHCheckBoxAutoNeed:SetChecked(true)
		else
			UIGHCheckBoxAutoNeed:SetChecked(false)
		end
	end

	if UIGHCheckBoxAutoEquipLootedStuff ~= nil then
		if GearHelper.db.profile.autoEquipLooted.actual then
			UIGHCheckBoxAutoEquipLootedStuff:SetChecked(true)
		else
			UIGHCheckBoxAutoEquipLootedStuff:SetChecked(false)
		end
	end

	if UIGHCheckBoxAutoEquipWhenSwitchSpe ~= nil then
		if GearHelper.db.profile.autoEquipWhenSwitchSpe then
			UIGHCheckBoxAutoEquipWhenSwitchSpe:SetChecked(true)
		else
			UIGHCheckBoxAutoEquipWhenSwitchSpe:SetChecked(false)
		end
	end

	if checkGHAutoInvite ~= nil then
		if GearHelper.db.profile.autoInvite then
			checkGHAutoInvite:SetChecked(true)
		else
			checkGHAutoInvite:SetChecked(false)
		end
	end

	if checkGHAutoTell ~= nil then
		if GearHelper.db.profile.autoTell then
			checkGHAutoTell:SetChecked(true)
		else
			checkGHAutoTell:SetChecked(false)
		end
	end


	if radioDoNotRepairButton ~= nil and radioAutoRepairButton ~= nil and radioAutoRepairGuildButton ~= nil then
		if GHVarChar.addonOptions["RepairWithOwnGold"] == 0 then
			radioDoNotRepairButton:SetChecked(true)
			radioAutoRepairButton:SetChecked(false)
			radioAutoRepairGuildButton:SetChecked(false)
		end
		if GHVarChar.addonOptions["RepairWithOwnGold"] == 1 then
			radioDoNotRepairButton:SetChecked(false)
			radioAutoRepairButton:SetChecked(true)
			radioAutoRepairGuildButton:SetChecked(false)
		end
		if GHVarChar.addonOptions["RepairWithOwnGold"] == 2 then
			radioDoNotRepairButton:SetChecked(false)
			radioAutoRepairButton:SetChecked(false)
			radioAutoRepairGuildButton:SetChecked(true)
		end
	end


	if radioAMRButton ~= nil and radioNoxxicButton ~= nil then
		if GearHelper.db.profile.weightTemplate == 1000 then
			-- radioIcyVeinsButton:SetChecked(false)
			radioAMRButton:SetChecked(true)
			radioNoxxicButton:SetChecked(false)
		elseif GearHelper.db.profile.weightTemplate == 0 then
			-- radioIcyVeinsButton:SetChecked(false)
			radioAMRButton:SetChecked(false)
			radioNoxxicButton:SetChecked(true)
		elseif GearHelper.db.profile.weightTemplate == 10000 then
			-- radioIcyVeinsButton:SetChecked(true)
			radioAMRButton:SetChecked(false)
			radioNoxxicButton:SetChecked(false)
		end
	end
end



local BUTTON_HEIGHT = 23 -- actually 25, but with a y-offset shrinking by 2

local ckbi = CreateFrame("Frame","CKBIFrame",KeyBindingFrame)

function ckbi:BuildUI()
  self:SetPoint("TOPLEFT",KeyBindingFrameBinding1)
  self:SetPoint("BOTTOMRIGHT",KeyBindingFrameScrollFrameScrollBarScrollDownButton,"BOTTOMLEFT")
  -- scrollframe is the mousewheel'able area where buttons will be drawn
  self.scrollFrame = CreateFrame("ScrollFrame","CKBIScrollFrame",self,"HybridScrollFrameTemplate")
  self.scrollFrame:SetAllPoints(true)
  -- scrollbar is just to the right of the scrollframe
  self.scrollBar = CreateFrame("Slider","CKBIScrollFrameScrollBar",self.scrollFrame,"HybridScrollBarTemplate")
  self.scrollBar:SetPoint("TOPLEFT",KeyBindingFrameScrollFrameScrollBar,"TOPLEFT",0,0)
  self.scrollBar:SetPoint("BOTTOMRIGHT",KeyBindingFrameScrollFrameScrollBar,"BOTTOMRIGHT",1,0)
  -- HybridScrollFrame creation
  self.scrollFrame.stepSize = BUTTON_HEIGHT*4 -- jump by 4 buttons on mousewheel
  self.scrollFrame.update = self.Update
  HybridScrollFrame_CreateButtons(self.scrollFrame,"CKBITemplate",0,0,"TOPLEFT","TOPLEFT",0,2,"TOP","BOTTOM")

  -- hide old UI bits we don't want to show
  KeyBindingFrameScrollFrame:Hide()
  for i=1,17 do
    _G["KeyBindingFrameBinding"..i]:Hide()
  end
  KeyBindingFrame_Update = function() end

  -- collapsable bits
  self.workingList = {} -- array of indexes to GetBinding()
  self.workingHeadersOpen = {} -- table indexed by header name of heads open

  self:UpdateWorkingList() -- update display
end

-- called from template's header button <OnClick> handler
function ckbi:HeaderOnClick()
  local command = GetBinding(ckbi.workingList[self:GetID()])
  -- toggle whether header expanded or not
  ckbi.workingHeadersOpen[command] = not ckbi.workingHeadersOpen[command]
  ckbi:UpdateWorkingList()
end

function ckbi:UpdateWorkingList()
  wipe(self.workingList)
  local skipping
  for i=1,GetNumBindings() do
    local command, key1, key2 = GetBinding(i)
    if not command:match("^HEADER_BLANK") then -- skip the "aesthetic" blank ones in multiactionbars
      if command:match("^HEADER") then
        skipping = not self.workingHeadersOpen[command]
        table.insert(self.workingList,i)
      elseif not skipping then
        table.insert(self.workingList,i)
      end
    end
  end
  self:Update()
end

function ckbi:Update(...)

  local self = self or ckbi -- HybridScrollFrames don't pass any parameters to this function

  local offset = HybridScrollFrame_GetOffset(self.scrollFrame)
  local buttons = self.scrollFrame.buttons

  for i=1, #buttons do
    local index = i + offset
    local button = buttons[i]
    button:Hide()
    if index <= #self.workingList then
      button:SetID(index)
      local command,key1,key2 = GetBinding(self.workingList[index])
      if command:match("^HEADER_") then
        button.header.text:SetText(_G["BINDING_"..command] or command:match("HEADER_(.+)"))
        if self.workingHeadersOpen[command] then
          button.header.expandIcon:SetTexCoord(0.5625,1,0,0.4375) -- minus sign
        else
          button.header.expandIcon:SetTexCoord(0,0.4375,0,0.4375) -- plus sign
        end
        button.detail:Hide()
        button.header:Show()
      else
        button.detail.text:SetText(GetBindingText(command,"BINDING_NAME_"))
        button.detail.key1:SetText(key1 and GetBindingText(key1,"KEY_") or NORMAL_FONT_COLOR_CODE..NOT_BOUND..FONT_COLOR_CODE_CLOSE)
        button.detail.key1:SetAlpha(key1 and 1 or .8)
        button.detail.key2:SetText(key2 and GetBindingText(key2,"KEY_") or NORMAL_FONT_COLOR_CODE..NOT_BOUND..FONT_COLOR_CODE_CLOSE)
        button.detail.key2:SetAlpha(key2 and 1 or .8)
        button.header:Hide()
        button.detail:Show()
      end
      button:Show()
    end
  end

  HybridScrollFrame_Update(self.scrollFrame, BUTTON_HEIGHT*#self.workingList, BUTTON_HEIGHT)
end

ckbi:BuildUI()

]]--
