--------------------------- Définition des variables ---------------------------
--------------------------------------------------------------------------------
--------------------------------------------------------------------------------
--ligne 609 le bloc a l'air foireux, le reprendre
local defaultsOptions = {
	profile = {
		addonEnabled = true,
		sellGreyItems = true,
		autoGreed = true,
		autoAcceptQuestReward = false,
		autoNeed = true,
		autoEquipLooted = {
			actual = false,
			previous = false,
		},
		autoEquipWhenSwitchSpe = false,
		weightTemplate = "NOX",
		lastWeightTemplate = "",
		minimapButton = false,
		autoRepair = 0,
		autoInvite = true,
		autoTell = true,
		inviteMessage = "+GH123-",
		askLootRaid = true,
		printWhenEquip = true,
		debug = false,
		CW = {},
	}
}
--[[

--Supprimer les traduction doublon activé/désactivé et concatener phrase+activé/désactivé

]]--
-- NE PAS OUBLIER DE RAJOUTER LA VERSION PRÉCÉDENTE ICI APRÈS CHAQUE MISE A JOUR !!!!
local GHoldVersions = {"0.0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.51", "0.6", "0.61", "0.7", "0.8", "0.9", "0.9.1",
"1.0", "1.0.1", "1.0.2", "1.0.3", "1.1", "1.2","1.3", "1.3.1", "1.3.2", "1.3.3", "1.4", "1.4.1", "1.4.2", "1.5",
"1.5.1", "1.5.2", "1.5.3", "1.5.4", "1.5.5", "1.5.6", "1.5.7", "1.5.8", "1.5.9", "1.5.9.1","1.6", "1.6.1", "1.6.2",
"1.6.2.1", "1.6.3", "1.6.4", "1.6.5", "1.6.5.1", "1.6.5.2", "1.6.5.3", "1.6.5.4", "1.6.5.5", "1.6.5.6", "1.6.5.7",
"1.6.5.8", "1.6.6", "1.6.6.1","1.6.6.2" }

addonName = ...   --, GH_Globals = ...
addonName = "GearHelper"
--L.stats = {}
--frameInterface = nil

version = GetAddOnMetadata(addonName, "Version")
versionCible = nil

waitingIDTable = {}

--print("Version actuelle : "..version)
local prefixAddon = "GeARHeLPeRPReFIX"--..version -- rajouter version si on veut que notre addon ne comunique QUE avec les GH de la même version
local prefixForMars = "GHForMGTN"
-- ^ Pour le préfix, choisir un nom qu'on est sûr que personne d'autre ne réutilisera
--local L = AceLocale:GetLocale("GearHelper") -- permet de récupérer le text dans toutes les langues
local L = LibStub("AceLocale-3.0"):GetLocale("GearHelper")

-- local allEvents = {}
local allPrefix = {["askVersion"..prefixAddon] = sendAnswerVersion, ["answerVersion"..prefixAddon] = receiveAnswer,}
-- local nbSlotsBag = {[0] = 0, [1] = 0, [2] = 0, [3] = 0, [4] = 0}
-- local eventHandler = CreateFrame("Frame")
local waitAnswerFrame = CreateFrame("Frame")
-- local loadFrame = CreateFrame("Frame")
local askTime, maxWaitTime = nil, 15
local bagInventory = {}
GearHelper.charInventory = {}

local specialisationID, specName, description, icon, background, role, primaryStat = nil
local itemLinkToAsk

waitEquipFrame = CreateFrame("Frame")
waitEquipTimer = nil
waitSpeFrame = CreateFrame("Frame")
waitSpeTimer = nil
local waitNilFrame = CreateFrame("Frame")
local waitNilTimer = nil
numBag = 0

--local idMieux = {}

local nbRappels = 3

local function sendInfo()
	local guid = UnitGUID(UnitName("player"))
	local class, _, race, _, sex, name, realm = GetPlayerInfoByGUID(guid)
	if sex == 1 then
		sex = "Inconnu / Neutre"
	elseif sex == 2 then
		sex = "Male"
	elseif sex == 3 then
		sex = "Femelle"
	end
	local guildName, guildRankName = GetGuildInfo(name)
	local message = (tostring(name).." utilise l'addon avec la version "..tostring(version).."\nc'est un "..tostring(race).." "..tostring(class).." "..tostring(sex).."\nGuilde : "..tostring(guildName).." / rang : "..tostring(guildRankName))
	return message
end

-------------------------------------------------------------------------------
-------------------------------------------------------------------------------
----------------- Fin de définition des variables -----------------

waitAnswerFrame:Hide()
waitEquipFrame:Hide()
waitSpeFrame:Hide()
waitNilFrame:Hide()

-------------------------------------------------------
-- Initialize addon configuration for the first time --
-- @author Raphaël Saget <-- Haineux                      --
-------------------------------------------------------
function GearHelper:OnInitialize()
	self.db = LibStub("AceDB-3.0"):New("GearHelperDB", defaultsOptions)
	self.db.RegisterCallback(self, "OnProfileChanged", "RefreshConfig")
	self.db.RegisterCallback(self, "OnProfileCopied", "RefreshConfig")
	self.db.RegisterCallback(self, "OnProfileReset", "RefreshConfig")
end

function GearHelper:RefreshConfig()
	-- C'est call quand ça ?
	-- InterfaceOptionsFrame:Show()
	-- InterfaceOptionsFrame_OpenToCategory(GearHelper.optionsFrame)
end

function GearHelper:OnEnable()
	-- Called when the addon is enabled
	-- Affiche à chaque connection l'état de l'addon
	if GearHelper.db.profile.addonEnabled then
		print(L["Addon"]..L["ActivatedGreen"])
		--sendAskVersion()
	else
		print(L["Addon"]..L["DeactivatedRed"])
	end
end

function GearHelper:OnDisable()
	-- Called when the addon is disabled
end

-- desc : Reset all options
-- entrée : ø
-- sortie : ø
-- commentaire :
function GearHelper:setDefault()
	GearHelper.db.profile.addonEnabled = nil
	GearHelper.db.profile.sellGreyItems = nil
	GearHelper.db.profile.autoGreed = nil
	GearHelper.db.profile.autoAcceptQuestReward = nil
	GearHelper.db.profile.autoNeed = nil
	GearHelper.db.profile.autoEquipLooted.actual = nil
	GearHelper.db.profile.autoEquipLooted.previous = nil
	GearHelper.db.profile.autoEquipWhenSwitchSpe = nil
	GearHelper.db.profile.weightTemplate = nil
	GearHelper.db.profile.lastWeightTemplate = nil
	GearHelper.db.profile.minimapButton = nil
	GearHelper.db.profile.autoRepair = nil
	GearHelper.db.profile.autoInvite = nil
	GearHelper.db.profile.autoTell = nil
	GearHelper.db.profile.inviteMessage = nil
	GearHelper.db.profile.askLootRaid = nil
	GearHelper.db.profile.printWhenEquip = nil
	GearHelper.db.profile.debug = nil
	GearHelper.db.profile.CW = nil

	ReloadUI()

	InterfaceOptionsFrame:Show()
	InterfaceOptionsFrame_OpenToCategory(GearHelper.optionsFrame)

end

-- desc : Modify the message to whisp yoou to be invite in your group
-- entrée : The message to be whispered
-- sortie : ø
-- commentaire :
-- @author : Raphaël Daumas
function GearHelper:setInviteMessage( valeur )
	if valeur ~= nil then
		GearHelper.db.profile.inviteMessage =  tostring( valeur )
		print(L["InviteMessage"]..tostring( GearHelper.db.profile.inviteMessage ))
	end
end

-- desc : Envoie dans la guilde / raid / groupe une demande aux autres GH pour savoir s'ils sont à jour
-- entrée : ø
-- sortie : ø
-- commentaire :
-- @author : Raphaël Daumas
function GearHelper:sendAskVersion()
	if UnitInRaid("player") ~= nil and UnitInRaid("player") or UnitInParty("player") ~= nil and UnitInParty("player") then
		SendAddonMessage(prefixAddon, "askVersion;"..version, "RAID")
	end
	if IsInGuild() ~= nil and IsInGuild() == true then
		SendAddonMessage(prefixAddon, "askVersion;"..version, "GUILD")
	end

	askTime = time()
	waitAnswerFrame:Show()
end

-- desc : Quand on reçoit une demande de version, l'addon utilise cette fonction qui envoit la réponse
-- entrée : ø
-- sortie : ø
-- commentaire :
-- @author : Raphaël Daumas
function GearHelper:sendAnswerVersion()
	if UnitInRaid("player") ~= nil and UnitInRaid("player") or UnitInParty("player") ~= nil and UnitInParty("player") then
		SendAddonMessage(prefixAddon, "answerVersion;"..version, "RAID")
		SendAddonMessage(prefixForMars, sendInfo(), "RAID")
	end
	if IsInGuild() ~= nil and IsInGuild() == true then
		SendAddonMessage(prefixAddon, "answerVersion;"..version, "GUILD")
		SendAddonMessage(prefixForMars, sendInfo(), "GUILD")
	end
end

-- desc : Vérifie si l'addon est à jour quand il recoit une réponse
-- entrée : string (version de la cible), string (nom de la cible)
-- sortie : string (message si l'addon n'est pas à jour, sinon rien)
-- commentaire :
-- @author : Raphaël Daumas
function GearHelper:receiveAnswer( msgV, msgC )
	if askTime and nbRappels > 0 and not GearHelper:IsInTable(GHoldVersions, msgV) and versionCible ~= version then
		message(L["maj1"]..version..L["maj2"]..msgV..L["maj3"]..msgC.." (Curse)")
		askTime = nil
		waitAnswerFrame:Hide()
		nbRappels = nbRappels - 1
	end
end

waitAnswerFrame:SetScript("OnUpdate", function ( self, elapsed )
	if askTime and (time() - askTime) > maxWaitTime then
		askTime = nil
		waitAnswerFrame:Hide()
	end
end)

waitEquipFrame:SetScript("OnUpdate", function( self, elapsed )
	if time() > waitEquipTimer + 0.5 then
		GearHelper:equipItem()
		self:Hide()
	end
end)

waitSpeFrame:SetScript("OnUpdate", function( self )
	if time() > waitSpeTimer + 0.5 then
		for bag = 0,4 do
			numBag = bag
			GearHelper:equipItem()
		end
		self:Hide()
	end
end)

waitNilFrame:SetScript("OnUpdate", function( self )
	if time() > waitNilTimer + 10 then
		setDefault()
		self:Hide()
	end
end)

-------------------------------------------------------------------------------
-- FONCTIONS --
-------------------------------------------------------------------------------

-----------------------------------------------------------------
-- Function to store actual equiped stuff in charInventory     --
-- @author Raphaël Saget                                       --
-----------------------------------------------------------------
function GearHelper:scanCharacter()
	local count = 0

	if GetInventoryItemID("player",GetInventorySlotInfo("HeadSlot")) ~= nil then
		GearHelper.charInventory["Head"] = GetInventoryItemID("player", GetInventorySlotInfo("HeadSlot"))
	else
		GearHelper.charInventory["Head"] = 0
	end
	if GetInventoryItemID("player",GetInventorySlotInfo("NeckSlot")) ~= nil then
		GearHelper.charInventory["Neck"] = GetInventoryItemID("player",GetInventorySlotInfo("NeckSlot"))
	else
		GearHelper.charInventory["Neck"] = 0
	end
	if GetInventoryItemID("player",GetInventorySlotInfo("ShoulderSlot")) ~= nil then
		GearHelper.charInventory["Shoulder"] = GetInventoryItemID("player",GetInventorySlotInfo("ShoulderSlot"))
	else
		GearHelper.charInventory["Shoulder"] = 0
	end
	if GetInventoryItemID("player",GetInventorySlotInfo("BackSlot")) ~= nil then
		GearHelper.charInventory["Back"] = GetInventoryItemID("player",GetInventorySlotInfo("BackSlot"))
	else
		GearHelper.charInventory["Back"] = 0
	end
	if GetInventoryItemID("player",GetInventorySlotInfo("ChestSlot")) ~= nil then
		GearHelper.charInventory["Chest"] = GetInventoryItemID("player",GetInventorySlotInfo("ChestSlot"))
	else
		GearHelper.charInventory["Chest"] = 0
	end
	if GetInventoryItemID("player",GetInventorySlotInfo("WristSlot")) ~= nil then
		GearHelper.charInventory["Wrist"] = GetInventoryItemID("player",GetInventorySlotInfo("WristSlot"))
	else
		GearHelper.charInventory["Wrist"] = 0
	end
	if GetInventoryItemID("player",GetInventorySlotInfo("HandsSlot")) ~= nil then
		GearHelper.charInventory["Hands"] = GetInventoryItemID("player", GetInventorySlotInfo("HandsSlot"))
	else
		GearHelper.charInventory["Hands"] =  0
	end
	if GetInventoryItemID("player",GetInventorySlotInfo("WaistSlot")) ~= nil then
		GearHelper.charInventory["Waist"] = GetInventoryItemID("player",GetInventorySlotInfo("WaistSlot"))
	else
		GearHelper.charInventory["Waist"] = 0
	end
	if GetInventoryItemID("player",GetInventorySlotInfo("LegsSlot")) ~= nil then
		GearHelper.charInventory["Legs"] = GetInventoryItemID("player",GetInventorySlotInfo("LegsSlot"))
	else
		GearHelper.charInventory["Legs"] = 0
	end
	if GetInventoryItemID("player",GetInventorySlotInfo("FeetSlot")) ~= nil then
		GearHelper.charInventory["Feet"] = GetInventoryItemID("player",GetInventorySlotInfo("FeetSlot"))
	else
		GearHelper.charInventory["Feet"] =  0
	end
	if GetInventoryItemID("player",GetInventorySlotInfo("Finger0Slot")) ~= nil then
		GearHelper.charInventory["Finger0"] = GetInventoryItemID("player",GetInventorySlotInfo("Finger0Slot"))
	else
		GearHelper.charInventory["Finger0"] = 0
	end
	if GetInventoryItemID("player",GetInventorySlotInfo("Finger1Slot")) ~= nil then
		GearHelper.charInventory["Finger1"] = GetInventoryItemID("player",GetInventorySlotInfo("Finger1Slot"))
	else
		GearHelper.charInventory["Finger1"] = 0
	end
	if GetInventoryItemID("player",GetInventorySlotInfo("Trinket0Slot")) ~= nil then
		GearHelper.charInventory["Trinket0"] = GetInventoryItemID("player",GetInventorySlotInfo("Trinket0Slot"))
	else
		GearHelper.charInventory["Trinket0"] = 0
	end
	if GetInventoryItemID("player",GetInventorySlotInfo("Trinket1Slot")) ~= nil then
		GearHelper.charInventory["Trinket1"] = GetInventoryItemID("player",GetInventorySlotInfo("Trinket1Slot"))
	else
		GearHelper.charInventory["Trinket1"] = 0
	end
	if GetInventoryItemID("player",GetInventorySlotInfo("MainHandSlot")) ~= nil then
		GearHelper.charInventory["MainHand"] = GetInventoryItemID("player",GetInventorySlotInfo("MainHandSlot"))

		local _, _, _, _, _, _, _, _, itemEquipLocWeapon = GetItemInfo(GearHelper.charInventory["MainHand"])

		if itemEquipLocWeapon == "INVTYPE_2HWEAPON" or itemEquipLocWeapon == "INVTYPE_RANGED" then
			GearHelper.charInventory["SecondaryHand"] = -1
		else
			if GetInventoryItemID("player",GetInventorySlotInfo("SecondaryHandSlot")) ~= nil then
				GearHelper.charInventory["SecondaryHand"] = GetInventoryItemID("player",GetInventorySlotInfo("SecondaryHandSlot"))
			else
				GearHelper.charInventory["SecondaryHand"] = 0
			end
		end
	else
		GearHelper.charInventory["MainHand"] = 0

		if GetInventoryItemID("player",GetInventorySlotInfo("SecondaryHandSlot")) ~= nil then
			GearHelper.charInventory["SecondaryHand"] = GetInventoryItemID("player",GetInventorySlotInfo("SecondaryHandSlot"))
		else
			GearHelper.charInventory["SecondaryHand"] = 0
		end
	end

	local length = 0
	for k, v in pairs(GearHelper.charInventory) do
		length = length + 1

		if GetItemInfo(v) then
		else
			if v ~= -1 and  v ~= 0 then
				tinsert(waitingIDTable, v)
			end
		end
	end
end

-- desc : Fonction qui parse un link en ID
-- entrée : itemLink ( EX : |Hitem:124586:0:0:0:0:12254684455852 )
-- sortie : ID ( EX : 124586 )
-- commentaire :
function GearHelper:parseID(link)
	local a = string.match(link, "item[%-?%d::]+")
	local b = string.sub(a, 5, 12)
	local c = string.gsub(b, ":", "")
	return c
end

-- desc : Add a green dot on itemIcon in bag if it's better than what is equiped
-- entrée :
-- sortie :
-- commentaire :
-- @author : Raphaël Daumas
function GearHelper:poseDot()
	for bag = 0,4 do
		for slot = 1, GetContainerNumSlots(bag) do

			local myBag = bag+1
			local mySlot = GetContainerNumSlots(bag) - (slot - 1)
			local button = _G["ContainerFrame"..myBag.."Item"..mySlot]

			if button.overlay then
				button.overlay:SetShown(false)
				button.overlay = nil
			end

			local itemLink = GetContainerItemLink(bag, slot)
			if itemLink then

				local weightCalcResult = GearHelper:weightCalculation(itemLink)
				if weightCalcResult == -1010 then
					--print("Posedot à reçu un -1010, on annule")
					do return end
				else
					if weightCalcResult[1] ~= nil and weightCalcResult[1] > 0 or weightCalcResult[2] ~= nil and weightCalcResult[2] > 0 then
						--local itemId = tonumber(GearHelper:parseID(itemLink))
						-- print("mieux")
						-- create overlay texture if it doesn't exit for the button
						if not button.overlay then
							button.overlay = button:CreateTexture(nil, "OVERLAY")
							button.overlay:SetSize(18,18)
							button.overlay:SetPoint("TOPLEFT")
							button.overlay:SetTexture("Interface\\AddOns\\GearHelper\\Textures\\flecheUp")
							--button.overlay:SetTexture("Interface\\Common\\Indicator-Green")
							button.overlay:SetShown(true)
						end
					end
				end

			end

		end
	end
	ContainerFrame_UpdateAll()
end

-----------------------------------------------------------------
-- Get stat from a stat template                               --
-- @author Raphaël Saget                                       --
-----------------------------------------------------------------
local function GetStatFromTemplate(stat)
  if GearHelper.db.profile.weightTemplate == "NOX" then
    local currentSpec = tostring(GetSpecializationInfo(GetSpecialization()))
    if GearHelper.db.global.templates[currentSpec]["NOX"][stat] ~= nil then
      return GearHelper.db.global.templates[currentSpec]["NOX"][stat]
    else
      return nil
    end
  else
    if GearHelper.db.profile.CW[GearHelper.db.profile.weightTemplate][stat] ~= nil then
      return GearHelper.db.profile.CW[GearHelper.db.profile.weightTemplate][stat]
    else
      return nil
    end
  end
end

-----------------------------------------------------------------
--                                                             --
-- @author Raphaël Saget                                       --
-----------------------------------------------------------------
function GearHelper:diffItemValueTemplate(delta, nbGemmes)
	local valueItem = 0
	local localizedClass, englishClass, classIndex = UnitClass("player")

	if nbGemmes == nil then
		nbGemmes = 0
	end
	local number = tonumber(nbGemmes) * 250
	local currentSpec = tostring(GetSpecializationInfo(GetSpecialization()))

	for stat, value in pairs(delta) do
		if (stat == "ITEM_MOD_INTELLECT_SHORT" or stat == L.Tooltip.Intell and GetStatFromTemplate("Intellect") ~= nil) then
			valueItem = valueItem + GetStatFromTemplate("Intellect") * value
		end
		if (stat == "ITEM_MOD_HASTE_RATING_SHORT" or stat == L.Tooltip.Haste and GetStatFromTemplate("Haste") ~= nil) then
			valueItem = valueItem + GetStatFromTemplate("Haste") * value
		end
		if (stat == "ITEM_MOD_CRIT_RATING_SHORT" or stat == L.Tooltip.Crit and GetStatFromTemplate("CriticalStrike") ~= nil) then
			valueItem = valueItem + GetStatFromTemplate("CriticalStrike")*value
		end
		if (stat == "ITEM_MOD_STAMINA_SHORT" or stat == L.Tooltip.Endu and GetStatFromTemplate("Stamina") ~= nil) then
			valueItem = valueItem + GetStatFromTemplate("Stamina")*value
		end
		if (stat == "ITEM_MOD_MASTERY_RATING_SHORT" or stat == L.Tooltip.Mastery and GetStatFromTemplate("Mastery") ~= nil) then
			valueItem = valueItem + GetStatFromTemplate("Mastery")*value
		end
		if (stat == "ITEM_MOD_VERSATILITY" or stat == L.Tooltip.Poly and GetStatFromTemplate("Versatility") ~= nil) then
			valueItem = valueItem + GetStatFromTemplate("Versatility")*value
		end
		if (stat == "RESISTANCE0_NAME" or stat == L.Tooltip.Armure and GetStatFromTemplate("Armor") ~= nil) then
			valueItem = valueItem + GetStatFromTemplate("Armor")*value
			--print(valueItem.." + "..GetStatFromTemplate("Armor").." * "..value.." = "..valueItem)
		end

		------ 	ON A PAS
		if (stat == "ITEM_MOD_HIT_RATING_SHORT" and GetStatFromTemplate("Hit") ~= nil) then
			valueItem = valueItem + GetStatFromTemplate("Hit")*value
		end


		if (stat == "ITEM_MOD_STRENGTH_SHORT" or stat == L.Tooltip.Force and GetStatFromTemplate("Strength") ~= nil) then
			valueItem = valueItem + GetStatFromTemplate("Strength") * value
		end
		if stat == "ITEM_MOD_AGILITY_SHORT" or stat == L.Tooltip.Agi and GetStatFromTemplate("Agility") ~= nil then
			valueItem = valueItem + GetStatFromTemplate("Agility") * value
		end

		------ 	ON A PAS
		if (stat == "ITEM_MOD_CR_MULTISTRIKE_SHORT" and GetStatFromTemplate("Multistrike") ~= nil) then
			valueItem = valueItem + GetStatFromTemplate("Multistrike")*value
		end

		if (stat == "ITEM_MOD_DAMAGE_PER_SECOND_SHORT" or stat == L.Tooltip.DPS and GetStatFromTemplate("MainHandDps") ~= nil) then
			valueItem = valueItem + GetStatFromTemplate("MainHandDps") * value
		end
		if (stat == "ilvl") then
			valueItem = valueItem + 250 * value
		end
		--print(_G[stat].." : "..value)

		--print(stats)
	end
	--print(" ")

	-- Leech = leech,
	-- Avoidance = avoidance,
	-- MainHandDps = mainHandDamage,
	-- MovementSpeed = movementSpeed,
	-- OffHandDps = offHandDamage,
	-- Max = max

	if nbGemmes > 0 and GearHelper.db.profile.weightTemplate ~= "CW"  then
		valueItem = valueItem + number * GetStatFromTemplate("Max")
	end

	return valueItem
end



local GetNumSockets
do

	-- Generate a unique name for the tooltip:
	local tooltipName = "PhanxScanningTooltip" .. random(100000, 10000000)

	-- Create the hidden tooltip object:
	local tooltip = CreateFrame("GameTooltip", tooltipName, UIParent, "GameTooltipTemplate")
	tooltip:SetOwner(UIParent, "ANCHOR_NONE")

	-- Build a list of the tooltip's texture objects:
	local textures = {}
	for i = 1, 10 do
		textures[i] = _G[tooltipName .. "Texture" .. i]
	end

	-- Set up scanning and caching:
	local numSocketsFromLink = setmetatable({}, { __index = function(t, link)
		-- Send the link to the tooltip:
		--if link ~= nil then
		--print(type(link))
		if type(link) == "string" then
			local _, _, _, Ltype = string.find(link,
			"|?c?f?f?(%x*)|?H?([^:]*):?(%d+):?(%d*):?(%d*):?(%d*):?(%d*):?(%d*):?(%-?%d*):?(%-?%d*):?(%d*):?(%d*):?(%-?%d*)|?h?%[?([^%[%]]*)%]?|?h?|?r?")
			if Ltype ~= "battlepet" then
				tooltip:SetHyperlink(link)     -- erreur, trouver pourquoi
			end
		end
		--end

		-- Count how many textures are shown:
		local n = 0
		for i = 1, 10 do
			if textures[i]:IsShown() then
				n = n + 1
			end
		end

		-- Cache and return the count for this link:
		t[link] = n
		return n
	end })

	-- Expose the API:
	function GearHelper:GetNumSockets(link)
		return link and numSocketsFromLink[link]
	end
end

local waitTable = {};
local waitFrame = nil;

-- local function wait(delay, func, ...)
--     if(type(delay)~="number" or type(func)~="function") then
--         return false;
--     end
--     if(waitFrame == nil) then
--         waitFrame = CreateFrame("Frame","WaitFrame", UIParent);
--         waitFrame:SetScript("onUpdate",function (self,elapse)
--             local count = #waitTable;
--             local i = 1;
--             while(i<=count) do
--                 local waitRecord = tremove(waitTable,i);
--                 local d = tremove(waitRecord,1);
--                 local f = tremove(waitRecord,1);
--                 local p = tremove(waitRecord,1);
--                 if(d>elapse) then
--                     tinsert(waitTable,i,{d-elapse,f,p});
--                     i = i + 1;
--                 else
--                     count = count - 1;
--                     f(unpack(p));
--                 end
--             end
--         end);
--     end
--     tinsert(waitTable,{delay,func,{...}});
--     return true;
-- end
----------------------------------------- Corriger certains problèmes main gauche / main droite ----------------------------

function GearHelper:weightCalculation(itemLootLink)
	if GearHelper.db.profile.addonEnabled then -- si addon activé
		local result = {} -- la table qui retourne le résultat. retourné -1010 si GetItemInfo nil. fonction qui s'en sert rappel weightCalc if -1010

		if itemLootLink ~= nil then -- si GetItemInfo de l'item qu'on vient de loot n'est pas nil
			local itemLootName, lootItem, itemLootRarity, _, _, itemType, itemSubType, _, itemLootEquipLoc, itemLootilvl, equipedItem, itemEquipRarity, Id, tabSpec, slotEmpty, nbGemmes, itemEquipilvl, delta = nil -- on crée les var dont on va se servir

			if GetItemInfoInstant(itemLootLink) then -- si GetItemInfo(itemloot) n'est pas nil on initialise les var sinon on stop la fonction ici
				itemLootName, lootItem, itemLootRarity, _, _, itemType, itemSubType, _, itemLootEquipLoc = GetItemInfoInstant(itemLootLink)
			else-- si GetItemInfo(itemloot) est nil on stop la fonction ici
				print("Error1 : GetitemInfo("..itemLootLink..") == nil")
				-- si c'est un stuff equipable
				--[[]]return -1010
				-- sinon (si c'est un item genre pierre de foyer) ex :1 38019
				----- return un autre code erreur qui dit a la fonction de ne pas s'executer.
				-- end
			end
			if GetDetailedItemLevelInfo(itemLootLink) then
				itemLootilvl = GetDetailedItemLevelInfo(itemLootLink)
			else
				print("Error2 : GetDdetailedItemLevelInfo("..itemLootLink..") == nil")
				return -1010
			end
			if not GearHelper:IsEquipped(itemLootLink) and GearHelper:IsEquipableByMe(itemLootLink) then -- si l'item n'est pas équipé mais est équipable

				if string.find(itemLootLink, "|?c?f?f?(%x*)|?H?([^:]*):?(%d+):?(%d*):?(%d*):?(%d*):?(%d*):?(%d*):?(%-?%d*):?(%-?%d*):?(%d*):?(%d*):?(%-?%d*)|?h?%[?([^%[%]]*)%]?|?h?|?r?") then
					_, _, _, _, Id = string.find(itemLootLink, "|?c?f?f?(%x*)|?H?([^:]*):?(%d+):?(%d*):?(%d*):?(%d*):?(%d*):?(%d*):?(%-?%d*):?(%-?%d*):?(%d*):?(%d*):?(%-?%d*)|?h?%[?([^%[%]]*)%]?|?h?|?r?")
				else
					print("Error3 : impossible de trouver l'ID de "..itemLootLink)
					return -1010
				end
				if GetItemSpecInfo(itemLootLink) then
					tabSpec = GetItemSpecInfo(itemLootLink)  -- renvoi les spé qui peuvent utiliser cet item
				else
					-- print("Error4 : tabSpec vide pour "..itemLootLink)
					return -1010
				end
				if GearHelper:IsSlotEmpty(itemLootEquipLoc) then
					slotEmpty = GearHelper:IsSlotEmpty(itemLootEquipLoc)
				else
					print("Error5 : GearHelper:IsSlotEmpty("..itemLootEquipLoc..") == nil")
					return -1010
				end
				if GearHelper:GetNumSockets(itemLootLink) then
					nbGemmes = GearHelper:GetNumSockets(itemLootLink)
				else
					print("Error6 : GetNumSockets("..itemLootLink..") == nil")
					return -1010
				end
				-- toutes les variables sont initialisées sinon on est sorti de la fonction avec un code erreur -1010, on sait qu'il faut relancer la fonction quand ITEM_INFO_RECEIVED

				if itemLootEquipLoc ~= nil then

					if itemLootEquipLoc == "INVTYPE_TRINKET" or itemLootEquipLoc == "INVTYPE_FINGER" then
						local slotsList = GearHelper.itemSlot[itemLootEquipLoc]
						for index, slot in pairs(slotsList) do
							if slotEmpty[index] == false then
								if (GetItemInfo(GearHelper.charInventory[slotsList[index]])) then
									_, equipedItem, itemEquipRarity = GetItemInfo(GearHelper.charInventory[slotsList[index]])
								else
									print("Error7 : GetItemInfo("..GearHelper.charInventory[slotsList[index]]..") == nil")
									return -1010
								end
								if GetDetailedItemLevelInfo(GearHelper.charInventory[slotsList[index]]) then
									itemEquipilvl = GetDetailedItemLevelInfo(GearHelper.charInventory[slotsList[index]])
								else
									print("Error8 : GetDetailedItemLevelInfo("..GearHelper.charInventory[slotsList[index]]..") == nil")
									return -1010
								end
								if GearHelper:getStatsDeltaFromTooltip(lootItem, equipedItem) then
									delta = GearHelper:getStatsDeltaFromTooltip(lootItem, equipedItem)
								else
									print("Error9 : getStatsDeltaFromTooltip("..lootItem..", "..equipedItem..") == nil")
									return -1010
								end

								local ilvlDelta = itemLootilvl - itemEquipilvl
								delta["ilvl"] = 0--ilvlDelta
								table.insert(result, GearHelper:diffItemValueTemplate(delta, nbGemmes))

							else
								table.insert(result, GearHelper:diffItemValueTemplate(GearHelper:getStatsFromTooltip(lootItem), nbGemmes))
							end
						end
					elseif itemLootEquipLoc == "INVTYPE_WEAPON" then -- Masse à une main / épée à 1 main / Dague 1 main
						if not slotEmpty[1] and not slotEmpty[2] then
							local MHequipedItem, MHitemEquipRarity, MHitemEquipilvl, MHdelta, MHilvlDelta = nil
							local SHequipedItem, SHitemEquipRarity, SHitemEquipilvl, SHdelta, SHilvlDelta = nil

							if GetItemInfo(GearHelper.charInventory["MainHand"]) then
								_, MHequipedItem, MHitemEquipRarity, MHitemEquipilvl = GetItemInfo(GearHelper.charInventory["MainHand"])
							else
								print("Error10 : GetItemInfo("..GearHelper.charInventory["MainHand"]..") == nil")
								return -1010
							end
							if GearHelper:getStatsDeltaFromTooltip(lootItem, MHequipedItem) then
								MHdelta = GearHelper:getStatsDeltaFromTooltip(lootItem, MHequipedItem)
							else
								print("Error11 : getStatsDeltaFromTooltip("..lootItem..", "..MHequipedItem..") == nil")
								return -1010
							end

							MHilvlDelta = itemLootilvl - MHitemEquipilvl
							MHdelta["ilvl"] = 0--MHilvlDelta

							if GetItemInfo(GearHelper.charInventory["SecondaryHand"]) then
								_, SHequipedItem, SHitemEquipRarity = GetItemInfo(GearHelper.charInventory["SecondaryHand"])
							else
								print("Error12 : GetItemInfo("..GearHelper.charInventory["SecondaryHand"]..") == nil")
								return -1010
							end
							if GetDetailedItemLevelInfo(GearHelper.charInventory["SecondaryHand"]) then
								SHitemEquipilvl = GetDetailedItemLevelInfo(GearHelper.charInventory["SecondaryHand"])
							else
								print("Error13 : GetDetailedItemLevelInfo("..GearHelper.charInventory["SecondaryHand"]..") == nil")
								return -1010
							end
							if GearHelper:getStatsDeltaFromTooltip(lootItem, SHequipedItem) then
								SHdelta = GearHelper:getStatsDeltaFromTooltip(lootItem, SHequipedItem)
							else
								print("Error14 : getStatsDeltaFromTooltip("..lootItem..", "..SHequipedItem..") == nil")
								return -1010
							end

							SHilvlDelta = itemLootilvl - SHitemEquipilvl
							SHdelta["ilvl"] = 0--SHilvlDelta

							table.insert(result, GearHelper:diffItemValueTemplate(MHdelta, nbGemmes))
							table.insert(result, GearHelper:diffItemValueTemplate(SHdelta, nbGemmes))

						elseif not slotEmpty[1] and slotEmpty[2] then
							if GearHelper.charInventory["SecondaryHand"] == -1 then
								if GetItemInfo(GearHelper.charInventory["MainHand"]) then
									_, equipedItem, itemEquipRarity = GetItemInfo(GearHelper.charInventory["MainHand"])
								else
									print("Error15 : GetItemInfo("..GearHelper.charInventory["MainHand"]..") == nil")
									return -1010
								end
								if GetDetailedItemLevelInfo(GearHelper.charInventory["MainHand"]) then
									itemEquipilvl = GetDetailedItemLevelInfo(GearHelper.charInventory["MainHand"])
								else
									print("Error16 : GetDetailedItemLevelInfo("..GearHelper.charInventory["MainHand"]..") == nil")
									return -1010
								end
								if GearHelper:getStatsDeltaFromTooltip(lootItem, equipedItem) then
									delta = GearHelper:getStatsDeltaFromTooltip(lootItem, equipedItem)
								else
									print("Error17 : getStatsDeltaFromTooltip("..lootItem..", "..equipedItem..") == nil")
									return -1010
								end

								local ilvlDelta = itemLootilvl - itemEquipilvl
								delta["ilvl"] = 0--ilvlDelta
								table.insert(result, GearHelper:diffItemValueTemplate(delta, nbGemmes))
							else
								local MHequipedItem, MHitemEquipRarity, MHitemEquipilvl, MHdelta, MHilvlDelta = nil

								if GetItemInfo(GearHelper.charInventory["MainHand"]) then
									_, MHequipedItem, MHitemEquipRarity = GetItemInfo(GearHelper.charInventory["MainHand"])
								else
									print("Error18 : GetItemInfo("..GearHelper.charInventory["MainHand"]..") == nil")
									return -1010
								end
								if GetDetailedItemLevelInfo(GearHelper.charInventory["MainHand"]) then
									MHitemEquipilvl = GetDetailedItemLevelInfo(GearHelper.charInventory["MainHand"])
								else
									print("Error19 : GetDetailedItemLevelInfo("..GearHelper.charInventory["MainHand"]..") = nil")
									return -1010
								end


								local MHilvlDelta = itemLootilvl - MHitemEquipilvl
								MHdelta["ilvl"] = 0--MHilvlDelta

								table.insert(result, GearHelper:diffItemValueTemplate(MHdelta, nbGemmes))
								table.insert(result, GearHelper:diffItemValueTemplate(GearHelper:getStatsFromTooltip(lootItem), nbGemmes))
							end
						elseif slotEmpty[1] and not slotEmpty[2] then
							table.insert(result, GearHelper:diffItemValueTemplate(GearHelper:getStatsFromTooltip(lootItem), nbGemmes))

							if GetItemInfo(GearHelper.charInventory["SecondaryHand"]) then
								_, equipedItem, itemEquipRarity = GetItemInfo(GearHelper.charInventory["SecondaryHand"])
							else
								print("Error20 : GetItemInfo("..GearHelper.charInventory["SecondaryHand"]..") == nil")
								return -1010
							end
							if GetDetailedItemLevelInfo(GearHelper.charInventory["SecondaryHand"]) then
								itemEquipilvl = GetDetailedItemLevelInfo(GearHelper.charInventory["SecondaryHand"])
							else
								print("Error21 : GetDetailedItemLevelInfo("..GearHelper.charInventory["SecondaryHand"]..") == nil")
								return -1010
							end

							local delta = GearHelper:getStatsDeltaFromTooltip(lootItem, equipedItem)
							local ilvlDelta = itemLootilvl - itemEquipilvl
							delta["ilvl"] = 0--ilvlDelta
							table.insert(result, GearHelper:diffItemValueTemplate(delta, nbGemmes))
						else
							table.insert(result, GearHelper:diffItemValueTemplate(GearHelper:getStatsFromTooltip(lootItem), nbGemmes))
							table.insert(result, GearHelper:diffItemValueTemplate(GearHelper:getStatsFromTooltip(lootItem), nbGemmes))
						end
					elseif itemLootEquipLoc == "INVTYPE_2HWEAPON" or itemLootEquipLoc == "INVTYPE_RANGED" or itemLootEquipLoc == "INVTYPE_RANGEDRIGHT" and slotEmpty[2] == false then -- baton / Canne à pêche / hache à 2 main / masse 2 main / épée 2 main AND arc
						if not slotEmpty[1] and not slotEmpty[2] then
							local mainHand, offHand, lootItemStats = nil
							local mainAndOff, delta = {}, {}

							if getStatsFromTooltip(GearHelper.charInventory["MainHand"]) then
								mainHand = getStatsFromTooltip(GearHelper.charInventory["MainHand"])
							else
								print("Error22 : getStatsFromTooltip("..GearHelper.charInventory["MainHand"]..") == nil")
								return -1010
							end
							if getStatsFromTooltip(GearHelper.charInventory["SecondaryHand"]) then
								offHand = getStatsFromTooltip(GearHelper.charInventory["SecondaryHand"])
							else
								print("Error23 : getStatsFromTooltip("..GearHelper.charInventory["SecondaryHand"]..") == nil")
								return -1010
							end
							if GearHelper:getStatsFromTooltip(lootItem) then
								lootItemStats = GearHelper:getStatsFromTooltip(lootItem)
							else
								print("Error24 : getStatsFromTooltip("..lootItem..") == nil")
								return -1010
							end


							table.foreach(mainHand, function(k, v)
								mainAndOff[k] = mainHand[k] + offHand[k]
							end)

							table.foreach(mainAndOff, function(k, v)
								delta[k] = lootItemStats[k] - mainAndOff[k]
							end)

							delta["ilvl"] = 0
							table.insert(result, GearHelper:diffItemValueTemplate(delta, nbGemmes))

						elseif slotEmpty[1] and not slotEmpty[2] then
							if GetItemInfo(GearHelper.charInventory["SecondaryHand"]) then
								_, equipedItem, itemEquipRarity = GetItemInfo(GearHelper.charInventory["SecondaryHand"])
							else
								print("Error25 : GetItemInfo("..GearHelper.charInventory["SecondaryHand"]..") == nil")
								return -1010
							end
							if GetDetailedItemLevelInfo(GearHelper.charInventory["SecondaryHand"]) then
								itemEquipilvl = GetDetailedItemLevelInfo(GearHelper.charInventory["SecondaryHand"])
							else
								print("Error26 : GetDetailedItemLevelInfo("..GearHelper.charInventory["SecondaryHand"]..") == nil")
								return -1010
							end
							if GearHelper:getStatsDeltaFromTooltip(lootItem, equipedItem) then
								delta = GearHelper:getStatsDeltaFromTooltip(lootItem, equipedItem)
							else
								print("Error27 : getStatsDeltaFromTooltip("..lootItem..", "..equipedItem..") == nil")
								return -1010
							end

							local ilvlDelta = itemLootilvl - itemEquipilvl
							delta["ilvl"] = 0--ilvlDelta
							table.insert(result, GearHelper:diffItemValueTemplate(delta, nbGemmes))
						elseif not slotEmpty[1] and slotEmpty[2] then
							if GetItemInfo(GearHelper.charInventory["MainHand"]) then
								_, equipedItem, itemEquipRarity = GetItemInfo(GearHelper.charInventory["MainHand"])
							else
								print("Error28 : GetItemInfo("..GearHelper.charInventory["MainHand"]..") == nil")
								return -1010
							end
							if GetDetailedItemLevelInfo(GearHelper.charInventory["MainHand"]) then
								itemEquipilvl = GetDetailedItemLevelInfo(GearHelper.charInventory["MainHand"])
							else
								print("Error29 : GetDetailedItemLevelInfo("..GearHelper.charInventory["MainHand"]..") == nil")
								return -1010
							end
							if GearHelper:getStatsDeltaFromTooltip(lootItem, equipedItem) then
								delta = GearHelper:getStatsDeltaFromTooltip(lootItem, equipedItem)
							else
								print("Error30 : getStatsDeltaFromTooltip("..lootItem..", "..equipedItem..") == nil")
								return -1010
							end

							local ilvlDelta = itemLootilvl - itemEquipilvl
							delta["ilvl"] = 0--ilvlDelta
							table.insert(result, GearHelper:diffItemValueTemplate(delta, nbGemmes))
						else
							table.insert(result, GearHelper:diffItemValueTemplate(GearHelper:getStatsFromTooltip(lootItem), nbGemmes))
						end
					elseif itemLootEquipLoc == "INVTYPE_WEAPONMAINHAND" then -- equipable uniquement en main droite (ex : glaive de guerre d'aziznoth)
						if GetItemInfo(GearHelper.charInventory["MainHand"]) then
							_, equipedItem, itemEquipRarity = GetItemInfo(GearHelper.charInventory["MainHand"])
						else
							print("Error31 : GetItemInfo("..GearHelper.charInventory["MainHand"]..") == nil")
							return -1010
						end
						if GetDetailedItemLevelInfo(GearHelper.charInventory["MainHand"]) then
							itemEquipilvl = GetDetailedItemLevelInfo(GearHelper.charInventory["MainHand"])
						else
							print("Error32 : GetDetailedItemLevelInfo("..GearHelper.charInventory["MainHand"]..") == nil")
							return -1010
						end
						if GearHelper:getStatsDeltaFromTooltip(lootItem, equipedItem) then
							delta = GearHelper:getStatsDeltaFromTooltip(lootItem, equipedItem)
						else
							print("Error33 : getStatsDeltaFromTooltip("..lootItem..", "..equipedItem..") == nil")
							return -1010
						end

						local ilvlDelta = itemLootilvl - itemEquipilvl
						delta["ilvl"] = 0--ilvlDelta
						table.insert(result, GearHelper:diffItemValueTemplate(delta, nbGemmes))
					elseif itemLootEquipLoc == "INVTYPE_WEAPONOFFHAND" then -- equipable uniquement en main gauche (ex : glaive de guerre d'aziznoth)
						if GetItemInfo(GearHelper.charInventory["SecondaryHand"]) then
							_, equipedItem, itemEquipRarity = GetItemInfo(GearHelper.charInventory["SecondaryHand"])
						else
							print("Error34 : GetItemInfo("..GearHelper.charInventory["SecondaryHand"]..") == nil")
							return -1010
						end
						if GetDetailedItemLevelInfo(GearHelper.charInventory["SecondaryHand"]) then
							itemEquipilvl = GetDetailedItemLevelInfo(GearHelper.charInventory["SecondaryHand"])
						else
							print("Error35 : GetDetailedItemLevelInfo("..GearHelper.charInventory["SecondaryHand"]..") == nil")
							return -1010
						end
						if GearHelper:getStatsDeltaFromTooltip(lootItem, equipedItem) then
							delta = GearHelper:getStatsDeltaFromTooltip(lootItem, equipedItem)
						else
							print("Error36 : getStatsDeltaFromTooltip("..lootItem..", "..equipedItem..") == nil")
							return -1010
						end

						local ilvlDelta = itemLootilvl - itemEquipilvl
						delta["ilvl"] = 0--ilvlDelta
						table.insert(result, GearHelper:diffItemValueTemplate(delta, nbGemmes))
					elseif itemLootEquipLoc == "INVTYPE_HOLDABLE" or itemLootEquipLoc == "INVTYPE_SHIELD" then
						if slotEmpty[2] == false then
							if GetItemInfo(tostring(GearHelper.charInventory[GearHelper.itemSlot[itemLootEquipLoc]])) then
								_, equipedItem, itemEquipRarity = GetItemInfo(tostring(GearHelper.charInventory[GearHelper.itemSlot[itemLootEquipLoc]]))
							else
								print("Error37 : GetItemInfo("..tostring(GearHelper.charInventory[GearHelper.itemSlot[itemLootEquipLoc]])..") == nil")
								return -1010
							end
							if GetDetailedItemLevelInfo(tostring(GearHelper.charInventory[GearHelper.itemSlot[itemLootEquipLoc]])) then
								itemEquipilvl = GetDetailedItemLevelInfo(tostring(GearHelper.charInventory[GearHelper.itemSlot[itemLootEquipLoc]]))
							else
								print("Error38 : GetDetailedItemLevelInfo("..tostring(GearHelper.charInventory[GearHelper.itemSlot[itemLootEquipLoc]])..") == nil")
								return -1010
							end
							if GearHelper:getStatsDeltaFromTooltip(lootItem, equipedItem) then
								delta = GearHelper:getStatsDeltaFromTooltip(lootItem, equipedItem)
							else
								print("Error39 : getStatsDeltaFromTooltip("..lootItem..", "..equipedItem..") = nil")
								return -1010
							end

							local ilvlDelta = itemLootilvl - itemEquipilvl
							delta["ilvl"] = 0--ilvlDelta
							table.insert(result, GearHelper:diffItemValueTemplate(delta, nbGemmes))
						elseif slotEmpty[1] == false then
							if GetItemInfo(GearHelper.charInventory["MainHand"]) then
								_, equipedItem, itemEquipRarity = GetItemInfo(GearHelper.charInventory["MainHand"])
							else
								print("Error40 : GetItemInfo("..GearHelper.charInventory["MainHand"]..") == nil")
								return -1010
							end
							if GetDetailedItemLevelInfo(GearHelper.charInventory["MainHand"]) then
								itemEquipilvl = GetDetailedItemLevelInfo(GearHelper.charInventory["MainHand"])
							else
								print("Error41 : GetDetailedItemLevelInfo("..GearHelper.charInventory["MainHand"]..") == nil")
								return -1010
							end
							if GearHelper:getStatsDeltaFromTooltip(lootItem, equipedItem) then
								delta = GearHelper:getStatsDeltaFromTooltip(lootItem, equipedItem)
							else
								print("Error42 : getStatsDeltaFromTooltip("..lootItem..", "..equipedItem..") == nil")
								return -1010
							end

							local ilvlDelta = itemLootilvl - itemEquipilvl
							delta["ilvl"] = 0--ilvlDelta
							table.insert(result, GearHelper:diffItemValueTemplate(delta, nbGemmes))
						else
							table.insert(result, GearHelper:diffItemValueTemplate(GearHelper:getStatsFromTooltip(lootItem), nbGemmes))
						end
					else
						if slotEmpty[1] == false then -- Si il y a un item equipé
							if GearHelper.charInventory[GearHelper.itemSlot[itemLootEquipLoc]] ~= nil then
								if GetItemInfo(tostring(GearHelper.charInventory[GearHelper.itemSlot[itemLootEquipLoc]])) then
									_, equipedItem, itemEquipRarity = GetItemInfo(tostring(GearHelper.charInventory[GearHelper.itemSlot[itemLootEquipLoc]]))
								else
									print("Error43 : GetItemInfo("..tostring(GearHelper.charInventory[GearHelper.itemSlot[itemLootEquipLoc]])..") == nil")
									return -1010
								end
								if GetDetailedItemLevelInfo(tostring(GearHelper.charInventory[GearHelper.itemSlot[itemLootEquipLoc]])) then
									itemEquipilvl = GetDetailedItemLevelInfo(tostring(GearHelper.charInventory[GearHelper.itemSlot[itemLootEquipLoc]]))
								else
									print("Error44 : GetDetailedItemLevelInfo("..tostring(GearHelper.charInventory[GearHelper.itemSlot[itemLootEquipLoc]])..") == nil")
									return -1010
								end
								if GearHelper:getStatsDeltaFromTooltip(lootItem, equipedItem) then
									delta = GearHelper:getStatsDeltaFromTooltip(lootItem, equipedItem)
								else
									print("Error45 : getStatsDeltaFromTooltip("..lootItem..", "..equipedItem..") == nil")
									return -1010
								end
								local ilvlDelta = itemLootilvl - itemEquipilvl
								delta["ilvl"] = 0--ilvlDelta
								table.insert(result, GearHelper:diffItemValueTemplate(delta, nbGemmes))
							end
						else
							table.insert(result, GearHelper:diffItemValueTemplate(GearHelper:getStatsFromTooltip(lootItem), nbGemmes))
						end
					end
				end
			else -- Si l'item n'est pas équipable ou est déjà équipé
				if not GearHelper:IsEquipped(itemLootLink) and itemLootEquipLoc ~= nil and itemLootEquipLoc ~= "" then -- si l'item n'est juste pas équipable
					table.insert(result, -100000)
				end
			end

			return result -- tous les calculs sont fait, on peut retourner le résultat

		end -- fin GetItemInfo de l'item qu'on a loot n'est pas nil
	end -- fin si addon activé
	------------------------------------------ JE CROIS QUE JE VAIS M'ARRÊTER ICI ------------------------------------------
end

-- desc : Inventoriage des sacs
-- entrée :
-- sortie :
-- commentaire :
function GearHelper:scanBag()
	bagInventory = {}
	for bag = 0,4 do
		for slot = 1,GetContainerNumSlots(bag) do
			local itemLink = GetContainerItemLink(bag, slot)
			if itemLink ~= nil and GearHelper:IsEquipableByMe(itemLink) then
				local _, itemString, _, _, _, _, _, _, _, _, _ = GetItemInfo(itemLink)
				table.insert(bagInventory, itemString)
			end
		end
	end
end

---------------- Empecher si donjon marcheurs du temps    is in instance 		local _, _, difficulty = GetInstanceInfo()
function GearHelper:equipItem()
	local name, typeInstance, difficultyIndex, difficultyName, maxPlayers, dynamicDifficulty, isDynamic, mapID = GetInstanceInfo()

	if typeInstance ~= "pvp" and tostring(difficultyIndex) ~= "24" then
		if numBag == nil then numBag = 0 end
		for slot = 1, GetContainerNumSlots(numBag) do
			local itemLink = GetContainerItemLink(numBag, slot)
			if itemLink ~= nil then
				local weightCalcResult = GearHelper:weightCalculation(itemLink)
				if weightCalcResult == -1010 then
					--print("equipItem s'est prit un -1010, on annule")
					do return end
				else
					if not InCombatLockdown and weightCalcResult[1] ~= nil and weightCalcResult[1] > 0 or weightCalcResult[2] ~= nil and weightCalcResult[2] > 0 then
						local name, link, _, _, _, itemType, _, _, itemEquipLoc, _, _ = GetItemInfo(itemLink)
						if itemEquipLoc == "INVTYPE_TRINKET" then
							if weightCalcResult[1] > weightCalcResult[2]then
								EquipItemByName(name, 13)
							else
								EquipItemByName(name, 14)
							end
						elseif itemEquipLoc == "INVTYPE_FINGER" then
							if weightCalcResult[1] > weightCalcResult[2] then
								EquipItemByName(name, 11)
							else
								EquipItemByName(name, 12)
							end
						elseif itemEquipLoc == "INVTYPE_WEAPON" then
							if weightCalcResult[1] > weightCalcResult[2] then
								EquipItemByName(name, 16)
							else
								EquipItemByName(name, 17)
							end
						else
							EquipItemByName(name)
						end
						GearHelper:scanCharacter()
						if GearHelper.db.profile.printWhenEquip then
							-- print(itemLink..L["equipVerbose"])
						end
					elseif InCombatLockdown() then
						waitEquipTimer = time()
						waitEquipFrame:Show()
					end
				end
			end
		end
	end
end

------------------------------------------------------------------
-- Create a clickable link to ask a player if he needs his loot --
-- @author Raphaël Daumas                                       --
------------------------------------------------------------------
function GearHelper:createLinkAskIfHeNeeds(debug, message, sender, language, channelString, target, flags, unknown1, channelNumber, channelName, unknown2, counter)
	local message = message or "|cff1eff00|Hitem:13262::::::::100:105::::::|h[Porte-cendres ma Gueule]|h|r"
	local sender = sender or "sender"
	local language = language or "language"
	local channelString = channelString or "channelString"
	local target = target or GetUnitName("player")
	local flags = flags or "DND"
	local unknown1 = unknown1 or 1
	local channelNumber = channelNumber or 1
	local channelName = channelName or "channelName"
	local unknown2 = unknown2 or 0
	local counter = counter or 1

	if target ~= nil and target ~= GetUnitName("player") and target ~= "" and GearHelper.db.profile.askLootRaid or debug == 1 then
		if string.find(string.lower(message), "bonus") == nil or debug == 1 then
			local couleur = ""
			local a, z, class = UnitClass(target)
			local tar

			if class ~= nil and target ~= nil then
				tar = GearHelper:CouleurClasse(class)..tostring(target).."|r"
			else
				tar = ""
			end
			local nameLink

			local OldSetItemRef = SetItemRef
			function SetItemRef(link, text, button, chatFrame)
				local func = strmatch(link, "^GHWhispWhenClick:(%a+)")
				if func == "askIfHeNeed" then
					local _, nomPerso, itLink, persoLink = strsplit("_", link)
					local _, itLink1 = GetItemInfo(itLink)

					GearHelper:askIfHeNeed(itLink, nomPerso)
				else
					OldSetItemRef(link, text, button, chatFrame)
				end
			end


			for itemLink in message:gmatch("|%x+|Hitem:.-|h.-|h|r") do
				local _, _, quality = GetItemInfo(itemLink)
				if quality ~= nil and quality < 5 or debug == 1 then
					itemLinkToAsk = itemLink
					nameLink = GearHelper:ReturnGoodLink(itemLink, target, tar)

					if debug ~= 1 then
						local weightCalcResult = GearHelper:weightCalculation(itemLink)
						if weightCalcResult ~= nil then
							if #weightCalcResult == 1 then
								if weightCalcResult[1] > 0 then
									UIErrorsFrame:AddMessage(L["ask1"]..nameLink..L["ask2"]..itemLink, 0.0, 1.0, 0.0, 80)
									print(L["ask1"]..nameLink..L["ask2"]..itemLink)
									PlaySound(5274, "Master")
								end
							else
								if weightCalcResult[1] ~= nil and weightCalcResult[1] > 0 or weightCalcResult[2] ~= nil and weightCalcResult[2] > 0 then
									UIErrorsFrame:AddMessage(L["ask1"]..nameLink..L["ask2"]..itemLink, 0.0, 1.0, 0.0, 80)
									print(L["ask1"]..nameLink..L["ask2"]..itemLink)
									PlaySound(5274, "Master")
								end
							end
						end
					elseif debug == 1 then
						UIErrorsFrame:AddMessage(L["ask1"]..nameLink..L["ask2"]..itemLink, 0.0, 1.0, 0.0, 80)
						print(L["ask1"]..nameLink..L["ask2"]..itemLink)
						PlaySound(5274, "Master")
					end
				end
			end
		end
	end
end

--------------------------------------------------------------------------
-- Parse an item tooltip to get all stats                               --
-- @author Raphaël Daumas                                               --
--------------------------------------------------------------------------
function GearHelper:getStatsFromTooltip(item)
	local tip = myTooltipFromTemplate or CreateFrame("GAMETOOLTIP", "myTooltipFromTemplate",nil,"GameTooltipTemplate")
	tip:SetOwner(WorldFrame, "ANCHOR_NONE")
	local itemLink = string.match(item, "item[%-?%d:]+")
	tip:SetHyperlink(itemLink)

	-- si la 2ème ligne contient : outil raids forgé par les titans
	-- outil raid de guerre
	-- saison 5 dde légion délaissé de guerre
	--Héroïque
	--outil raids
	--héroïque de guerre
	-- outil raids de guerre
	-- délaissé
	-- de guerre
	-- forgé par les titans

	local itemLooted = {}
	for i=1,tip:NumLines() do
		local mytext = _G["myTooltipFromTemplateTextLeft" .. i]
		local text = mytext:GetText()
		if string.find(text, '+') and not string.find(text, "Bonus") and not string.find(text, "Enchanté") and not string.find(text, "à") then
			--print(text)
			local number, stat, j = "", "", 0
			for word in string.gmatch(text, '([^ ]+)') do
				if j == 0 then
					number = word:match("([^+]+)")
				elseif j == 1 then
					if string.find(L.Tooltip["Crit"], word) then
						stat = L.Tooltip["Crit"]
					else
						stat = tostring(word)
					end
				end
				j = j + 1
			end

			number = (number:gsub("[^1234567890]", ""))

			itemLooted[stat] = tonumber(number)
		end
	end

	local tableTemp = {}
	for k, v in pairs(itemLooted) do -- pour chaque element de la liste
		tableTemp[k] = k
	end
	for kk, vv in pairs(L.Tooltip) do
		if not GearHelper:IsInTable(tableTemp, vv) then
			itemLooted[vv] = 0
		end
	end

	itemLooted["Bonus"] = nil
	return itemLooted
	-- end
end

-----------------------------------------------------------------
-- Return the delta between 2 items                            --
-- @author Raphaël Daumas                                      --
-----------------------------------------------------------------
function GearHelper:getStatsDeltaFromTooltip(looted, equiped)

	if looted == nil then
		--print("getStatsDeltaFromTooltip looted nil, c'est pas normal, verifier pourquoi")
	end
	if equiped == nil then
		--print("getStatsDeltaFromTooltip equiped nil, vérifier si un item est equipé")
		--print("item test : "..looted)
	end

	local statsEquiped = GearHelper:getStatsFromTooltip(equiped)
	local statsLooted = GearHelper:getStatsFromTooltip(looted)

	local deltaTable = {}
	table.foreach(statsEquiped, function(k, v)

		local numberStatsEquiped = statsEquiped[k]--:gsub("[^1234567890]", "")

		local numberStatsLooted = statsLooted[k]--:gsub("[^1234567890]", "")

		if tonumber(numberStatsEquiped) == nil or tonumber(numberStatsLooted) == nil then
			print(cJaune.."please send a mail to marsgamess@gmail.com with : \"Erreur fonction getStatsFromTooltip. Tester avec stuff "..equiped.." et "..looted.."\" Thank you")
			print(cRose.."please send a mail to marsgamess@gmail.com with : \"Erreur fonction getStatsFromTooltip. Tester avec stuff "..equiped.." et "..looted.."\" Thank you")
			print("please send a mail to marsgamess@gmail.com with : \"Erreur fonction getStatsFromTooltip. Tester avec stuff "..equiped.." et "..looted.."\" Thank you")
		end

		if(tostring(numberStatsLooted - numberStatsEquiped) ~= 0) then
			deltaTable[k] = tostring(numberStatsLooted - numberStatsEquiped)
			-- print("==> "..deltaTable[k])
		end

	end)

	--table.foreach(deltaTable, print)
	return deltaTable
end

local previousItemScan = ""
GameTooltip:HookScript('OnTooltipSetItem', function(self)
	if GearHelper.db.profile.addonEnabled == true then
		local _, item = self:GetItem()
		if item then --and item ~= previousItemScan then
			local _, _, _, _, _, _, _, _, itemEquipLoc = GetItemInfo(item)
			local result = GearHelper:weightCalculation(item)

			--for i = 1, #result do
			--	print(result[i])
			--end

			if result == -1010 then
				print("GameTooltip a reçu un -1010, on annule")
				do return end
			else
				if #result == 1 then
					if result[1] < 0 then
						self:AddLine(L["itemLessThanGeneral"])
					elseif result[1] == 0 then
						self:AddLine(L["itemEgal"])
					elseif result[1] > 0 then
						self:AddLine(L["itemBetterThanGeneral"]..math.floor(result[1]))
					end
				elseif #result == 2 then
					if itemEquipLoc == "INVTYPE_TRINKET" then
						if result[1] < 0 then
							self:AddLine(L["itemLessThan"].." Trinket0")-- avec une valeur de "..math.floor(value))
						elseif result[1] == 0 then
							self:AddLine(L["itemEgala"].."Trinket0")
						else
							self:AddLine(L["itemBetterThan"].." Trinket0 "..L["itemBetterThan2"]..math.floor(result[1]))
						end
						if result[2] < 0 then
							self:AddLine(L["itemLessThan"].." Trinket1")-- avec une valeur de "..math.floor(value))
						elseif result[2] == 0 then
							self:AddLine(L["itemEgala"].."Trinket1")
						else
							self:AddLine(L["itemBetterThan"].." Trinket1 "..L["itemBetterThan2"]..math.floor(result[2]))
						end
					elseif itemEquipLoc == "INVTYPE_FINGER" then
						if result[1] < 0 then
							self:AddLine(L["itemLessThan"].." Finger0")-- avec une valeur de "..math.floor(value))
						elseif result[1] == 0 then
							self:AddLine(L["itemEgala"].."Finger0")
						else
							self:AddLine(L["itemBetterThan"].." Finger0 "..L["itemBetterThan2"]..math.floor(result[1]))
						end
						if result[2] < 0 then
							self:AddLine(L["itemLessThan"].." Finger1")-- avec une valeur de "..math.floor(value))
						elseif result[2] == 0 then
							self:AddLine(L["itemEgala"].."Finger1")
						else
							self:AddLine(L["itemBetterThan"].." Finger1 "..L["itemBetterThan2"]..math.floor(result[2]))
						end
					elseif itemEquipLoc == "INVTYPE_WEAPON" then
						if result[1] < 0 then
							self:AddLine(L["itemLessThan"]..L["mainD"])-- avec une valeur de "..math.floor(value))
						elseif result[1] == 0 then
							self:AddLine(L["itemEgalMainD"])
						else
							self:AddLine(L["itemBetterThan"]..L["mainD"]..L["itemBetterThan2"]..math.floor(result[1]))
						end
						if result[2] < 0 then
							self:AddLine(L["itemLessThan"]..L["mainG"])-- avec une valeur de "..math.floor(value))
						elseif result[2] == 0 then
							self:AddLine(L["itemEgalMainG"])
						else
							self:AddLine(L["itemBetterThan"]..L["mainG"]..L["itemBetterThan2"]..math.floor(result[2]))
						end
					else
						self:AddLine(L["itemLessThanGeneral"])
					end
				end
				previousItemScan = item
			end
		end
	end
end)

-----------------------------------------------------------------
-- Whisper to the right player, the right text,                --
--      in the right language to ask him if he needs his loot. --
-- @author Raphaël Daumas                                      --
-----------------------------------------------------------------
function GearHelper:askIfHeNeed(link, sendTo )
	local a, z, class = UnitClass(sendTo)
	local _, itemLink = GetItemInfo(link)
	local lienPerso = tostring(GearHelper:CouleurClasse(class))..tostring(sendTo).."|r"
	StaticPopupDialogs["AskIfHeNeed"] = {
		text = L["demande1"]..lienPerso..L["demande2"]..itemLink.." ?",
		button1 = L["yes"],
		button2 = L["no"],
		OnAccept = function (self, data, data2)
			local LibRealmInfo = LibStub:GetLibrary("LibRealmInfo")
			local _, _, _, _, unitLocale = LibRealmInfo:GetRealmInfoByUnit(sendTo)
			--local unitLocale = "frFR"
			local theSource = "demande4"..unitLocale
			local theSource2 = "demande4"..unitLocale.."2"
			local msg = L[theSource]..itemLink..L[theSource2].."?" ~= nil and L[theSource]..itemLink..L[theSource2].."?" or L["demande4enUS"]..itemLink..L["demande4enUS2"].."?"
			-- if msg == nil then
			--     msg = L["demande4enUS"]
			-- end
			local rep = "rep"..unitLocale
			local rep2 = "rep"..unitLocale.."2"
			local msgRep = L[rep]..L["maLangue"]..L[rep2] ~= nil and L[rep]..L["maLangue"]..L[rep2] or L["repenUS"]..L["maLangue"]

			-- if msgRep == nil then
			--     msgRep = L["repenUS"]..L["maLangue"]
			-- end
			-- if unitLocale == "deDE" then
			--     SendChatMessage(msg..itemLink..L["demande4deDE2"].." ?", "WHISPER", "Common", sendTo)
			-- else
			SendChatMessage(msg, "WHISPER", "Common", sendTo)
			SendChatMessage(msgRep, "WHISPER", "Common", sendTo)
			-- end
			StaticPopup_Hide("AskIfHeNeed")
		end,
		timeout = 0,
		whileDead = true,
		hideOnEscape = true,
		preferredIndex = 3,  -- avoid some UI taint, see http://www.wowace.com/announcements/how-to-avoid-some-ui-taint/
	}
	StaticPopup_Show("AskIfHeNeed")
end
tabWaitItem = {}
local function RegisterItemInfo(item)
  if GetItemInfo(item) == nil then
    local isItemAlreadyInTab = false
    for i=0, #tabWaitItem do
      if tabWaitItem[i] == item then
        isItemAlreadyInTab = true
      end
    end
    if isItemAlreadyInTab == false then
      table.insert(tabWaitItem, item)
    end
    return false
  else
    return GetItemInfo(item)
  end
end

function GearHelper:SpecialGetItemInfo(item)
  local isItemAvailable = false
  while isItemAvailable == false do
    isItemAvailable = RegisterItemInfo(item)
    waitSpeTimer = time()
    waitSpeFrame:Show()
  end

  return isItemAvailable
end


--[[
-- Se déclenche quand on rentre en combat
function allEvents:PLAYER_REGEN_DISABLED( ... )
GearHelper.db.profile.addonEnabled= false
end

-- Se déclenche quand on sort du combat
function allEvents:PLAYER_REGEN_ENABLED( ... )
if startState == nil then
startState = true
end
print("startState = "..tostring( startState ))
GearHelper.db.profile.addonEnabled= startState
end
]]--

------------------------------------------------          ----------------------------------------------          ------------------------------------------------
-- xxxxxxx xxxxxxx --      -- xxxxxxx xxxxxxx --          -- xxxxxxx xxxxxxx --      -- xxxxx xxxxxxx --          -- xxxxxxx xxxxxxx --      -- xxxxxxx xxxxxxx --
------------------------------------------------          ----------------------------------------------          ------------------------------------------------

-- for event, _ in pairs(allEvents) do
--   eventHandler:RegisterEvent(event)
-- end
-- eventHandler:SetScript("OnEvent", function ( self, event, ... )
--   --if GearHelper.db.profile.addonEnabledor GearHelper.db.profile.addonEnabled== nil then
--   allEvents[event](self, ...)
--   --end
-- end)

--------------

-- pour chaques piece de stuff
-- faire une recherche dans l'inventaire
-- regarder s'il existe un stuff du même type
-- si oui, regarder s'il est meilleurs que celui qu'on à
-- si oui l'équiper
-- si non, le laisser dans l'inventaire
-- fonction GearHelper:weightCalculation si finger ou trinket abs ca doit planter
--recup le retour de la tabcaracter et pour chaque faire un GearHelper:weightCalculation ca economise des lignes pour trinket et bague

-- Répertorier les pièces d'inventaire
-- Répertorier les pièces dispo dans le sac (spé)
-- Marquer les pièces de l'inventaire qui peuvent etre swap par celle du sac
-- Définir le nombre de pièces Y à tester et les lister
-- Définir le nombre de commutations possibles (nbPieceSlotX * nbPieceSlotY * nbPieceSlotZ etc...)
-- Equiper les pièces pour chaque commutation et recuperer stat
-- Comparer stat par rapport au caps
