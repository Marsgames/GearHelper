--AceEvent:RegisterEvent(event, callback, args)
local L = LibStub("AceLocale-3.0"):GetLocale("GearHelper")

local prefixAddon = "GeARHeLPeRPReFIX"
local gagne = 0

waitingIDTable = waitingIDTable

-- Se déclenche quand les addons se chargent
function addonLoaded(name)
    --print(name.." - "..addonName)
    if GearHelper.db.global.templates == nil then
        GearHelper.db.global.templates = {}
    end
    GearHelper:InitTemplates()
    if name == addonName then
        -- charge le préfix de l'addon (ou un truc du genre)
        RegisterAddonMessagePrefix(prefixAddon)

        -- Active l'addon par défaut lors de la première connexion après l'installation
        -- if GHVarChar.addonOptions == nil then
        --   setDefault()
        --
        --   waitNilTimer = time()
        --   waitNilFrame:Show()
        -- end

        print(L["merci"])

        -- if GHVarChar.lastItem ~= "" and GHVarChar.lastItem ~= nil then
        --     C_Timer.After(10, function()
        --         GearHelper:createLinkAskIfHeNeeds(0, GHVarChar.lastItem.message, nil, nil, nil, GHVarChar.lastItem.target)
        --         GHVarChar.lastItem = ""
        --     end)
        -- end

    end
end

-- Evenement se déclenche quand on ouvre la fenetre d'un vendeur
function merchantShow()
    gagne = 0
    if GearHelper.db.profile.sellGreyItems then
        for bag = 0, 4 do
            for slot = 1,GetContainerNumSlots(bag) do
                if GetContainerItemID(bag, slot) ~= nil then
                    id = GetContainerItemID(bag, slot)
                    if id then
                        result = test.SiObjetGris(id)
                        if result[1] then
                            UseContainerItem(bag, slot)
                            gagne = gagne + result[2]
                        end
                    end
                end
            end
        end
    end

    if CanMerchantRepair() and GearHelper.db.profile.autoRepair == 1 or GearHelper.db.profile.autoRepair == 2 then
        local argentPossedee = GetMoney()
        local prix = GetRepairAllCost()
        if IsInGuild() and CanGuildBankRepair() then
            local droitGuilde = GetGuildBankWithdrawMoney()
            local argentGuilde = GetGuildBankMoney()
        end
        if prix > 0 then
            if  GearHelper.db.profile.autoRepair == 1 then
                if argentPossedee >= prix then
                    RepairAllItems(false)
                    print(cRose..L["repairCost"]..math.floor(prix/10000)..L["dot"]..math.floor((prix % 10000) / 100)..L["gold"])
                else
                    print(L["CantRepair"])
                end
            elseif GearHelper.db.profile.autoRepair == 2 then
                if droitGuilde ~= nil and (droitGuilde == -1 or (droitGuilde > argentGuilde and argentGuilde > prix)) then
                    RepairAllItems(true)
                    print(cRose..L["guildRepairCost"]..math.floor(prix/10000)..L["dot"]..math.floor((prix % 10000) / 100)..L["gold"])
                else
                    if argentPossedee >= prix then
                        RepairAllItems(false)
                        print(cRose..L["repairCost"]..math.floor(prix/10000)..L["dot"]..math.floor((prix % 10000) / 100)..L["gold"])
                    else
                        print(L["CantRepair"])
                    end
                end
            end
        end
    end

    --pour tous les sacs du jour
    -- pour tous les items du sac
    -- argentDépart += prixItem
    --end
    --end
    for bag = 0,4 do
        for slot = 1,GetContainerNumSlots(bag) do
            if GetContainerItemID(bag, slot) ~= nil then
                local _, itemCount = GetContainerItemInfo(bag, slot)
                id = GetContainerItemID(bag, slot)
                if id then
                    _, _, _, _, _, _, _, _, _, _, vendorPrice = GetItemInfo(id)
                    if vendorPrice ~= nil then
                        gagne = gagne + (vendorPrice * itemCount)
                    end
                end
            end
        end
    end
end

-- Evenement se déclenche à chaque écran de chargement
function playerEnteringWorld()
    specID, _, _, _, _, _ = GetSpecializationInfo(GetSpecialization(), false, false, GetUnitName("player"), UnitSex("player"))

    if GearHelper.db.profile.addonEnabled== true then
        specialisationID, specName, description, icon, background, role, primaryStat = GetSpecializationInfo(GetSpecialization(), false, false, GetUnitName("player"), UnitSex("player"))
        GearHelper:sendAskVersion()
        GearHelper:scanCharacter()
        GearHelper:scanBag()
        --poseDot()
        --print(L["merci"])
    end

    if GearHelper.db.profile.minimapButton then
        --MyMod_MinimapButton:Show()  ---------------------------------------   ENLEVER COMMENT QUAND ON REMET BOUTON MINIMAP ---------------------------------------
    else
        -- MyMod_MinimapButton:Hide()  ---------------------------------------   ENLEVER COMMENT QUAND ON REMET BOUTON MINIMAP ---------------------------------------
        -- MyMod_MinimapButton:Hide()  ---------------------------------------   ENLEVER COMMENT QUAND ON REMET BOUTON MINIMAP ---------------------------------------
    end

end

-- Se déclenche quand un message d'addon arrive
function chatMsgAddon(prefixMessage, message, channel, sender)
    if prefixMessage == prefixAddon then
        if sender:find("-")then
            local emeteur = sender:sub(0, (sender:find("-") - 1))
        else
            local emeteur = sender
        end
        if GearHelper.db.profile.addonEnabled== true then
            if emeteur ~= GetUnitName("player") then
                local prefVersion = message:sub(0, (message:find(";") - 1))
                if prefVersion == "answerVersion" then
                    local vVersion = message:sub(message:find(";")+1, #message)
                    versionCible = vVersion
                    GearHelper:receiveAnswer(vVersion, sender)
                end
                if prefVersion == "askVersion" then
                    GearHelper:sendAnswerVersion()
                end
            end
        end
    end

    local emeteur
    local myName = GetUnitName("player")
    if sender:find("-")then
        emeteur = sender:sub(0, (sender:find("-") - 1))
    end

end

-- Quand un objet attérie dans l'inventaire --bag : 0, 1, 2, 3 ou 4
function itemPush( bag, icone )
    if GearHelper.db.profile.addonEnabled then
        GearHelper:scanCharacter()
        GearHelper:scanBag()
        -- print("scanné")

        -- if bagIsOpen then
        --     suppDot()
        --     poseDot()
        --     ToggleBag()
        -- else
        --     dotIsOn = false
        -- end
        -- needToRefresh = true
        -- ContainerFrame_UpdateAll()

    end

    if GearHelper.db.profile.autoEquipLooted.actual then
        if bag == 23 then
            numBag = 4
        elseif bag == 22 then
            numBag = 3
        elseif bag == 21 then
            numBag = 2
        elseif bag == 20 then
            numBag = 1
        else
            numBag = bag
        end

        waitEquipTimer = time()
        waitEquipFrame:Show()
    end
end

-- Evenement se déclenche quand on arrive sur la page de la quête terminée (la ou il faut choisir la récompense)
function questComplete()
    local nbRecompenses = GetNumQuestChoices()
    local weightTable = {}
    local prixTable = {}
    local altTable = {}

    if GearHelper.db.profile.autoAcceptQuestReward then
        if GetNumQuestChoices() < 1 then --and GetQuestItemLink("choice", 1) ~= nil then
            GetQuestReward()
        elseif GetNumQuestChoices() == 1 then
            GetQuestReward(1)
        else
            for i = 1, GetNumQuestChoices() do
                local objetI = GetQuestItemLink("choice", i)
                local _, _, _, _, _, typeI, subTypeI, _, _, _, itemSellPrice1 = GetItemInfo(objetI)
                if typeI ~= L["armor"] and typeI ~= L["weapon"] then
                    do return end
                end
                local res = GearHelper:weightCalculation(objetI)
                if res[1] ~= nil and res[1] > 0 or res[2]~= nil and res[2] > 0 then
                    if res[1] > 0 then
                        table.insert(weightTable, res[1])
                    else
                        table.insert(weightTable, res[2])
                    end
                else
                    table.insert(weightTable, -10)

                    table.insert(prixTable, itemSellPrice1)
                    table.insert(altTable, itemSellPrice1, objetI)
                end
            end

            local maxWeight = weightTable[1]
            local keyWeight = 1
            local maxPrix = prixTable[1]
            local keyPrix = 1

            for i = 1, #weightTable do
                if weightTable[i] > maxWeight then
                    maxWeight = weightTable[i]
                    keyWeight = i
                end
            end

            for i = 1, #prixTable do
                if prixTable[i] > maxPrix then
                    maxPrix = prixTable[i]
                    keyPrix = i
                end
            end

            local prixTriee = prixTable
            table.sort( prixTriee )

            -- print("prix table ----")
            -- foreach(prixTriee, print)
            -- print("fin prix table ------")

            if typeI == L["monture"] or typeI == L["mascotte"] or subTypeI == L["monture"] or subTypeI == L["mascotte"] then
                do return end
            end

            for k, v in pairs(L["TypeToNotNeed"]) do
                if typeI == v or subTypeI == v then
                    --print("on a rien need ?")
                    do return end
                end
            end


        end

        --print("maxweight : "..maxWeight)
        if subTypeI ~= nil and subTypeI ~= L["reliqueAP"] and typeI ~= L["gemme"] then
            if maxWeight > 0 then
                GetQuestReward(keyWeight) -- normalement c'est bon
                do return end
            end
            GetQuestReward(keyPrix) -- normalement c'est bon
        else
            --print("subtype : "..tostring(subTypeI))
        end
    end
end

-- Evenement se déclanche quand la fenêtre besoin/cupi pop en donjon
function startLootRoll(number, timer)
    -- classeEN est la même, quelle que soit la langue du client
    --local classeFR, classeEN, classeNumber = UnitClass("player")
    local link, name, _, _, bindOnPickUp, canNeed, canGreed  = GetLootRollItemInfo(number)
    local _, _, _, _, _, itemType, itemSubType = GetItemInfo(link)

    -- number = ID de l'id du roll (1, 2, 3)
    -- rollType = 0 pass, 1 need, 2 cupi, 3 dez
    -- ConfirmLootRoll(number, rollType)

    local weightCalcResult = GearHelper:weightCalculation(link)

    GearHelper:scanCharacter()

    if canNeed then
        if GearHelper.db.profile.autoNeed then
            if itemType == L["armor"] or itemType == L["weapon"] then
                if weightCalcResult[1] ~= nil then
                    print("weightCalcResult[1] : "..weightCalcResult[1])
                else
                    print("weightCalcResult[1] nil")
                    print(weightCalcResult)
                end
                if weightCalcResult[2] ~= nil then
                    print("weightCalcResult[2] : "..weightCalcResult[2])
                else
                    print("weightCalcResult[2] nil")
                    print(weightCalcResult)
                end

                if (weightCalcResult[1] ~= nil and weightCalcResult[1] > 0) or (weightCalcResult[2] ~= nil and weightCalcResult[2] > 0) then
                    print("J'ai need 1 "..name)
                    UIErrorsFrame:AddMessage(L["iNeededOn"]..name, 0.0, 1.0, 0.0, 150)          -----------          DEBUG MODE        -----------
                elseif GearHelper.db.profile.autoGreed then
                    print("J'ai cupi 2 "..name)
                end
            elseif itemType == L["monture"] or itemType == L["mascotte"] then
                print("J'ai need 3 "..name)
                UIErrorsFrame:AddMessage(L["iNeededOn"]..name, 0.0, 1.0, 0.0, 80)
            end
        end
    elseif canGreed then
        if GearHelper.db.profile.autoGreed then

            -- local typeNotToNeed = {}
            --
            -- _, _, _, _, _, typeNotToNeed["sac"], typeNotToNeed["conteneur"] = GetItemInfo(114821) -- sac + conteneur
            -- _, _, _, _, _, typeNotToNeed["consommable"], typeNotToNeed["autre"] = GetItemInfo(124640) -- consommable + autre
            -- _, _, _, _, _, typeNotToNeed["glyphe"] = GetItemInfo(44922) -- glyphe , classe
            -- _, _, _, _, _, typeNotToNeed["artisanat"], typeNotToNeed["element"] = GetItemInfo(111366) -- element = compo metier    | artisanat + element
            -- _, _, _, _, _, typeNotToNeed["recette"] = GetItemInfo(67538) -- artisanat, metier      | Recette
            -- _, _, _, _, _, typeNotToNeed["gemme"], typeNotToNeed["relique"] = GetItemInfo(147108) -- Gemme, carac         | gemme + relique
            -- _, _, _, _, _, typeNotToNeed["divers"], typeNotToNeed["camelote"] = GetItemInfo(45190) -- divers + camelotte
            -- _, _, _, _, _, typeNotToNeed["quete"] = GetItemInfo(122190)
            -- _, _, _, _, _, typeNotToNeed["cle"] = GetItemInfo(94222)

            for k, v in pairs( L["TypeToNotNeed"] ) do
                if itemType == v or itemSubType == v then
                    do return end
                end
            end
            ConfirmLootRoll(number, 2)
        end
    end
end


function merchantClosed( ... )
    if GearHelper.db.profile.sellGreyItems then
        local argentFin = 0
        for bag = 0,4 do
            for slot = 1,GetContainerNumSlots(bag) do
                if GetContainerItemID(bag, slot) ~= nil then
                    local _, itemCount = GetContainerItemInfo(bag, slot)
                    id = GetContainerItemID(bag, slot)
                    if id then
                        _, _, _, _, _, _, _, _, _, _, vendorPrice = GetItemInfo(id)
                        argentFin = argentFin + (vendorPrice * itemCount)
                    end
                end
            end
        end
        if(gagne - argentFin > 0) then
            print(cVert..L["moneyEarned"]..math.floor((gagne - argentFin)/10000)..L["dot"]..math.floor(((gagne - argentFin) % 10000) / 100)..L["gold"])
            gagne = 0
        end
    end
end

function bagUpdate( bagID )
    --Random check to verify that charInventory is initialized because bagUpdate is fired before playerEnteringWorld
    if GearHelper.charInventory["MainHand"] ~= "" and GearHelper.charInventory["MainHand"] ~= nil then
        -- print("pose dot")
        GearHelper:scanBag()
        GearHelper:scanCharacter()
        GearHelper:poseDot()
    end
end

-- Se déclenche au changement de spé
function activeTalentGroupChanged()
    if GearHelper.db.profile.autoEquipWhenSwitchSpe then
        waitSpeTimer = time()
        waitSpeFrame:Show()
    end
end

function chatMsgChannel(msg, sender, _, _, _, _, _, channelNumber)
    --print("sender : "..sender.."\nsender class : "..tostring(UnitClass(sender)))
    if GearHelper.db.profile.autoInvite and msg ~= nil then
        local playerIsNotMe = not string.find(sender, GetUnitName("player"))
        if msg:lower() == GearHelper.db.profile.inviteMessage:lower() and playerIsNotMe and GetNumGroupMembers() == 5 then
            ConvertToRaid()
            InviteUnit(sender)
        elseif msg:lower() == GearHelper.db.profile.inviteMessage:lower() and playerIsNotMe then
            InviteUnit(sender)
        end
    end
end

function chatMsgWhisper(msg, sender)
    if GearHelper.db.profile.autoInvite and msg ~= nil then
        local playerIsNotMe = not string.find(sender, GetUnitName("player"))
        if msg:lower() == GearHelper.db.profile.inviteMessage:lower() and playerIsNotMe and GetNumGroupMembers() == 5 then
            ConvertToRaid()
            InviteUnit(sender)
        elseif msg:lower() == GearHelper.db.profile.inviteMessage:lower() and playerIsNotMe then
            InviteUnit(sender)
        end
    end
end

function chatMsgLoot(message, sender, language, channelString, target, flags, unknown1, channelNumber, channelName, unknown2, counter)
    --print("Message : "..message.."\nsender : "..sender.."\ntarget : "..target.."\nflags : "..flags.."\nunknown1 : "..unknown1.."\nunknown2 : "..unknown2.."\ncounter : "..counter)
    GearHelper:createLinkAskIfHeNeeds(0, message, sender, language, channelString, target, flags, unknown1, channelNumber, channelName, unknown2, counter)

    local used = false
    for i = 1, NUM_CHAT_WINDOWS do
        local name, fontSize, r, g, b, alpha, shown, locked, docked, uninteractable = GetChatWindowInfo(i);
        if(uninteractable) then
            SetChatWindowUninteractable(i, false)
            used = true
        end
    end
    if used then
        ReloadUI()
    end
end

-- Appellé quand le stuff du joueur est changé ou quand le stuff du perso qu'il est en train d'inspecter est changé
-- fired when player change stuff --> if we haven't a fishing rod equiped we change stuff
function unitInventoryChanged(joueur)
    if GearHelper.db.profile.addonEnabled and joueur == "player" then
        GearHelper:scanCharacter()
        GearHelper:scanBag()
        if GetInventoryItemLink("player",GetInventorySlotInfo("MainHandSlot")) ~= nil then
            local _, _, _, _, _, _, subclass  = GetItemInfo(GetInventoryItemLink("player",GetInventorySlotInfo("MainHandSlot")))
            if subclass == L["cannapeche"] then
                GearHelper.db.profile.autoEquipLooted.previous = GearHelper.db.profile.autoEquipLooted.actual
                GearHelper.db.profile.autoEquipLooted.actual = false
            else
                GearHelper.db.profile.autoEquipLooted.actual = GearHelper.db.profile.autoEquipLooted.previous
            end
        end
    end
end

function questTurnedIn( ... )
    if GearHelper.db.profile.autoEquipLooted.actual then
        waitSpeTimer = time()
        waitSpeFrame:Show()
    end
end
--[[
co = coroutine.create(test)
coroutine.resume(itemID, "457965")

function test(itemID)
if GetItemInfo(itemID) then
return GetItemInfo(itemID)
else
coroutine.yield(-1)

end--]]

function getItemInfoReceived()
    for index, id in pairs(waitingIDTable) do
        if GetItemInfo(id) then
            -- many codes, handle it
            waitingIDTable[index] = nil
            -- print("ID : "..id.." received")
            -- print("GetItemInfo("..id..") : "..GetItemInfo(id)) -------------- TESTER  CETTE PUTAIN DE LIGNE QUI NE VA RIEN RENVOYER
        end
    end
end


GearHelper:RegisterEvent("ADDON_LOADED", addonLoaded, name)
GearHelper:RegisterEvent("MERCHANT_SHOW", merchantShow)
GearHelper:RegisterEvent("PLAYER_ENTERING_WORLD", playerEnteringWorld)
GearHelper:RegisterEvent("CHAT_MSG_ADDON", chatMsgAddon, prefixMessage, message, channel, sender)
GearHelper:RegisterEvent("ITEM_PUSH", itemPush,bag,icone)
GearHelper:RegisterEvent("QUEST_COMPLETE", questComplete)
GearHelper:RegisterEvent("START_LOOT_ROLL", startLootRoll, number, timer)
GearHelper:RegisterEvent("MERCHANT_CLOSED", merchantClosed)
GearHelper:RegisterEvent("BAG_UPDATE", bagUpdate)
GearHelper:RegisterEvent("ACTIVE_TALENT_GROUP_CHANGED", activeTalentGroupChanged)
GearHelper:RegisterEvent("CHAT_MSG_CHANNEL", chatMsgChannel, msg, sender, _, _, _, _, _, channelNumber)
GearHelper:RegisterEvent("CHAT_MSG_WHISPER", chatMsgWhisper, msg, sender)
GearHelper:RegisterEvent("CHAT_MSG_LOOT", chatMsgLoot, message, sender, language, channelString, target, flags, unknown1, channelNumber, channelName, unknown2, counter)
GearHelper:RegisterEvent("UNIT_INVENTORY_CHANGED", unitInventoryChanged, joueur)
GearHelper:RegisterEvent("QUEST_TURNED_IN", questTurnedIn)
GearHelper:RegisterEvent("GET_ITEM_INFO_RECEIVED", getItemInfoReceived)
